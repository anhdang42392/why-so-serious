
NO_HOPE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac58  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019c8  0800ad68  0800ad68  0000bd68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c730  0800c730  0000e200  2**0
                  CONTENTS
  4 .ARM          00000008  0800c730  0800c730  0000d730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c738  0800c738  0000e200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c738  0800c738  0000d738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c73c  0800c73c  0000d73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  0800c740  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000be0  20000200  0800c940  0000e200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000de0  0800c940  0000ede0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cfbb  00000000  00000000  0000e229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000261a  00000000  00000000  0001b1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0001d800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000096c  00000000  00000000  0001e420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d70  00000000  00000000  0001ed8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c72  00000000  00000000  00037afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087590  00000000  00000000  0004876e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cfcfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004948  00000000  00000000  000cfd44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  000d468c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000200 	.word	0x20000200
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ad50 	.word	0x0800ad50

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000204 	.word	0x20000204
 800014c:	0800ad50 	.word	0x0800ad50

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__gesf2>:
 8000b68:	f04f 3cff 	mov.w	ip, #4294967295
 8000b6c:	e006      	b.n	8000b7c <__cmpsf2+0x4>
 8000b6e:	bf00      	nop

08000b70 <__lesf2>:
 8000b70:	f04f 0c01 	mov.w	ip, #1
 8000b74:	e002      	b.n	8000b7c <__cmpsf2+0x4>
 8000b76:	bf00      	nop

08000b78 <__cmpsf2>:
 8000b78:	f04f 0c01 	mov.w	ip, #1
 8000b7c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b8c:	bf18      	it	ne
 8000b8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b92:	d011      	beq.n	8000bb8 <__cmpsf2+0x40>
 8000b94:	b001      	add	sp, #4
 8000b96:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b9a:	bf18      	it	ne
 8000b9c:	ea90 0f01 	teqne	r0, r1
 8000ba0:	bf58      	it	pl
 8000ba2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ba6:	bf88      	it	hi
 8000ba8:	17c8      	asrhi	r0, r1, #31
 8000baa:	bf38      	it	cc
 8000bac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000bb0:	bf18      	it	ne
 8000bb2:	f040 0001 	orrne.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bbc:	d102      	bne.n	8000bc4 <__cmpsf2+0x4c>
 8000bbe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000bc2:	d105      	bne.n	8000bd0 <__cmpsf2+0x58>
 8000bc4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000bc8:	d1e4      	bne.n	8000b94 <__cmpsf2+0x1c>
 8000bca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000bce:	d0e1      	beq.n	8000b94 <__cmpsf2+0x1c>
 8000bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cfrcmple>:
 8000bd8:	4684      	mov	ip, r0
 8000bda:	4608      	mov	r0, r1
 8000bdc:	4661      	mov	r1, ip
 8000bde:	e7ff      	b.n	8000be0 <__aeabi_cfcmpeq>

08000be0 <__aeabi_cfcmpeq>:
 8000be0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000be2:	f7ff ffc9 	bl	8000b78 <__cmpsf2>
 8000be6:	2800      	cmp	r0, #0
 8000be8:	bf48      	it	mi
 8000bea:	f110 0f00 	cmnmi.w	r0, #0
 8000bee:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bf0 <__aeabi_fcmpeq>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff fff4 	bl	8000be0 <__aeabi_cfcmpeq>
 8000bf8:	bf0c      	ite	eq
 8000bfa:	2001      	moveq	r0, #1
 8000bfc:	2000      	movne	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_fcmplt>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffea 	bl	8000be0 <__aeabi_cfcmpeq>
 8000c0c:	bf34      	ite	cc
 8000c0e:	2001      	movcc	r0, #1
 8000c10:	2000      	movcs	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_fcmple>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffe0 	bl	8000be0 <__aeabi_cfcmpeq>
 8000c20:	bf94      	ite	ls
 8000c22:	2001      	movls	r0, #1
 8000c24:	2000      	movhi	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_fcmpge>:
 8000c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c30:	f7ff ffd2 	bl	8000bd8 <__aeabi_cfrcmple>
 8000c34:	bf94      	ite	ls
 8000c36:	2001      	movls	r0, #1
 8000c38:	2000      	movhi	r0, #0
 8000c3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fcmpgt>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff ffc8 	bl	8000bd8 <__aeabi_cfrcmple>
 8000c48:	bf34      	ite	cc
 8000c4a:	2001      	movcc	r0, #1
 8000c4c:	2000      	movcs	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <__aeabi_d2lz>:
 8000c54:	b538      	push	{r3, r4, r5, lr}
 8000c56:	2200      	movs	r2, #0
 8000c58:	2300      	movs	r3, #0
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	460d      	mov	r5, r1
 8000c5e:	f7ff fead 	bl	80009bc <__aeabi_dcmplt>
 8000c62:	b928      	cbnz	r0, 8000c70 <__aeabi_d2lz+0x1c>
 8000c64:	4620      	mov	r0, r4
 8000c66:	4629      	mov	r1, r5
 8000c68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c6c:	f000 b80a 	b.w	8000c84 <__aeabi_d2ulz>
 8000c70:	4620      	mov	r0, r4
 8000c72:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c76:	f000 f805 	bl	8000c84 <__aeabi_d2ulz>
 8000c7a:	4240      	negs	r0, r0
 8000c7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c80:	bd38      	pop	{r3, r4, r5, pc}
 8000c82:	bf00      	nop

08000c84 <__aeabi_d2ulz>:
 8000c84:	b5d0      	push	{r4, r6, r7, lr}
 8000c86:	2200      	movs	r2, #0
 8000c88:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb8 <__aeabi_d2ulz+0x34>)
 8000c8a:	4606      	mov	r6, r0
 8000c8c:	460f      	mov	r7, r1
 8000c8e:	f7ff fc23 	bl	80004d8 <__aeabi_dmul>
 8000c92:	f7ff fef9 	bl	8000a88 <__aeabi_d2uiz>
 8000c96:	4604      	mov	r4, r0
 8000c98:	f7ff fba4 	bl	80003e4 <__aeabi_ui2d>
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <__aeabi_d2ulz+0x38>)
 8000ca0:	f7ff fc1a 	bl	80004d8 <__aeabi_dmul>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	4630      	mov	r0, r6
 8000caa:	4639      	mov	r1, r7
 8000cac:	f7ff fa5c 	bl	8000168 <__aeabi_dsub>
 8000cb0:	f7ff feea 	bl	8000a88 <__aeabi_d2uiz>
 8000cb4:	4621      	mov	r1, r4
 8000cb6:	bdd0      	pop	{r4, r6, r7, pc}
 8000cb8:	3df00000 	.word	0x3df00000
 8000cbc:	41f00000 	.word	0x41f00000

08000cc0 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8000cc0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000cc4:	b08c      	sub	sp, #48	@ 0x30
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
 8000cca:	6039      	str	r1, [r7, #0]
	inx = 0;
 8000ccc:	4b72      	ldr	r3, [pc, #456]	@ (8000e98 <decodeGGA+0x1d8>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000cd6:	e004      	b.n	8000ce2 <decodeGGA+0x22>
 8000cd8:	4b6f      	ldr	r3, [pc, #444]	@ (8000e98 <decodeGGA+0x1d8>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	4a6e      	ldr	r2, [pc, #440]	@ (8000e98 <decodeGGA+0x1d8>)
 8000ce0:	6013      	str	r3, [r2, #0]
 8000ce2:	4b6d      	ldr	r3, [pc, #436]	@ (8000e98 <decodeGGA+0x1d8>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4413      	add	r3, r2
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b2c      	cmp	r3, #44	@ 0x2c
 8000cf0:	d1f2      	bne.n	8000cd8 <decodeGGA+0x18>
	inx++;
 8000cf2:	4b69      	ldr	r3, [pc, #420]	@ (8000e98 <decodeGGA+0x1d8>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	4a67      	ldr	r2, [pc, #412]	@ (8000e98 <decodeGGA+0x1d8>)
 8000cfa:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8000cfc:	e004      	b.n	8000d08 <decodeGGA+0x48>
 8000cfe:	4b66      	ldr	r3, [pc, #408]	@ (8000e98 <decodeGGA+0x1d8>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	3301      	adds	r3, #1
 8000d04:	4a64      	ldr	r2, [pc, #400]	@ (8000e98 <decodeGGA+0x1d8>)
 8000d06:	6013      	str	r3, [r2, #0]
 8000d08:	4b63      	ldr	r3, [pc, #396]	@ (8000e98 <decodeGGA+0x1d8>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b2c      	cmp	r3, #44	@ 0x2c
 8000d16:	d1f2      	bne.n	8000cfe <decodeGGA+0x3e>
	inx++;
 8000d18:	4b5f      	ldr	r3, [pc, #380]	@ (8000e98 <decodeGGA+0x1d8>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	4a5e      	ldr	r2, [pc, #376]	@ (8000e98 <decodeGGA+0x1d8>)
 8000d20:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8000d22:	e004      	b.n	8000d2e <decodeGGA+0x6e>
 8000d24:	4b5c      	ldr	r3, [pc, #368]	@ (8000e98 <decodeGGA+0x1d8>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	4a5b      	ldr	r2, [pc, #364]	@ (8000e98 <decodeGGA+0x1d8>)
 8000d2c:	6013      	str	r3, [r2, #0]
 8000d2e:	4b5a      	ldr	r3, [pc, #360]	@ (8000e98 <decodeGGA+0x1d8>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	461a      	mov	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4413      	add	r3, r2
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b2c      	cmp	r3, #44	@ 0x2c
 8000d3c:	d1f2      	bne.n	8000d24 <decodeGGA+0x64>
	inx++;
 8000d3e:	4b56      	ldr	r3, [pc, #344]	@ (8000e98 <decodeGGA+0x1d8>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	3301      	adds	r3, #1
 8000d44:	4a54      	ldr	r2, [pc, #336]	@ (8000e98 <decodeGGA+0x1d8>)
 8000d46:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8000d48:	e004      	b.n	8000d54 <decodeGGA+0x94>
 8000d4a:	4b53      	ldr	r3, [pc, #332]	@ (8000e98 <decodeGGA+0x1d8>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	4a51      	ldr	r2, [pc, #324]	@ (8000e98 <decodeGGA+0x1d8>)
 8000d52:	6013      	str	r3, [r2, #0]
 8000d54:	4b50      	ldr	r3, [pc, #320]	@ (8000e98 <decodeGGA+0x1d8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b2c      	cmp	r3, #44	@ 0x2c
 8000d62:	d1f2      	bne.n	8000d4a <decodeGGA+0x8a>
	inx++;
 8000d64:	4b4c      	ldr	r3, [pc, #304]	@ (8000e98 <decodeGGA+0x1d8>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	4a4b      	ldr	r2, [pc, #300]	@ (8000e98 <decodeGGA+0x1d8>)
 8000d6c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 8000d6e:	e004      	b.n	8000d7a <decodeGGA+0xba>
 8000d70:	4b49      	ldr	r3, [pc, #292]	@ (8000e98 <decodeGGA+0x1d8>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	3301      	adds	r3, #1
 8000d76:	4a48      	ldr	r2, [pc, #288]	@ (8000e98 <decodeGGA+0x1d8>)
 8000d78:	6013      	str	r3, [r2, #0]
 8000d7a:	4b47      	ldr	r3, [pc, #284]	@ (8000e98 <decodeGGA+0x1d8>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4413      	add	r3, r2
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b2c      	cmp	r3, #44	@ 0x2c
 8000d88:	d1f2      	bne.n	8000d70 <decodeGGA+0xb0>
	inx++;
 8000d8a:	4b43      	ldr	r3, [pc, #268]	@ (8000e98 <decodeGGA+0x1d8>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	4a41      	ldr	r2, [pc, #260]	@ (8000e98 <decodeGGA+0x1d8>)
 8000d92:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 8000d94:	e004      	b.n	8000da0 <decodeGGA+0xe0>
 8000d96:	4b40      	ldr	r3, [pc, #256]	@ (8000e98 <decodeGGA+0x1d8>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	4a3e      	ldr	r2, [pc, #248]	@ (8000e98 <decodeGGA+0x1d8>)
 8000d9e:	6013      	str	r3, [r2, #0]
 8000da0:	4b3d      	ldr	r3, [pc, #244]	@ (8000e98 <decodeGGA+0x1d8>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b2c      	cmp	r3, #44	@ 0x2c
 8000dae:	d1f2      	bne.n	8000d96 <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8000db0:	4b39      	ldr	r3, [pc, #228]	@ (8000e98 <decodeGGA+0x1d8>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	3301      	adds	r3, #1
 8000db6:	4a38      	ldr	r2, [pc, #224]	@ (8000e98 <decodeGGA+0x1d8>)
 8000db8:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++; // after position ','
 8000dba:	e004      	b.n	8000dc6 <decodeGGA+0x106>
 8000dbc:	4b36      	ldr	r3, [pc, #216]	@ (8000e98 <decodeGGA+0x1d8>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	4a35      	ldr	r2, [pc, #212]	@ (8000e98 <decodeGGA+0x1d8>)
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	4b34      	ldr	r3, [pc, #208]	@ (8000e98 <decodeGGA+0x1d8>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4413      	add	r3, r2
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b2c      	cmp	r3, #44	@ 0x2c
 8000dd4:	d1f2      	bne.n	8000dbc <decodeGGA+0xfc>
	inx++;
 8000dd6:	4b30      	ldr	r3, [pc, #192]	@ (8000e98 <decodeGGA+0x1d8>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	4a2e      	ldr	r2, [pc, #184]	@ (8000e98 <decodeGGA+0x1d8>)
 8000dde:	6013      	str	r3, [r2, #0]
	while(GGAbuffer[inx] != ',') inx++;   // after  number of gga->numofggagps->numofsat ','
 8000de0:	e004      	b.n	8000dec <decodeGGA+0x12c>
 8000de2:	4b2d      	ldr	r3, [pc, #180]	@ (8000e98 <decodeGGA+0x1d8>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	3301      	adds	r3, #1
 8000de8:	4a2b      	ldr	r2, [pc, #172]	@ (8000e98 <decodeGGA+0x1d8>)
 8000dea:	6013      	str	r3, [r2, #0]
 8000dec:	4b2a      	ldr	r3, [pc, #168]	@ (8000e98 <decodeGGA+0x1d8>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	461a      	mov	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b2c      	cmp	r3, #44	@ 0x2c
 8000dfa:	d1f2      	bne.n	8000de2 <decodeGGA+0x122>
	inx++;
 8000dfc:	4b26      	ldr	r3, [pc, #152]	@ (8000e98 <decodeGGA+0x1d8>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	3301      	adds	r3, #1
 8000e02:	4a25      	ldr	r2, [pc, #148]	@ (8000e98 <decodeGGA+0x1d8>)
 8000e04:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6') ||  (GGAbuffer[inx] == '8'))   // 0 indicates no fix yet
 8000e06:	4b24      	ldr	r3, [pc, #144]	@ (8000e98 <decodeGGA+0x1d8>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4413      	add	r3, r2
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b31      	cmp	r3, #49	@ 0x31
 8000e14:	d017      	beq.n	8000e46 <decodeGGA+0x186>
 8000e16:	4b20      	ldr	r3, [pc, #128]	@ (8000e98 <decodeGGA+0x1d8>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4413      	add	r3, r2
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b32      	cmp	r3, #50	@ 0x32
 8000e24:	d00f      	beq.n	8000e46 <decodeGGA+0x186>
 8000e26:	4b1c      	ldr	r3, [pc, #112]	@ (8000e98 <decodeGGA+0x1d8>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4413      	add	r3, r2
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b36      	cmp	r3, #54	@ 0x36
 8000e34:	d007      	beq.n	8000e46 <decodeGGA+0x186>
 8000e36:	4b18      	ldr	r3, [pc, #96]	@ (8000e98 <decodeGGA+0x1d8>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4413      	add	r3, r2
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b38      	cmp	r3, #56	@ 0x38
 8000e44:	d106      	bne.n	8000e54 <decodeGGA+0x194>
	{
		gga->isfixValid = 1;   // fix available
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8000e4c:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <decodeGGA+0x1d8>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000e52:	e009      	b.n	8000e68 <decodeGGA+0x1a8>
		gga->isfixValid = 0;   // If the fix is not available
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	2200      	movs	r2, #0
 8000e58:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e33c      	b.n	80014d8 <decodeGGA+0x818>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e98 <decodeGGA+0x1d8>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	3301      	adds	r3, #1
 8000e64:	4a0c      	ldr	r2, [pc, #48]	@ (8000e98 <decodeGGA+0x1d8>)
 8000e66:	6013      	str	r3, [r2, #0]
 8000e68:	4b0b      	ldr	r3, [pc, #44]	@ (8000e98 <decodeGGA+0x1d8>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b2c      	cmp	r3, #44	@ 0x2c
 8000e76:	d1f2      	bne.n	8000e5e <decodeGGA+0x19e>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 8000e78:	4b07      	ldr	r3, [pc, #28]	@ (8000e98 <decodeGGA+0x1d8>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	4a06      	ldr	r2, [pc, #24]	@ (8000e98 <decodeGGA+0x1d8>)
 8000e80:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000e82:	f107 030c 	add.w	r3, r7, #12
 8000e86:	220c      	movs	r2, #12
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f006 fb05 	bl	800749a <memset>
	i=0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8000e94:	e016      	b.n	8000ec4 <decodeGGA+0x204>
 8000e96:	bf00      	nop
 8000e98:	2000021c 	.word	0x2000021c
	{
		buffer[i] = GGAbuffer[inx];
 8000e9c:	4ba7      	ldr	r3, [pc, #668]	@ (800113c <decodeGGA+0x47c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	7819      	ldrb	r1, [r3, #0]
 8000ea8:	f107 020c 	add.w	r2, r7, #12
 8000eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eae:	4413      	add	r3, r2
 8000eb0:	460a      	mov	r2, r1
 8000eb2:	701a      	strb	r2, [r3, #0]
		i++;
 8000eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 8000eba:	4ba0      	ldr	r3, [pc, #640]	@ (800113c <decodeGGA+0x47c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	4a9e      	ldr	r2, [pc, #632]	@ (800113c <decodeGGA+0x47c>)
 8000ec2:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8000ec4:	4b9d      	ldr	r3, [pc, #628]	@ (800113c <decodeGGA+0x47c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b2c      	cmp	r3, #44	@ 0x2c
 8000ed2:	d1e3      	bne.n	8000e9c <decodeGGA+0x1dc>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f004 fcb8 	bl	800584e <atoi>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	4a97      	ldr	r2, [pc, #604]	@ (8001140 <decodeGGA+0x480>)
 8000ee2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ee6:	1312      	asrs	r2, r2, #12
 8000ee8:	17db      	asrs	r3, r3, #31
 8000eea:	1ad2      	subs	r2, r2, r3
 8000eec:	4b95      	ldr	r3, [pc, #596]	@ (8001144 <decodeGGA+0x484>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4995      	ldr	r1, [pc, #596]	@ (8001148 <decodeGGA+0x488>)
 8000ef2:	fb81 0103 	smull	r0, r1, r1, r3
 8000ef6:	1149      	asrs	r1, r1, #5
 8000ef8:	17db      	asrs	r3, r3, #31
 8000efa:	1acb      	subs	r3, r1, r3
 8000efc:	4413      	add	r3, r2
 8000efe:	4a93      	ldr	r2, [pc, #588]	@ (800114c <decodeGGA+0x48c>)
 8000f00:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	4618      	mov	r0, r3
 8000f08:	f004 fca1 	bl	800584e <atoi>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	4a8e      	ldr	r2, [pc, #568]	@ (8001148 <decodeGGA+0x488>)
 8000f10:	fb82 1203 	smull	r1, r2, r2, r3
 8000f14:	1152      	asrs	r2, r2, #5
 8000f16:	17db      	asrs	r3, r3, #31
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	4a8b      	ldr	r2, [pc, #556]	@ (8001148 <decodeGGA+0x488>)
 8000f1c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f20:	1151      	asrs	r1, r2, #5
 8000f22:	17da      	asrs	r2, r3, #31
 8000f24:	1a8a      	subs	r2, r1, r2
 8000f26:	2164      	movs	r1, #100	@ 0x64
 8000f28:	fb01 f202 	mul.w	r2, r1, r2
 8000f2c:	1a9a      	subs	r2, r3, r2
 8000f2e:	4b85      	ldr	r3, [pc, #532]	@ (8001144 <decodeGGA+0x484>)
 8000f30:	6819      	ldr	r1, [r3, #0]
 8000f32:	4b85      	ldr	r3, [pc, #532]	@ (8001148 <decodeGGA+0x488>)
 8000f34:	fb83 0301 	smull	r0, r3, r3, r1
 8000f38:	1158      	asrs	r0, r3, #5
 8000f3a:	17cb      	asrs	r3, r1, #31
 8000f3c:	1ac3      	subs	r3, r0, r3
 8000f3e:	2064      	movs	r0, #100	@ 0x64
 8000f40:	fb00 f303 	mul.w	r3, r0, r3
 8000f44:	1acb      	subs	r3, r1, r3
 8000f46:	4413      	add	r3, r2
 8000f48:	4a81      	ldr	r2, [pc, #516]	@ (8001150 <decodeGGA+0x490>)
 8000f4a:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59)
 8000f4c:	4b80      	ldr	r3, [pc, #512]	@ (8001150 <decodeGGA+0x490>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b3b      	cmp	r3, #59	@ 0x3b
 8000f52:	dd09      	ble.n	8000f68 <decodeGGA+0x2a8>
	{
		min = min-60;
 8000f54:	4b7e      	ldr	r3, [pc, #504]	@ (8001150 <decodeGGA+0x490>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	3b3c      	subs	r3, #60	@ 0x3c
 8000f5a:	4a7d      	ldr	r2, [pc, #500]	@ (8001150 <decodeGGA+0x490>)
 8000f5c:	6013      	str	r3, [r2, #0]
		hr++;
 8000f5e:	4b7b      	ldr	r3, [pc, #492]	@ (800114c <decodeGGA+0x48c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	3301      	adds	r3, #1
 8000f64:	4a79      	ldr	r2, [pc, #484]	@ (800114c <decodeGGA+0x48c>)
 8000f66:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 8000f68:	4b78      	ldr	r3, [pc, #480]	@ (800114c <decodeGGA+0x48c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	da09      	bge.n	8000f84 <decodeGGA+0x2c4>
	{
		hr=24+hr;
 8000f70:	4b76      	ldr	r3, [pc, #472]	@ (800114c <decodeGGA+0x48c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	3318      	adds	r3, #24
 8000f76:	4a75      	ldr	r2, [pc, #468]	@ (800114c <decodeGGA+0x48c>)
 8000f78:	6013      	str	r3, [r2, #0]
		daychange--;
 8000f7a:	4b76      	ldr	r3, [pc, #472]	@ (8001154 <decodeGGA+0x494>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	4a74      	ldr	r2, [pc, #464]	@ (8001154 <decodeGGA+0x494>)
 8000f82:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 8000f84:	4b71      	ldr	r3, [pc, #452]	@ (800114c <decodeGGA+0x48c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b17      	cmp	r3, #23
 8000f8a:	dd09      	ble.n	8000fa0 <decodeGGA+0x2e0>
	{
		hr=hr-24;
 8000f8c:	4b6f      	ldr	r3, [pc, #444]	@ (800114c <decodeGGA+0x48c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	3b18      	subs	r3, #24
 8000f92:	4a6e      	ldr	r2, [pc, #440]	@ (800114c <decodeGGA+0x48c>)
 8000f94:	6013      	str	r3, [r2, #0]
		daychange++;
 8000f96:	4b6f      	ldr	r3, [pc, #444]	@ (8001154 <decodeGGA+0x494>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	4a6d      	ldr	r2, [pc, #436]	@ (8001154 <decodeGGA+0x494>)
 8000f9e:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 8000fa0:	4b6a      	ldr	r3, [pc, #424]	@ (800114c <decodeGGA+0x48c>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 8000fa8:	4b69      	ldr	r3, [pc, #420]	@ (8001150 <decodeGGA+0x490>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f004 fc4a 	bl	800584e <atoi>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	4b62      	ldr	r3, [pc, #392]	@ (8001148 <decodeGGA+0x488>)
 8000fbe:	fb83 1302 	smull	r1, r3, r3, r2
 8000fc2:	1159      	asrs	r1, r3, #5
 8000fc4:	17d3      	asrs	r3, r2, #31
 8000fc6:	1acb      	subs	r3, r1, r3
 8000fc8:	2164      	movs	r1, #100	@ 0x64
 8000fca:	fb01 f303 	mul.w	r3, r1, r3
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	683a      	ldr	r2, [r7, #0]
 8000fd2:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8000fd4:	4b59      	ldr	r3, [pc, #356]	@ (800113c <decodeGGA+0x47c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	4a58      	ldr	r2, [pc, #352]	@ (800113c <decodeGGA+0x47c>)
 8000fdc:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000fde:	f107 030c 	add.w	r3, r7, #12
 8000fe2:	220c      	movs	r2, #12
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f006 fa57 	bl	800749a <memset>
	i=0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8000ff0:	e013      	b.n	800101a <decodeGGA+0x35a>
	{
		buffer[i] = GGAbuffer[inx];
 8000ff2:	4b52      	ldr	r3, [pc, #328]	@ (800113c <decodeGGA+0x47c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	7819      	ldrb	r1, [r3, #0]
 8000ffe:	f107 020c 	add.w	r2, r7, #12
 8001002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001004:	4413      	add	r3, r2
 8001006:	460a      	mov	r2, r1
 8001008:	701a      	strb	r2, [r3, #0]
		i++;
 800100a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800100c:	3301      	adds	r3, #1
 800100e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 8001010:	4b4a      	ldr	r3, [pc, #296]	@ (800113c <decodeGGA+0x47c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	3301      	adds	r3, #1
 8001016:	4a49      	ldr	r2, [pc, #292]	@ (800113c <decodeGGA+0x47c>)
 8001018:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 800101a:	4b48      	ldr	r3, [pc, #288]	@ (800113c <decodeGGA+0x47c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4413      	add	r3, r2
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b2c      	cmp	r3, #44	@ 0x2c
 8001028:	d1e3      	bne.n	8000ff2 <decodeGGA+0x332>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff f88e 	bl	8000150 <strlen>
 8001034:	4603      	mov	r3, r0
 8001036:	2b05      	cmp	r3, #5
 8001038:	d801      	bhi.n	800103e <decodeGGA+0x37e>
 800103a:	2302      	movs	r3, #2
 800103c:	e24c      	b.n	80014d8 <decodeGGA+0x818>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	4618      	mov	r0, r3
 8001044:	f004 fc03 	bl	800584e <atoi>
 8001048:	4603      	mov	r3, r0
 800104a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int j = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 8001050:	e002      	b.n	8001058 <decodeGGA+0x398>
 8001052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001054:	3301      	adds	r3, #1
 8001056:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001058:	f107 020c 	add.w	r2, r7, #12
 800105c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800105e:	4413      	add	r3, r2
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b2e      	cmp	r3, #46	@ 0x2e
 8001064:	d1f5      	bne.n	8001052 <decodeGGA+0x392>
	j++;
 8001066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001068:	3301      	adds	r3, #1
 800106a:	62bb      	str	r3, [r7, #40]	@ 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff f86d 	bl	8000150 <strlen>
 8001076:	4602      	mov	r2, r0
 8001078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 800107e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001080:	f107 020c 	add.w	r2, r7, #12
 8001084:	4413      	add	r3, r2
 8001086:	4618      	mov	r0, r3
 8001088:	f004 fbe1 	bl	800584e <atoi>
 800108c:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 800108e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff f9b6 	bl	8000404 <__aeabi_i2d>
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	4b2e      	ldr	r3, [pc, #184]	@ (8001158 <decodeGGA+0x498>)
 800109e:	f7ff fb45 	bl	800072c <__aeabi_ddiv>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4690      	mov	r8, r2
 80010a8:	4699      	mov	r9, r3
 80010aa:	69f8      	ldr	r0, [r7, #28]
 80010ac:	f7ff f9aa 	bl	8000404 <__aeabi_i2d>
 80010b0:	4604      	mov	r4, r0
 80010b2:	460d      	mov	r5, r1
 80010b4:	6a3b      	ldr	r3, [r7, #32]
 80010b6:	3302      	adds	r3, #2
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff f9a3 	bl	8000404 <__aeabi_i2d>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	f04f 0000 	mov.w	r0, #0
 80010c6:	4925      	ldr	r1, [pc, #148]	@ (800115c <decodeGGA+0x49c>)
 80010c8:	f008 ff34 	bl	8009f34 <pow>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4620      	mov	r0, r4
 80010d2:	4629      	mov	r1, r5
 80010d4:	f7ff fb2a 	bl	800072c <__aeabi_ddiv>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4640      	mov	r0, r8
 80010de:	4649      	mov	r1, r9
 80010e0:	f7ff f844 	bl	800016c <__adddf3>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4610      	mov	r0, r2
 80010ea:	4619      	mov	r1, r3
 80010ec:	f7ff fcec 	bl	8000ac8 <__aeabi_d2f>
 80010f0:	4603      	mov	r3, r0
 80010f2:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	601a      	str	r2, [r3, #0]
	inx++;
 80010fa:	4b10      	ldr	r3, [pc, #64]	@ (800113c <decodeGGA+0x47c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	3301      	adds	r3, #1
 8001100:	4a0e      	ldr	r2, [pc, #56]	@ (800113c <decodeGGA+0x47c>)
 8001102:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8001104:	4b0d      	ldr	r3, [pc, #52]	@ (800113c <decodeGGA+0x47c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	781a      	ldrb	r2, [r3, #0]
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8001114:	4b09      	ldr	r3, [pc, #36]	@ (800113c <decodeGGA+0x47c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	3301      	adds	r3, #1
 800111a:	4a08      	ldr	r2, [pc, #32]	@ (800113c <decodeGGA+0x47c>)
 800111c:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 800111e:	4b07      	ldr	r3, [pc, #28]	@ (800113c <decodeGGA+0x47c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	3301      	adds	r3, #1
 8001124:	4a05      	ldr	r2, [pc, #20]	@ (800113c <decodeGGA+0x47c>)
 8001126:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	220c      	movs	r2, #12
 800112e:	2100      	movs	r1, #0
 8001130:	4618      	mov	r0, r3
 8001132:	f006 f9b2 	bl	800749a <memset>
	i=0;
 8001136:	2300      	movs	r3, #0
 8001138:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 800113a:	e025      	b.n	8001188 <decodeGGA+0x4c8>
 800113c:	2000021c 	.word	0x2000021c
 8001140:	68db8bad 	.word	0x68db8bad
 8001144:	20000000 	.word	0x20000000
 8001148:	51eb851f 	.word	0x51eb851f
 800114c:	20000220 	.word	0x20000220
 8001150:	20000224 	.word	0x20000224
 8001154:	2000022c 	.word	0x2000022c
 8001158:	40590000 	.word	0x40590000
 800115c:	40240000 	.word	0x40240000
	{
		buffer[i] = GGAbuffer[inx];
 8001160:	4bac      	ldr	r3, [pc, #688]	@ (8001414 <decodeGGA+0x754>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	7819      	ldrb	r1, [r3, #0]
 800116c:	f107 020c 	add.w	r2, r7, #12
 8001170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001172:	4413      	add	r3, r2
 8001174:	460a      	mov	r2, r1
 8001176:	701a      	strb	r2, [r3, #0]
		i++;
 8001178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800117a:	3301      	adds	r3, #1
 800117c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 800117e:	4ba5      	ldr	r3, [pc, #660]	@ (8001414 <decodeGGA+0x754>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	3301      	adds	r3, #1
 8001184:	4aa3      	ldr	r2, [pc, #652]	@ (8001414 <decodeGGA+0x754>)
 8001186:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001188:	4ba2      	ldr	r3, [pc, #648]	@ (8001414 <decodeGGA+0x754>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b2c      	cmp	r3, #44	@ 0x2c
 8001196:	d1e3      	bne.n	8001160 <decodeGGA+0x4a0>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	4618      	mov	r0, r3
 800119e:	f004 fb56 	bl	800584e <atoi>
 80011a2:	4603      	mov	r3, r0
 80011a4:	84fb      	strh	r3, [r7, #38]	@ 0x26
	j = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 80011aa:	e002      	b.n	80011b2 <decodeGGA+0x4f2>
 80011ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011ae:	3301      	adds	r3, #1
 80011b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011b2:	f107 020c 	add.w	r2, r7, #12
 80011b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011b8:	4413      	add	r3, r2
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80011be:	d1f5      	bne.n	80011ac <decodeGGA+0x4ec>
	j++;
 80011c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011c2:	3301      	adds	r3, #1
 80011c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7fe ffc0 	bl	8000150 <strlen>
 80011d0:	4602      	mov	r2, r0
 80011d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 80011d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011da:	f107 020c 	add.w	r2, r7, #12
 80011de:	4413      	add	r3, r2
 80011e0:	4618      	mov	r0, r3
 80011e2:	f004 fb34 	bl	800584e <atoi>
 80011e6:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 80011e8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f909 	bl	8000404 <__aeabi_i2d>
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	4b88      	ldr	r3, [pc, #544]	@ (8001418 <decodeGGA+0x758>)
 80011f8:	f7ff fa98 	bl	800072c <__aeabi_ddiv>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4690      	mov	r8, r2
 8001202:	4699      	mov	r9, r3
 8001204:	69f8      	ldr	r0, [r7, #28]
 8001206:	f7ff f8fd 	bl	8000404 <__aeabi_i2d>
 800120a:	4604      	mov	r4, r0
 800120c:	460d      	mov	r5, r1
 800120e:	6a3b      	ldr	r3, [r7, #32]
 8001210:	3302      	adds	r3, #2
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f8f6 	bl	8000404 <__aeabi_i2d>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	f04f 0000 	mov.w	r0, #0
 8001220:	497e      	ldr	r1, [pc, #504]	@ (800141c <decodeGGA+0x75c>)
 8001222:	f008 fe87 	bl	8009f34 <pow>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4620      	mov	r0, r4
 800122c:	4629      	mov	r1, r5
 800122e:	f7ff fa7d 	bl	800072c <__aeabi_ddiv>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4640      	mov	r0, r8
 8001238:	4649      	mov	r1, r9
 800123a:	f7fe ff97 	bl	800016c <__adddf3>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4610      	mov	r0, r2
 8001244:	4619      	mov	r1, r3
 8001246:	f7ff fc3f 	bl	8000ac8 <__aeabi_d2f>
 800124a:	4603      	mov	r3, r0
 800124c:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	609a      	str	r2, [r3, #8]
	inx++;
 8001254:	4b6f      	ldr	r3, [pc, #444]	@ (8001414 <decodeGGA+0x754>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	3301      	adds	r3, #1
 800125a:	4a6e      	ldr	r2, [pc, #440]	@ (8001414 <decodeGGA+0x754>)
 800125c:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 800125e:	4b6d      	ldr	r3, [pc, #436]	@ (8001414 <decodeGGA+0x754>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4413      	add	r3, r2
 8001268:	781a      	ldrb	r2, [r3, #0]
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
		inx++;   // ',' after E/W
 800126e:	4b69      	ldr	r3, [pc, #420]	@ (8001414 <decodeGGA+0x754>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	3301      	adds	r3, #1
 8001274:	4a67      	ldr	r2, [pc, #412]	@ (8001414 <decodeGGA+0x754>)
 8001276:	6013      	str	r3, [r2, #0]
		memset(buffer, '\0', 12);
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	220c      	movs	r2, #12
 800127e:	2100      	movs	r1, #0
 8001280:	4618      	mov	r0, r3
 8001282:	f006 f90a 	bl	800749a <memset>
		i=0;
 8001286:	2300      	movs	r3, #0
 8001288:	62fb      	str	r3, [r7, #44]	@ 0x2c
		while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 800128a:	e013      	b.n	80012b4 <decodeGGA+0x5f4>
		{
			buffer[i] = GGAbuffer[inx];
 800128c:	4b61      	ldr	r3, [pc, #388]	@ (8001414 <decodeGGA+0x754>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	7819      	ldrb	r1, [r3, #0]
 8001298:	f107 020c 	add.w	r2, r7, #12
 800129c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800129e:	4413      	add	r3, r2
 80012a0:	460a      	mov	r2, r1
 80012a2:	701a      	strb	r2, [r3, #0]
			i++;
 80012a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012a6:	3301      	adds	r3, #1
 80012a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			inx++;
 80012aa:	4b5a      	ldr	r3, [pc, #360]	@ (8001414 <decodeGGA+0x754>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	3301      	adds	r3, #1
 80012b0:	4a58      	ldr	r2, [pc, #352]	@ (8001414 <decodeGGA+0x754>)
 80012b2:	6013      	str	r3, [r2, #0]
		while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 80012b4:	4b57      	ldr	r3, [pc, #348]	@ (8001414 <decodeGGA+0x754>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b2c      	cmp	r3, #44	@ 0x2c
 80012c2:	d1e3      	bne.n	800128c <decodeGGA+0x5cc>
		}

        posFix = 1;
 80012c4:	4b56      	ldr	r3, [pc, #344]	@ (8001420 <decodeGGA+0x760>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	601a      	str	r2, [r3, #0]
        gga->fixIndicator = posFix;
 80012ca:	4b55      	ldr	r3, [pc, #340]	@ (8001420 <decodeGGA+0x760>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	62da      	str	r2, [r3, #44]	@ 0x2c


   // ',' after position fix;

	// number of gga->numofggagps->numofsattelites
	inx++;  // Reach the first number in the gga->numofggagps->numofsatellites
 80012d2:	4b50      	ldr	r3, [pc, #320]	@ (8001414 <decodeGGA+0x754>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	3301      	adds	r3, #1
 80012d8:	4a4e      	ldr	r2, [pc, #312]	@ (8001414 <decodeGGA+0x754>)
 80012da:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80012dc:	f107 030c 	add.w	r3, r7, #12
 80012e0:	220c      	movs	r2, #12
 80012e2:	2100      	movs	r1, #0
 80012e4:	4618      	mov	r0, r3
 80012e6:	f006 f8d8 	bl	800749a <memset>
	i=0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of gga->numofggagps->numofsatellites
 80012ee:	e013      	b.n	8001318 <decodeGGA+0x658>
	{
		buffer[i] = GGAbuffer[inx];
 80012f0:	4b48      	ldr	r3, [pc, #288]	@ (8001414 <decodeGGA+0x754>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	7819      	ldrb	r1, [r3, #0]
 80012fc:	f107 020c 	add.w	r2, r7, #12
 8001300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001302:	4413      	add	r3, r2
 8001304:	460a      	mov	r2, r1
 8001306:	701a      	strb	r2, [r3, #0]
		i++;
 8001308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800130a:	3301      	adds	r3, #1
 800130c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 800130e:	4b41      	ldr	r3, [pc, #260]	@ (8001414 <decodeGGA+0x754>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	3301      	adds	r3, #1
 8001314:	4a3f      	ldr	r2, [pc, #252]	@ (8001414 <decodeGGA+0x754>)
 8001316:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of gga->numofggagps->numofsatellites
 8001318:	4b3e      	ldr	r3, [pc, #248]	@ (8001414 <decodeGGA+0x754>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b2c      	cmp	r3, #44	@ 0x2c
 8001326:	d1e3      	bne.n	80012f0 <decodeGGA+0x630>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	4618      	mov	r0, r3
 800132e:	f004 fa8e 	bl	800584e <atoi>
 8001332:	4602      	mov	r2, r0
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	629a      	str	r2, [r3, #40]	@ 0x28



		inx++;
 8001338:	4b36      	ldr	r3, [pc, #216]	@ (8001414 <decodeGGA+0x754>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	3301      	adds	r3, #1
 800133e:	4a35      	ldr	r2, [pc, #212]	@ (8001414 <decodeGGA+0x754>)
 8001340:	6013      	str	r3, [r2, #0]
		memset(buffer, '\0', 12);
 8001342:	f107 030c 	add.w	r3, r7, #12
 8001346:	220c      	movs	r2, #12
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f006 f8a5 	bl	800749a <memset>
		i=0;
 8001350:	2300      	movs	r3, #0
 8001352:	62fb      	str	r3, [r7, #44]	@ 0x2c
		while (GGAbuffer[inx] != ',')
 8001354:	e013      	b.n	800137e <decodeGGA+0x6be>
		{
			buffer[i] = GGAbuffer[inx];
 8001356:	4b2f      	ldr	r3, [pc, #188]	@ (8001414 <decodeGGA+0x754>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4413      	add	r3, r2
 8001360:	7819      	ldrb	r1, [r3, #0]
 8001362:	f107 020c 	add.w	r2, r7, #12
 8001366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001368:	4413      	add	r3, r2
 800136a:	460a      	mov	r2, r1
 800136c:	701a      	strb	r2, [r3, #0]
			i++;
 800136e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001370:	3301      	adds	r3, #1
 8001372:	62fb      	str	r3, [r7, #44]	@ 0x2c
			inx++;
 8001374:	4b27      	ldr	r3, [pc, #156]	@ (8001414 <decodeGGA+0x754>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	3301      	adds	r3, #1
 800137a:	4a26      	ldr	r2, [pc, #152]	@ (8001414 <decodeGGA+0x754>)
 800137c:	6013      	str	r3, [r2, #0]
		while (GGAbuffer[inx] != ',')
 800137e:	4b25      	ldr	r3, [pc, #148]	@ (8001414 <decodeGGA+0x754>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4413      	add	r3, r2
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b2c      	cmp	r3, #44	@ 0x2c
 800138c:	d1e3      	bne.n	8001356 <decodeGGA+0x696>
		}
		gga->HDOP = (atof(buffer));   // convert the buffer to number and save into the structure
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	4618      	mov	r0, r3
 8001394:	f004 fa58 	bl	8005848 <atof>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4610      	mov	r0, r2
 800139e:	4619      	mov	r1, r3
 80013a0:	f7ff fb92 	bl	8000ac8 <__aeabi_d2f>
 80013a4:	4602      	mov	r2, r0
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	631a      	str	r2, [r3, #48]	@ 0x30

	/*************** Altitude calculation ********************/
	inx++;
 80013aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001414 <decodeGGA+0x754>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	3301      	adds	r3, #1
 80013b0:	4a18      	ldr	r2, [pc, #96]	@ (8001414 <decodeGGA+0x754>)
 80013b2:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80013b4:	f107 030c 	add.w	r3, r7, #12
 80013b8:	220c      	movs	r2, #12
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f006 f86c 	bl	800749a <memset>
	i=0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')
 80013c6:	e013      	b.n	80013f0 <decodeGGA+0x730>
	{
		buffer[i] = GGAbuffer[inx];
 80013c8:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <decodeGGA+0x754>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	7819      	ldrb	r1, [r3, #0]
 80013d4:	f107 020c 	add.w	r2, r7, #12
 80013d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013da:	4413      	add	r3, r2
 80013dc:	460a      	mov	r2, r1
 80013de:	701a      	strb	r2, [r3, #0]
		i++;
 80013e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013e2:	3301      	adds	r3, #1
 80013e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 80013e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001414 <decodeGGA+0x754>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	3301      	adds	r3, #1
 80013ec:	4a09      	ldr	r2, [pc, #36]	@ (8001414 <decodeGGA+0x754>)
 80013ee:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80013f0:	4b08      	ldr	r3, [pc, #32]	@ (8001414 <decodeGGA+0x754>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	461a      	mov	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b2c      	cmp	r3, #44	@ 0x2c
 80013fe:	d1e3      	bne.n	80013c8 <decodeGGA+0x708>
	}
	num = (atoi(buffer));
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	4618      	mov	r0, r3
 8001406:	f004 fa22 	bl	800584e <atoi>
 800140a:	4603      	mov	r3, r0
 800140c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	j = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;
 8001412:	e00a      	b.n	800142a <decodeGGA+0x76a>
 8001414:	2000021c 	.word	0x2000021c
 8001418:	40590000 	.word	0x40590000
 800141c:	40240000 	.word	0x40240000
 8001420:	20000228 	.word	0x20000228
 8001424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001426:	3301      	adds	r3, #1
 8001428:	62bb      	str	r3, [r7, #40]	@ 0x28
 800142a:	f107 020c 	add.w	r2, r7, #12
 800142e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001430:	4413      	add	r3, r2
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b2e      	cmp	r3, #46	@ 0x2e
 8001436:	d1f5      	bne.n	8001424 <decodeGGA+0x764>
	j++;
 8001438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800143a:	3301      	adds	r3, #1
 800143c:	62bb      	str	r3, [r7, #40]	@ 0x28
	declen = (strlen(buffer))-j;
 800143e:	f107 030c 	add.w	r3, r7, #12
 8001442:	4618      	mov	r0, r3
 8001444:	f7fe fe84 	bl	8000150 <strlen>
 8001448:	4602      	mov	r2, r0
 800144a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 8001450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001452:	f107 020c 	add.w	r2, r7, #12
 8001456:	4413      	add	r3, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f004 f9f8 	bl	800584e <atoi>
 800145e:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 8001460:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001464:	4618      	mov	r0, r3
 8001466:	f7fe ffcd 	bl	8000404 <__aeabi_i2d>
 800146a:	4604      	mov	r4, r0
 800146c:	460d      	mov	r5, r1
 800146e:	69f8      	ldr	r0, [r7, #28]
 8001470:	f7fe ffc8 	bl	8000404 <__aeabi_i2d>
 8001474:	4680      	mov	r8, r0
 8001476:	4689      	mov	r9, r1
 8001478:	6a38      	ldr	r0, [r7, #32]
 800147a:	f7fe ffc3 	bl	8000404 <__aeabi_i2d>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	f04f 0000 	mov.w	r0, #0
 8001486:	4917      	ldr	r1, [pc, #92]	@ (80014e4 <decodeGGA+0x824>)
 8001488:	f008 fd54 	bl	8009f34 <pow>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4640      	mov	r0, r8
 8001492:	4649      	mov	r1, r9
 8001494:	f7ff f94a 	bl	800072c <__aeabi_ddiv>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4620      	mov	r0, r4
 800149e:	4629      	mov	r1, r5
 80014a0:	f7fe fe64 	bl	800016c <__adddf3>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4610      	mov	r0, r2
 80014aa:	4619      	mov	r1, r3
 80014ac:	f7ff fb0c 	bl	8000ac8 <__aeabi_d2f>
 80014b0:	4603      	mov	r3, r0
 80014b2:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	621a      	str	r2, [r3, #32]

	inx++;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <decodeGGA+0x828>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	3301      	adds	r3, #1
 80014c0:	4a09      	ldr	r2, [pc, #36]	@ (80014e8 <decodeGGA+0x828>)
 80014c2:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 80014c4:	4b08      	ldr	r3, [pc, #32]	@ (80014e8 <decodeGGA+0x828>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	461a      	mov	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	781a      	ldrb	r2, [r3, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	return 0;
 80014d6:	2300      	movs	r3, #0

}
 80014d8:	4618      	mov	r0, r3
 80014da:	3730      	adds	r7, #48	@ 0x30
 80014dc:	46bd      	mov	sp, r7
 80014de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014e2:	bf00      	nop
 80014e4:	40240000 	.word	0x40240000
 80014e8:	2000021c 	.word	0x2000021c

080014ec <accurateSignal>:

int accurateSignal(GGASTRUCT *ggagps){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

	if(ggagps->fixIndicator == 0)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <accurateSignal+0x14>
	{
		return 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	e3c9      	b.n	8001c94 <accurateSignal+0x7a8>
	}
	if(ggagps->fixIndicator != 0)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001504:	2b00      	cmp	r3, #0
 8001506:	f000 83c5 	beq.w	8001c94 <accurateSignal+0x7a8>
	{if((ggagps->numofsat>=3)&&(ggagps->numofsat<5))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800150e:	2b02      	cmp	r3, #2
 8001510:	f340 809a 	ble.w	8001648 <accurateSignal+0x15c>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001518:	2b04      	cmp	r3, #4
 800151a:	f300 8095 	bgt.w	8001648 <accurateSignal+0x15c>
    {
        if(ggagps->HDOP > 7.0) return 1;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	4999      	ldr	r1, [pc, #612]	@ (8001788 <accurateSignal+0x29c>)
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fb8b 	bl	8000c40 <__aeabi_fcmpgt>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <accurateSignal+0x48>
 8001530:	2301      	movs	r3, #1
 8001532:	e3af      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP <= 7.0)&&(ggagps->HDOP >= 6.0)) return 1;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001538:	4993      	ldr	r1, [pc, #588]	@ (8001788 <accurateSignal+0x29c>)
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fb6c 	bl	8000c18 <__aeabi_fcmple>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00a      	beq.n	800155c <accurateSignal+0x70>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	4990      	ldr	r1, [pc, #576]	@ (800178c <accurateSignal+0x2a0>)
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fb6d 	bl	8000c2c <__aeabi_fcmpge>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <accurateSignal+0x70>
 8001558:	2301      	movs	r3, #1
 800155a:	e39b      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 6.0)&&(ggagps->HDOP >= 5.0)) return 1;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001560:	498a      	ldr	r1, [pc, #552]	@ (800178c <accurateSignal+0x2a0>)
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fb4e 	bl	8000c04 <__aeabi_fcmplt>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00a      	beq.n	8001584 <accurateSignal+0x98>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	4987      	ldr	r1, [pc, #540]	@ (8001790 <accurateSignal+0x2a4>)
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fb59 	bl	8000c2c <__aeabi_fcmpge>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <accurateSignal+0x98>
 8001580:	2301      	movs	r3, #1
 8001582:	e387      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 5.0)&&(ggagps->HDOP >= 4.0)) return 1;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001588:	4981      	ldr	r1, [pc, #516]	@ (8001790 <accurateSignal+0x2a4>)
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fb3a 	bl	8000c04 <__aeabi_fcmplt>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d00b      	beq.n	80015ae <accurateSignal+0xc2>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159a:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fb44 	bl	8000c2c <__aeabi_fcmpge>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <accurateSignal+0xc2>
 80015aa:	2301      	movs	r3, #1
 80015ac:	e372      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 4.0)&&(ggagps->HDOP >= 3.0)) return 1;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fb24 	bl	8000c04 <__aeabi_fcmplt>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d00a      	beq.n	80015d8 <accurateSignal+0xec>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	4973      	ldr	r1, [pc, #460]	@ (8001794 <accurateSignal+0x2a8>)
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fb2f 	bl	8000c2c <__aeabi_fcmpge>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <accurateSignal+0xec>
 80015d4:	2301      	movs	r3, #1
 80015d6:	e35d      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 3.0)&&(ggagps->HDOP >= 2.0)) return 1;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015dc:	496d      	ldr	r1, [pc, #436]	@ (8001794 <accurateSignal+0x2a8>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fb10 	bl	8000c04 <__aeabi_fcmplt>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00b      	beq.n	8001602 <accurateSignal+0x116>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fb1a 	bl	8000c2c <__aeabi_fcmpge>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <accurateSignal+0x116>
 80015fe:	2301      	movs	r3, #1
 8001600:	e348      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 2.0)&&(ggagps->HDOP >= 1.0)) return 2;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fafa 	bl	8000c04 <__aeabi_fcmplt>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00b      	beq.n	800162e <accurateSignal+0x142>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fb04 	bl	8000c2c <__aeabi_fcmpge>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <accurateSignal+0x142>
 800162a:	2302      	movs	r3, #2
 800162c:	e332      	b.n	8001c94 <accurateSignal+0x7a8>
        else if(ggagps->HDOP < 1.0) return 2;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fae4 	bl	8000c04 <__aeabi_fcmplt>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d100      	bne.n	8001644 <accurateSignal+0x158>
        if(ggagps->HDOP > 7.0) return 1;
 8001642:	e327      	b.n	8001c94 <accurateSignal+0x7a8>
        else if(ggagps->HDOP < 1.0) return 2;
 8001644:	2302      	movs	r3, #2
 8001646:	e325      	b.n	8001c94 <accurateSignal+0x7a8>
    }
    else if((ggagps->numofsat>=5)&&(ggagps->numofsat<7))
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800164c:	2b04      	cmp	r3, #4
 800164e:	f340 80a3 	ble.w	8001798 <accurateSignal+0x2ac>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001656:	2b06      	cmp	r3, #6
 8001658:	f300 809e 	bgt.w	8001798 <accurateSignal+0x2ac>
    {
        if(ggagps->HDOP > 7.0) return 2;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001660:	4949      	ldr	r1, [pc, #292]	@ (8001788 <accurateSignal+0x29c>)
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff faec 	bl	8000c40 <__aeabi_fcmpgt>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <accurateSignal+0x186>
 800166e:	2302      	movs	r3, #2
 8001670:	e310      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP <= 7.0)&&(ggagps->HDOP >= 6.0)) return 2;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	4944      	ldr	r1, [pc, #272]	@ (8001788 <accurateSignal+0x29c>)
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff facd 	bl	8000c18 <__aeabi_fcmple>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00a      	beq.n	800169a <accurateSignal+0x1ae>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001688:	4940      	ldr	r1, [pc, #256]	@ (800178c <accurateSignal+0x2a0>)
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff face 	bl	8000c2c <__aeabi_fcmpge>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <accurateSignal+0x1ae>
 8001696:	2302      	movs	r3, #2
 8001698:	e2fc      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 6.0)&&(ggagps->HDOP >= 5.0)) return 2;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	493b      	ldr	r1, [pc, #236]	@ (800178c <accurateSignal+0x2a0>)
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff faaf 	bl	8000c04 <__aeabi_fcmplt>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d00a      	beq.n	80016c2 <accurateSignal+0x1d6>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b0:	4937      	ldr	r1, [pc, #220]	@ (8001790 <accurateSignal+0x2a4>)
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff faba 	bl	8000c2c <__aeabi_fcmpge>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <accurateSignal+0x1d6>
 80016be:	2302      	movs	r3, #2
 80016c0:	e2e8      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 5.0)&&(ggagps->HDOP >= 4.0)) return 2;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c6:	4932      	ldr	r1, [pc, #200]	@ (8001790 <accurateSignal+0x2a4>)
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fa9b 	bl	8000c04 <__aeabi_fcmplt>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d00b      	beq.n	80016ec <accurateSignal+0x200>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d8:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff faa5 	bl	8000c2c <__aeabi_fcmpge>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <accurateSignal+0x200>
 80016e8:	2302      	movs	r3, #2
 80016ea:	e2d3      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 4.0)&&(ggagps->HDOP >= 3.0)) return 2;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f0:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fa85 	bl	8000c04 <__aeabi_fcmplt>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00a      	beq.n	8001716 <accurateSignal+0x22a>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001704:	4923      	ldr	r1, [pc, #140]	@ (8001794 <accurateSignal+0x2a8>)
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fa90 	bl	8000c2c <__aeabi_fcmpge>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <accurateSignal+0x22a>
 8001712:	2302      	movs	r3, #2
 8001714:	e2be      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 3.0)&&(ggagps->HDOP >= 2.0)) return 2;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	491e      	ldr	r1, [pc, #120]	@ (8001794 <accurateSignal+0x2a8>)
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fa71 	bl	8000c04 <__aeabi_fcmplt>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d00b      	beq.n	8001740 <accurateSignal+0x254>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fa7b 	bl	8000c2c <__aeabi_fcmpge>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <accurateSignal+0x254>
 800173c:	2302      	movs	r3, #2
 800173e:	e2a9      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 2.0)&&(ggagps->HDOP >= 1.0)) return 3;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001744:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fa5b 	bl	8000c04 <__aeabi_fcmplt>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00b      	beq.n	800176c <accurateSignal+0x280>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001758:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fa65 	bl	8000c2c <__aeabi_fcmpge>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <accurateSignal+0x280>
 8001768:	2303      	movs	r3, #3
 800176a:	e293      	b.n	8001c94 <accurateSignal+0x7a8>
        else if(ggagps->HDOP < 1.0) return 3;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001770:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fa45 	bl	8000c04 <__aeabi_fcmplt>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d100      	bne.n	8001782 <accurateSignal+0x296>
        if(ggagps->HDOP > 7.0) return 2;
 8001780:	e288      	b.n	8001c94 <accurateSignal+0x7a8>
        else if(ggagps->HDOP < 1.0) return 3;
 8001782:	2303      	movs	r3, #3
 8001784:	e286      	b.n	8001c94 <accurateSignal+0x7a8>
 8001786:	bf00      	nop
 8001788:	40e00000 	.word	0x40e00000
 800178c:	40c00000 	.word	0x40c00000
 8001790:	40a00000 	.word	0x40a00000
 8001794:	40400000 	.word	0x40400000
    }

    else if((ggagps->numofsat>=7)&&(ggagps->numofsat<9))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800179c:	2b06      	cmp	r3, #6
 800179e:	f340 809a 	ble.w	80018d6 <accurateSignal+0x3ea>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a6:	2b08      	cmp	r3, #8
 80017a8:	f300 8095 	bgt.w	80018d6 <accurateSignal+0x3ea>
    {
        if(ggagps->HDOP > 7.0) return 3;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b0:	4998      	ldr	r1, [pc, #608]	@ (8001a14 <accurateSignal+0x528>)
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fa44 	bl	8000c40 <__aeabi_fcmpgt>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <accurateSignal+0x2d6>
 80017be:	2303      	movs	r3, #3
 80017c0:	e268      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP <= 7.0)&&(ggagps->HDOP >= 6.0)) return 3;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	4993      	ldr	r1, [pc, #588]	@ (8001a14 <accurateSignal+0x528>)
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fa25 	bl	8000c18 <__aeabi_fcmple>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d00a      	beq.n	80017ea <accurateSignal+0x2fe>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d8:	498f      	ldr	r1, [pc, #572]	@ (8001a18 <accurateSignal+0x52c>)
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fa26 	bl	8000c2c <__aeabi_fcmpge>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <accurateSignal+0x2fe>
 80017e6:	2303      	movs	r3, #3
 80017e8:	e254      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 6.0)&&(ggagps->HDOP >= 5.0)) return 3;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	498a      	ldr	r1, [pc, #552]	@ (8001a18 <accurateSignal+0x52c>)
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fa07 	bl	8000c04 <__aeabi_fcmplt>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d00a      	beq.n	8001812 <accurateSignal+0x326>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001800:	4986      	ldr	r1, [pc, #536]	@ (8001a1c <accurateSignal+0x530>)
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fa12 	bl	8000c2c <__aeabi_fcmpge>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <accurateSignal+0x326>
 800180e:	2303      	movs	r3, #3
 8001810:	e240      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 5.0)&&(ggagps->HDOP >= 4.0)) return 3;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	4981      	ldr	r1, [pc, #516]	@ (8001a1c <accurateSignal+0x530>)
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff f9f3 	bl	8000c04 <__aeabi_fcmplt>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d00b      	beq.n	800183c <accurateSignal+0x350>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001828:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff f9fd 	bl	8000c2c <__aeabi_fcmpge>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <accurateSignal+0x350>
 8001838:	2303      	movs	r3, #3
 800183a:	e22b      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 4.0)&&(ggagps->HDOP >= 3.0)) return 3;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001840:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff f9dd 	bl	8000c04 <__aeabi_fcmplt>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d00a      	beq.n	8001866 <accurateSignal+0x37a>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001854:	4972      	ldr	r1, [pc, #456]	@ (8001a20 <accurateSignal+0x534>)
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff f9e8 	bl	8000c2c <__aeabi_fcmpge>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <accurateSignal+0x37a>
 8001862:	2303      	movs	r3, #3
 8001864:	e216      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 3.0)&&(ggagps->HDOP >= 2.0)) return 3;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	496d      	ldr	r1, [pc, #436]	@ (8001a20 <accurateSignal+0x534>)
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff f9c9 	bl	8000c04 <__aeabi_fcmplt>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00b      	beq.n	8001890 <accurateSignal+0x3a4>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff f9d3 	bl	8000c2c <__aeabi_fcmpge>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <accurateSignal+0x3a4>
 800188c:	2303      	movs	r3, #3
 800188e:	e201      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 2.0)&&(ggagps->HDOP >= 1.0)) return 4;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001894:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff f9b3 	bl	8000c04 <__aeabi_fcmplt>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00b      	beq.n	80018bc <accurateSignal+0x3d0>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff f9bd 	bl	8000c2c <__aeabi_fcmpge>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <accurateSignal+0x3d0>
 80018b8:	2304      	movs	r3, #4
 80018ba:	e1eb      	b.n	8001c94 <accurateSignal+0x7a8>
        else if(ggagps->HDOP < 1.0) return 4;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff f99d 	bl	8000c04 <__aeabi_fcmplt>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d100      	bne.n	80018d2 <accurateSignal+0x3e6>
        if(ggagps->HDOP > 7.0) return 3;
 80018d0:	e1e0      	b.n	8001c94 <accurateSignal+0x7a8>
        else if(ggagps->HDOP < 1.0) return 4;
 80018d2:	2304      	movs	r3, #4
 80018d4:	e1de      	b.n	8001c94 <accurateSignal+0x7a8>
    }

    else if((ggagps->numofsat>=9)&&(ggagps->numofsat<11))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018da:	2b08      	cmp	r3, #8
 80018dc:	f340 80a2 	ble.w	8001a24 <accurateSignal+0x538>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e4:	2b0a      	cmp	r3, #10
 80018e6:	f300 809d 	bgt.w	8001a24 <accurateSignal+0x538>
    {
        if(ggagps->HDOP > 7.0) return 4;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	4949      	ldr	r1, [pc, #292]	@ (8001a14 <accurateSignal+0x528>)
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff f9a5 	bl	8000c40 <__aeabi_fcmpgt>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <accurateSignal+0x414>
 80018fc:	2304      	movs	r3, #4
 80018fe:	e1c9      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP <= 7.0)&&(ggagps->HDOP >= 6.0)) return 4;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001904:	4943      	ldr	r1, [pc, #268]	@ (8001a14 <accurateSignal+0x528>)
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff f986 	bl	8000c18 <__aeabi_fcmple>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00a      	beq.n	8001928 <accurateSignal+0x43c>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	4940      	ldr	r1, [pc, #256]	@ (8001a18 <accurateSignal+0x52c>)
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff f987 	bl	8000c2c <__aeabi_fcmpge>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <accurateSignal+0x43c>
 8001924:	2304      	movs	r3, #4
 8001926:	e1b5      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 6.0)&&(ggagps->HDOP >= 5.0)) return 4;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192c:	493a      	ldr	r1, [pc, #232]	@ (8001a18 <accurateSignal+0x52c>)
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff f968 	bl	8000c04 <__aeabi_fcmplt>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00a      	beq.n	8001950 <accurateSignal+0x464>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	4937      	ldr	r1, [pc, #220]	@ (8001a1c <accurateSignal+0x530>)
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff f973 	bl	8000c2c <__aeabi_fcmpge>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <accurateSignal+0x464>
 800194c:	2304      	movs	r3, #4
 800194e:	e1a1      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 5.0)&&(ggagps->HDOP >= 4.0)) return 4;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001954:	4931      	ldr	r1, [pc, #196]	@ (8001a1c <accurateSignal+0x530>)
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff f954 	bl	8000c04 <__aeabi_fcmplt>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00b      	beq.n	800197a <accurateSignal+0x48e>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff f95e 	bl	8000c2c <__aeabi_fcmpge>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <accurateSignal+0x48e>
 8001976:	2304      	movs	r3, #4
 8001978:	e18c      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 4.0)&&(ggagps->HDOP >= 3.0)) return 4;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff f93e 	bl	8000c04 <__aeabi_fcmplt>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d00a      	beq.n	80019a4 <accurateSignal+0x4b8>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	4923      	ldr	r1, [pc, #140]	@ (8001a20 <accurateSignal+0x534>)
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff f949 	bl	8000c2c <__aeabi_fcmpge>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <accurateSignal+0x4b8>
 80019a0:	2304      	movs	r3, #4
 80019a2:	e177      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 3.0)&&(ggagps->HDOP >= 2.0)) return 4;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a8:	491d      	ldr	r1, [pc, #116]	@ (8001a20 <accurateSignal+0x534>)
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff f92a 	bl	8000c04 <__aeabi_fcmplt>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00b      	beq.n	80019ce <accurateSignal+0x4e2>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff f934 	bl	8000c2c <__aeabi_fcmpge>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <accurateSignal+0x4e2>
 80019ca:	2304      	movs	r3, #4
 80019cc:	e162      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 2.0)&&(ggagps->HDOP >= 1.0)) return 5;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff f914 	bl	8000c04 <__aeabi_fcmplt>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00b      	beq.n	80019fa <accurateSignal+0x50e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff f91e 	bl	8000c2c <__aeabi_fcmpge>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <accurateSignal+0x50e>
 80019f6:	2305      	movs	r3, #5
 80019f8:	e14c      	b.n	8001c94 <accurateSignal+0x7a8>
        else if(ggagps->HDOP < 1.0) return 5;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff f8fe 	bl	8000c04 <__aeabi_fcmplt>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d100      	bne.n	8001a10 <accurateSignal+0x524>
        if(ggagps->HDOP > 7.0) return 4;
 8001a0e:	e141      	b.n	8001c94 <accurateSignal+0x7a8>
        else if(ggagps->HDOP < 1.0) return 5;
 8001a10:	2305      	movs	r3, #5
 8001a12:	e13f      	b.n	8001c94 <accurateSignal+0x7a8>
 8001a14:	40e00000 	.word	0x40e00000
 8001a18:	40c00000 	.word	0x40c00000
 8001a1c:	40a00000 	.word	0x40a00000
 8001a20:	40400000 	.word	0x40400000
    }

    else if((ggagps->numofsat>=11)&&(ggagps->numofsat<13))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a28:	2b0a      	cmp	r3, #10
 8001a2a:	f340 809a 	ble.w	8001b62 <accurateSignal+0x676>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a32:	2b0c      	cmp	r3, #12
 8001a34:	f300 8095 	bgt.w	8001b62 <accurateSignal+0x676>
    {
        if(ggagps->HDOP > 7.0) return 2;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3c:	4997      	ldr	r1, [pc, #604]	@ (8001c9c <accurateSignal+0x7b0>)
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff f8fe 	bl	8000c40 <__aeabi_fcmpgt>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <accurateSignal+0x562>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e122      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP <= 7.0)&&(ggagps->HDOP >= 6.0)) return 5;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	4992      	ldr	r1, [pc, #584]	@ (8001c9c <accurateSignal+0x7b0>)
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff f8df 	bl	8000c18 <__aeabi_fcmple>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00a      	beq.n	8001a76 <accurateSignal+0x58a>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a64:	498e      	ldr	r1, [pc, #568]	@ (8001ca0 <accurateSignal+0x7b4>)
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff f8e0 	bl	8000c2c <__aeabi_fcmpge>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <accurateSignal+0x58a>
 8001a72:	2305      	movs	r3, #5
 8001a74:	e10e      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 6.0)&&(ggagps->HDOP >= 5.0)) return 5;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	4989      	ldr	r1, [pc, #548]	@ (8001ca0 <accurateSignal+0x7b4>)
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff f8c1 	bl	8000c04 <__aeabi_fcmplt>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00a      	beq.n	8001a9e <accurateSignal+0x5b2>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8c:	4985      	ldr	r1, [pc, #532]	@ (8001ca4 <accurateSignal+0x7b8>)
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff f8cc 	bl	8000c2c <__aeabi_fcmpge>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <accurateSignal+0x5b2>
 8001a9a:	2305      	movs	r3, #5
 8001a9c:	e0fa      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 5.0)&&(ggagps->HDOP >= 4.0)) return 5;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	4980      	ldr	r1, [pc, #512]	@ (8001ca4 <accurateSignal+0x7b8>)
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff f8ad 	bl	8000c04 <__aeabi_fcmplt>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d00b      	beq.n	8001ac8 <accurateSignal+0x5dc>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab4:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff f8b7 	bl	8000c2c <__aeabi_fcmpge>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <accurateSignal+0x5dc>
 8001ac4:	2305      	movs	r3, #5
 8001ac6:	e0e5      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 4.0)&&(ggagps->HDOP >= 3.0)) return 5;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001acc:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff f897 	bl	8000c04 <__aeabi_fcmplt>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00a      	beq.n	8001af2 <accurateSignal+0x606>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae0:	4971      	ldr	r1, [pc, #452]	@ (8001ca8 <accurateSignal+0x7bc>)
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff f8a2 	bl	8000c2c <__aeabi_fcmpge>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <accurateSignal+0x606>
 8001aee:	2305      	movs	r3, #5
 8001af0:	e0d0      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 3.0)&&(ggagps->HDOP >= 2.0)) return 5;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	496c      	ldr	r1, [pc, #432]	@ (8001ca8 <accurateSignal+0x7bc>)
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff f883 	bl	8000c04 <__aeabi_fcmplt>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00b      	beq.n	8001b1c <accurateSignal+0x630>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b08:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff f88d 	bl	8000c2c <__aeabi_fcmpge>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <accurateSignal+0x630>
 8001b18:	2305      	movs	r3, #5
 8001b1a:	e0bb      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 2.0)&&(ggagps->HDOP >= 1.0)) return 6;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b20:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff f86d 	bl	8000c04 <__aeabi_fcmplt>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00b      	beq.n	8001b48 <accurateSignal+0x65c>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b34:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff f877 	bl	8000c2c <__aeabi_fcmpge>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <accurateSignal+0x65c>
 8001b44:	2306      	movs	r3, #6
 8001b46:	e0a5      	b.n	8001c94 <accurateSignal+0x7a8>
        else if(ggagps->HDOP < 1.0) return 6;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff f857 	bl	8000c04 <__aeabi_fcmplt>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d100      	bne.n	8001b5e <accurateSignal+0x672>
        if(ggagps->HDOP > 7.0) return 2;
 8001b5c:	e09a      	b.n	8001c94 <accurateSignal+0x7a8>
        else if(ggagps->HDOP < 1.0) return 6;
 8001b5e:	2306      	movs	r3, #6
 8001b60:	e098      	b.n	8001c94 <accurateSignal+0x7a8>
    }

    else if(ggagps->numofsat>= 13)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b66:	2b0c      	cmp	r3, #12
 8001b68:	f340 8094 	ble.w	8001c94 <accurateSignal+0x7a8>
    {
        if(ggagps->HDOP > 7.0) return 6;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b70:	494a      	ldr	r1, [pc, #296]	@ (8001c9c <accurateSignal+0x7b0>)
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff f864 	bl	8000c40 <__aeabi_fcmpgt>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <accurateSignal+0x696>
 8001b7e:	2306      	movs	r3, #6
 8001b80:	e088      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP <= 7.0)&&(ggagps->HDOP >= 6.0)) return 6;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b86:	4945      	ldr	r1, [pc, #276]	@ (8001c9c <accurateSignal+0x7b0>)
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff f845 	bl	8000c18 <__aeabi_fcmple>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00a      	beq.n	8001baa <accurateSignal+0x6be>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b98:	4941      	ldr	r1, [pc, #260]	@ (8001ca0 <accurateSignal+0x7b4>)
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff f846 	bl	8000c2c <__aeabi_fcmpge>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <accurateSignal+0x6be>
 8001ba6:	2306      	movs	r3, #6
 8001ba8:	e074      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 6.0)&&(ggagps->HDOP >= 5.0)) return 6;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	493c      	ldr	r1, [pc, #240]	@ (8001ca0 <accurateSignal+0x7b4>)
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff f827 	bl	8000c04 <__aeabi_fcmplt>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00a      	beq.n	8001bd2 <accurateSignal+0x6e6>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc0:	4938      	ldr	r1, [pc, #224]	@ (8001ca4 <accurateSignal+0x7b8>)
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff f832 	bl	8000c2c <__aeabi_fcmpge>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <accurateSignal+0x6e6>
 8001bce:	2306      	movs	r3, #6
 8001bd0:	e060      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 5.0)&&(ggagps->HDOP >= 4.0)) return 6;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	4933      	ldr	r1, [pc, #204]	@ (8001ca4 <accurateSignal+0x7b8>)
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff f813 	bl	8000c04 <__aeabi_fcmplt>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d00b      	beq.n	8001bfc <accurateSignal+0x710>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be8:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff f81d 	bl	8000c2c <__aeabi_fcmpge>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <accurateSignal+0x710>
 8001bf8:	2306      	movs	r3, #6
 8001bfa:	e04b      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 4.0)&&(ggagps->HDOP >= 3.0)) return 7;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c00:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7fe fffd 	bl	8000c04 <__aeabi_fcmplt>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00a      	beq.n	8001c26 <accurateSignal+0x73a>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c14:	4924      	ldr	r1, [pc, #144]	@ (8001ca8 <accurateSignal+0x7bc>)
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff f808 	bl	8000c2c <__aeabi_fcmpge>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <accurateSignal+0x73a>
 8001c22:	2307      	movs	r3, #7
 8001c24:	e036      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 3.0)&&(ggagps->HDOP >= 2.0)) return 7;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	491f      	ldr	r1, [pc, #124]	@ (8001ca8 <accurateSignal+0x7bc>)
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe ffe9 	bl	8000c04 <__aeabi_fcmplt>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d00b      	beq.n	8001c50 <accurateSignal+0x764>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fff3 	bl	8000c2c <__aeabi_fcmpge>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <accurateSignal+0x764>
 8001c4c:	2307      	movs	r3, #7
 8001c4e:	e021      	b.n	8001c94 <accurateSignal+0x7a8>
        else if((ggagps->HDOP < 2.0)&&(ggagps->HDOP >= 1.0)) return 7;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c54:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe ffd3 	bl	8000c04 <__aeabi_fcmplt>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00b      	beq.n	8001c7c <accurateSignal+0x790>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c68:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe ffdd 	bl	8000c2c <__aeabi_fcmpge>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <accurateSignal+0x790>
 8001c78:	2307      	movs	r3, #7
 8001c7a:	e00b      	b.n	8001c94 <accurateSignal+0x7a8>
        else if(ggagps->HDOP < 1.0) return 8;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c80:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe ffbd 	bl	8000c04 <__aeabi_fcmplt>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <accurateSignal+0x7a8>
 8001c90:	2308      	movs	r3, #8
 8001c92:	e7ff      	b.n	8001c94 <accurateSignal+0x7a8>
    }
	}
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40e00000 	.word	0x40e00000
 8001ca0:	40c00000 	.word	0x40c00000
 8001ca4:	40a00000 	.word	0x40a00000
 8001ca8:	40400000 	.word	0x40400000

08001cac <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af02      	add	r7, sp, #8
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	f023 030f 	bic.w	r3, r3, #15
 8001cbc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
 8001cc6:	f043 030c 	orr.w	r3, r3, #12
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
 8001cd0:	f043 0308 	orr.w	r3, r3, #8
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001cd8:	7bbb      	ldrb	r3, [r7, #14]
 8001cda:	f043 030c 	orr.w	r3, r3, #12
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001ce2:	7bbb      	ldrb	r3, [r7, #14]
 8001ce4:	f043 0308 	orr.w	r3, r3, #8
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001cec:	f107 0208 	add.w	r2, r7, #8
 8001cf0:	2364      	movs	r3, #100	@ 0x64
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	2304      	movs	r3, #4
 8001cf6:	214e      	movs	r1, #78	@ 0x4e
 8001cf8:	4803      	ldr	r0, [pc, #12]	@ (8001d08 <lcd_send_cmd+0x5c>)
 8001cfa:	f001 feeb 	bl	8003ad4 <HAL_I2C_Master_Transmit>
}
 8001cfe:	bf00      	nop
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000bbc 	.word	0x20000bbc

08001d0c <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001d10:	2032      	movs	r0, #50	@ 0x32
 8001d12:	f001 fa33 	bl	800317c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001d16:	2030      	movs	r0, #48	@ 0x30
 8001d18:	f7ff ffc8 	bl	8001cac <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001d1c:	2005      	movs	r0, #5
 8001d1e:	f001 fa2d 	bl	800317c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001d22:	2030      	movs	r0, #48	@ 0x30
 8001d24:	f7ff ffc2 	bl	8001cac <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001d28:	2001      	movs	r0, #1
 8001d2a:	f001 fa27 	bl	800317c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001d2e:	2030      	movs	r0, #48	@ 0x30
 8001d30:	f7ff ffbc 	bl	8001cac <lcd_send_cmd>
	HAL_Delay(10);
 8001d34:	200a      	movs	r0, #10
 8001d36:	f001 fa21 	bl	800317c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001d3a:	2020      	movs	r0, #32
 8001d3c:	f7ff ffb6 	bl	8001cac <lcd_send_cmd>
	HAL_Delay(10);
 8001d40:	200a      	movs	r0, #10
 8001d42:	f001 fa1b 	bl	800317c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001d46:	2028      	movs	r0, #40	@ 0x28
 8001d48:	f7ff ffb0 	bl	8001cac <lcd_send_cmd>
	HAL_Delay(1);
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	f001 fa15 	bl	800317c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001d52:	2008      	movs	r0, #8
 8001d54:	f7ff ffaa 	bl	8001cac <lcd_send_cmd>
	HAL_Delay(1);
 8001d58:	2001      	movs	r0, #1
 8001d5a:	f001 fa0f 	bl	800317c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001d5e:	2001      	movs	r0, #1
 8001d60:	f7ff ffa4 	bl	8001cac <lcd_send_cmd>
	HAL_Delay(1);
 8001d64:	2001      	movs	r0, #1
 8001d66:	f001 fa09 	bl	800317c <HAL_Delay>
	HAL_Delay(1);
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	f001 fa06 	bl	800317c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001d70:	2006      	movs	r0, #6
 8001d72:	f7ff ff9b 	bl	8001cac <lcd_send_cmd>
	HAL_Delay(1);
 8001d76:	2001      	movs	r0, #1
 8001d78:	f001 fa00 	bl	800317c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001d7c:	200c      	movs	r0, #12
 8001d7e:	f7ff ff95 	bl	8001cac <lcd_send_cmd>
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <sendRequestToEsp32>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void sendRequestToEsp32(UART_HandleTypeDef *huart, char deviceId[], char longitudeVal[], char latitudeVal[], uint8_t accuracyVal) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b0ac      	sub	sp, #176	@ 0xb0
 8001d8c:	af02      	add	r7, sp, #8
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
 8001d94:	603b      	str	r3, [r7, #0]
	char requestBody[150] = { 0 };
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	f107 0314 	add.w	r3, r7, #20
 8001d9e:	2292      	movs	r2, #146	@ 0x92
 8001da0:	2100      	movs	r1, #0
 8001da2:	4618      	mov	r0, r3
 8001da4:	f005 fb79 	bl	800749a <memset>
	char accuracyToChar = accuracyVal + '0';
 8001da8:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 8001dac:	3330      	adds	r3, #48	@ 0x30
 8001dae:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	if (longitudeVal[0] != 0 && latitudeVal[0] != 0 && accuracyVal > 0) {
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d013      	beq.n	8001de2 <sendRequestToEsp32+0x5a>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00f      	beq.n	8001de2 <sendRequestToEsp32+0x5a>
 8001dc2:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00b      	beq.n	8001de2 <sendRequestToEsp32+0x5a>
		sprintf(requestBody,
 8001dca:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 8001dce:	f107 0010 	add.w	r0, r7, #16
 8001dd2:	9301      	str	r3, [sp, #4]
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	4906      	ldr	r1, [pc, #24]	@ (8001df8 <sendRequestToEsp32+0x70>)
 8001dde:	f005 faf9 	bl	80073d4 <siprintf>
				"{\"deviceId\": \"%s\", \"longitude\": \"%s\", \"latitude\": \"%s\", \"accuracy\": %d}",
				deviceId, longitudeVal, latitudeVal, accuracyVal);
	}
	HAL_UART_Transmit(huart, requestBody, 150, 100);
 8001de2:	f107 0110 	add.w	r1, r7, #16
 8001de6:	2364      	movs	r3, #100	@ 0x64
 8001de8:	2296      	movs	r2, #150	@ 0x96
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f002 ff58 	bl	8004ca0 <HAL_UART_Transmit>
}
 8001df0:	bf00      	nop
 8001df2:	37a8      	adds	r7, #168	@ 0xa8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	0800ad68 	.word	0x0800ad68

08001dfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e02:	f001 f959 	bl	80030b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e06:	f000 f8b7 	bl	8001f78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e0a:	f000 f97d 	bl	8002108 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001e0e:	f000 f927 	bl	8002060 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001e12:	f000 f8f7 	bl	8002004 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001e16:	f000 f94d 	bl	80020b4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
    lcd_init();
 8001e1a:	f7ff ff77 	bl	8001d0c <lcd_init>

    Ringbuf_init();
 8001e1e:	f000 ff15 	bl	8002c4c <Ringbuf_init>
    HAL_Delay (500);
 8001e22:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001e26:	f001 f9a9 	bl	800317c <HAL_Delay>

    	SSD1306_Init();
 8001e2a:	f000 fa17 	bl	800225c <SSD1306_Init>
    	char snum[5];

       SSD1306_GotoXY (0,0);
 8001e2e:	2100      	movs	r1, #0
 8001e30:	2000      	movs	r0, #0
 8001e32:	f000 fb7b 	bl	800252c <SSD1306_GotoXY>
       SSD1306_Puts ("test", &Font_11x18, 1);
 8001e36:	2201      	movs	r2, #1
 8001e38:	493f      	ldr	r1, [pc, #252]	@ (8001f38 <main+0x13c>)
 8001e3a:	4840      	ldr	r0, [pc, #256]	@ (8001f3c <main+0x140>)
 8001e3c:	f000 fc0a 	bl	8002654 <SSD1306_Puts>
       SSD1306_GotoXY (0,15);
 8001e40:	210f      	movs	r1, #15
 8001e42:	2000      	movs	r0, #0
 8001e44:	f000 fb72 	bl	800252c <SSD1306_GotoXY>
       SSD1306_Puts ("GPS MODULE", &Font_11x18, 1);
 8001e48:	2201      	movs	r2, #1
 8001e4a:	493b      	ldr	r1, [pc, #236]	@ (8001f38 <main+0x13c>)
 8001e4c:	483c      	ldr	r0, [pc, #240]	@ (8001f40 <main+0x144>)
 8001e4e:	f000 fc01 	bl	8002654 <SSD1306_Puts>
       SSD1306_UpdateScreen();
 8001e52:	f000 fac7 	bl	80023e4 <SSD1306_UpdateScreen>
       HAL_Delay (1000);
 8001e56:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e5a:	f001 f98f 	bl	800317c <HAL_Delay>

       SSD1306_ScrollRight(0,7);
 8001e5e:	2107      	movs	r1, #7
 8001e60:	2000      	movs	r0, #0
 8001e62:	f000 f985 	bl	8002170 <SSD1306_ScrollRight>
       HAL_Delay(3000);
 8001e66:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001e6a:	f001 f987 	bl	800317c <HAL_Delay>
       SSD1306_ScrollLeft(0,7);
 8001e6e:	2107      	movs	r1, #7
 8001e70:	2000      	movs	r0, #0
 8001e72:	f000 f9b3 	bl	80021dc <SSD1306_ScrollLeft>
       HAL_Delay(3000);
 8001e76:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001e7a:	f001 f97f 	bl	800317c <HAL_Delay>
       SSD1306_Stopscroll();
 8001e7e:	f000 f9e3 	bl	8002248 <SSD1306_Stopscroll>
       SSD1306_Clear();
 8001e82:	f000 fc0c 	bl	800269e <SSD1306_Clear>
       SSD1306_GotoXY (35,0);
 8001e86:	2100      	movs	r1, #0
 8001e88:	2023      	movs	r0, #35	@ 0x23
 8001e8a:	f000 fb4f 	bl	800252c <SSD1306_GotoXY>
       SSD1306_Puts ("INF", &Font_7x10, 1);
 8001e8e:	2201      	movs	r2, #1
 8001e90:	492c      	ldr	r1, [pc, #176]	@ (8001f44 <main+0x148>)
 8001e92:	482d      	ldr	r0, [pc, #180]	@ (8001f48 <main+0x14c>)
 8001e94:	f000 fbde 	bl	8002654 <SSD1306_Puts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if (Wait_for("GGA") == 1)
 8001e98:	482c      	ldr	r0, [pc, #176]	@ (8001f4c <main+0x150>)
 8001e9a:	f001 f801 	bl	8002ea0 <Wait_for>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d141      	bne.n	8001f28 <main+0x12c>
	  {

		  //VCCTimeout = 5000;  // Reset the VCC Timeout indicating the GGA is being received

		  Copy_upto("*", GGA);
 8001ea4:	492a      	ldr	r1, [pc, #168]	@ (8001f50 <main+0x154>)
 8001ea6:	482b      	ldr	r0, [pc, #172]	@ (8001f54 <main+0x158>)
 8001ea8:	f000 ff7a 	bl	8002da0 <Copy_upto>
		  decodeGGA(GGA, &gpsData.ggastruct);
 8001eac:	492a      	ldr	r1, [pc, #168]	@ (8001f58 <main+0x15c>)
 8001eae:	4828      	ldr	r0, [pc, #160]	@ (8001f50 <main+0x154>)
 8001eb0:	f7fe ff06 	bl	8000cc0 <decodeGGA>
		  signalAccurate = accurateSignal(&gpsData.ggastruct);
 8001eb4:	4828      	ldr	r0, [pc, #160]	@ (8001f58 <main+0x15c>)
 8001eb6:	f7ff fb19 	bl	80014ec <accurateSignal>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	4b27      	ldr	r3, [pc, #156]	@ (8001f5c <main+0x160>)
 8001ec0:	701a      	strb	r2, [r3, #0]

		  sprintf(longitude,"%4.4f",gpsData.ggastruct.lcation.longitude);
 8001ec2:	4b25      	ldr	r3, [pc, #148]	@ (8001f58 <main+0x15c>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe faae 	bl	8000428 <__aeabi_f2d>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	4923      	ldr	r1, [pc, #140]	@ (8001f60 <main+0x164>)
 8001ed2:	4824      	ldr	r0, [pc, #144]	@ (8001f64 <main+0x168>)
 8001ed4:	f005 fa7e 	bl	80073d4 <siprintf>
		  sprintf(latitude,"%f",gpsData.ggastruct.lcation.latitude);
 8001ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f58 <main+0x15c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe faa3 	bl	8000428 <__aeabi_f2d>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4920      	ldr	r1, [pc, #128]	@ (8001f68 <main+0x16c>)
 8001ee8:	4820      	ldr	r0, [pc, #128]	@ (8001f6c <main+0x170>)
 8001eea:	f005 fa73 	bl	80073d4 <siprintf>
		  sendRequestToEsp32(&huart2, "test",longitude, latitude, signalAccurate);
 8001eee:	4b1b      	ldr	r3, [pc, #108]	@ (8001f5c <main+0x160>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f6c <main+0x170>)
 8001ef6:	4a1b      	ldr	r2, [pc, #108]	@ (8001f64 <main+0x168>)
 8001ef8:	4910      	ldr	r1, [pc, #64]	@ (8001f3c <main+0x140>)
 8001efa:	481d      	ldr	r0, [pc, #116]	@ (8001f70 <main+0x174>)
 8001efc:	f7ff ff44 	bl	8001d88 <sendRequestToEsp32>


		  //if (decodeGGA(GGA, &gpsData.ggastruct) == 0) flagGGA = 2;  // 2 indicates the data is valid
		  //else flagGGA = 1;  // 1 indicates the data is invalid
		  	 SSD1306_GotoXY (0,0);
 8001f00:	2100      	movs	r1, #0
 8001f02:	2000      	movs	r0, #0
 8001f04:	f000 fb12 	bl	800252c <SSD1306_GotoXY>
		     SSD1306_Puts (longitude, &Font_7x10, 1);
 8001f08:	2201      	movs	r2, #1
 8001f0a:	490e      	ldr	r1, [pc, #56]	@ (8001f44 <main+0x148>)
 8001f0c:	4815      	ldr	r0, [pc, #84]	@ (8001f64 <main+0x168>)
 8001f0e:	f000 fba1 	bl	8002654 <SSD1306_Puts>
		     SSD1306_GotoXY (0,10);
 8001f12:	210a      	movs	r1, #10
 8001f14:	2000      	movs	r0, #0
 8001f16:	f000 fb09 	bl	800252c <SSD1306_GotoXY>
		     SSD1306_Puts (latitude, &Font_7x10, 1);
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4909      	ldr	r1, [pc, #36]	@ (8001f44 <main+0x148>)
 8001f1e:	4813      	ldr	r0, [pc, #76]	@ (8001f6c <main+0x170>)
 8001f20:	f000 fb98 	bl	8002654 <SSD1306_Puts>
		     SSD1306_UpdateScreen();
 8001f24:	f000 fa5e 	bl	80023e4 <SSD1306_UpdateScreen>
	  }



	  if (Wait_for("RMC") == 1)
 8001f28:	4812      	ldr	r0, [pc, #72]	@ (8001f74 <main+0x178>)
 8001f2a:	f000 ffb9 	bl	8002ea0 <Wait_for>
//		  lcd_put_cur(0, 0);
//		  lcd_send_string("    VCC Issue   ");
//		  lcd_put_cur(1, 0);
//		  lcd_send_string("Check Connection");
//	  }
HAL_Delay(3000);
 8001f2e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001f32:	f001 f923 	bl	800317c <HAL_Delay>
	  if (Wait_for("GGA") == 1)
 8001f36:	e7af      	b.n	8001e98 <main+0x9c>
 8001f38:	2000000c 	.word	0x2000000c
 8001f3c:	0800adb0 	.word	0x0800adb0
 8001f40:	0800adb8 	.word	0x0800adb8
 8001f44:	20000004 	.word	0x20000004
 8001f48:	0800adc4 	.word	0x0800adc4
 8001f4c:	0800adc8 	.word	0x0800adc8
 8001f50:	20000c74 	.word	0x20000c74
 8001f54:	0800adcc 	.word	0x0800adcc
 8001f58:	20000cd8 	.word	0x20000cd8
 8001f5c:	20000230 	.word	0x20000230
 8001f60:	0800add0 	.word	0x0800add0
 8001f64:	20000234 	.word	0x20000234
 8001f68:	0800add8 	.word	0x0800add8
 8001f6c:	20000244 	.word	0x20000244
 8001f70:	20000d88 	.word	0x20000d88
 8001f74:	0800addc 	.word	0x0800addc

08001f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b090      	sub	sp, #64	@ 0x40
 8001f7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f7e:	f107 0318 	add.w	r3, r7, #24
 8001f82:	2228      	movs	r2, #40	@ 0x28
 8001f84:	2100      	movs	r1, #0
 8001f86:	4618      	mov	r0, r3
 8001f88:	f005 fa87 	bl	800749a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	605a      	str	r2, [r3, #4]
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	60da      	str	r2, [r3, #12]
 8001f98:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f9e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fa2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fac:	2302      	movs	r3, #2
 8001fae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fb0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001fb6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fbc:	f107 0318 	add.w	r3, r7, #24
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f002 fa0d 	bl	80043e0 <HAL_RCC_OscConfig>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001fcc:	f000 f8ca 	bl	8002164 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fd0:	230f      	movs	r3, #15
 8001fd2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fe0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fe6:	1d3b      	adds	r3, r7, #4
 8001fe8:	2102      	movs	r1, #2
 8001fea:	4618      	mov	r0, r3
 8001fec:	f002 fc7a 	bl	80048e4 <HAL_RCC_ClockConfig>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001ff6:	f000 f8b5 	bl	8002164 <Error_Handler>
  }
}
 8001ffa:	bf00      	nop
 8001ffc:	3740      	adds	r7, #64	@ 0x40
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002008:	4b12      	ldr	r3, [pc, #72]	@ (8002054 <MX_I2C1_Init+0x50>)
 800200a:	4a13      	ldr	r2, [pc, #76]	@ (8002058 <MX_I2C1_Init+0x54>)
 800200c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800200e:	4b11      	ldr	r3, [pc, #68]	@ (8002054 <MX_I2C1_Init+0x50>)
 8002010:	4a12      	ldr	r2, [pc, #72]	@ (800205c <MX_I2C1_Init+0x58>)
 8002012:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002014:	4b0f      	ldr	r3, [pc, #60]	@ (8002054 <MX_I2C1_Init+0x50>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800201a:	4b0e      	ldr	r3, [pc, #56]	@ (8002054 <MX_I2C1_Init+0x50>)
 800201c:	2200      	movs	r2, #0
 800201e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002020:	4b0c      	ldr	r3, [pc, #48]	@ (8002054 <MX_I2C1_Init+0x50>)
 8002022:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002026:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002028:	4b0a      	ldr	r3, [pc, #40]	@ (8002054 <MX_I2C1_Init+0x50>)
 800202a:	2200      	movs	r2, #0
 800202c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800202e:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <MX_I2C1_Init+0x50>)
 8002030:	2200      	movs	r2, #0
 8002032:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002034:	4b07      	ldr	r3, [pc, #28]	@ (8002054 <MX_I2C1_Init+0x50>)
 8002036:	2200      	movs	r2, #0
 8002038:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800203a:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <MX_I2C1_Init+0x50>)
 800203c:	2200      	movs	r2, #0
 800203e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002040:	4804      	ldr	r0, [pc, #16]	@ (8002054 <MX_I2C1_Init+0x50>)
 8002042:	f001 fc03 	bl	800384c <HAL_I2C_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800204c:	f000 f88a 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000bbc 	.word	0x20000bbc
 8002058:	40005400 	.word	0x40005400
 800205c:	00061a80 	.word	0x00061a80

08002060 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002064:	4b11      	ldr	r3, [pc, #68]	@ (80020ac <MX_USART1_UART_Init+0x4c>)
 8002066:	4a12      	ldr	r2, [pc, #72]	@ (80020b0 <MX_USART1_UART_Init+0x50>)
 8002068:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800206a:	4b10      	ldr	r3, [pc, #64]	@ (80020ac <MX_USART1_UART_Init+0x4c>)
 800206c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002070:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002072:	4b0e      	ldr	r3, [pc, #56]	@ (80020ac <MX_USART1_UART_Init+0x4c>)
 8002074:	2200      	movs	r2, #0
 8002076:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002078:	4b0c      	ldr	r3, [pc, #48]	@ (80020ac <MX_USART1_UART_Init+0x4c>)
 800207a:	2200      	movs	r2, #0
 800207c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800207e:	4b0b      	ldr	r3, [pc, #44]	@ (80020ac <MX_USART1_UART_Init+0x4c>)
 8002080:	2200      	movs	r2, #0
 8002082:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002084:	4b09      	ldr	r3, [pc, #36]	@ (80020ac <MX_USART1_UART_Init+0x4c>)
 8002086:	220c      	movs	r2, #12
 8002088:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800208a:	4b08      	ldr	r3, [pc, #32]	@ (80020ac <MX_USART1_UART_Init+0x4c>)
 800208c:	2200      	movs	r2, #0
 800208e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002090:	4b06      	ldr	r3, [pc, #24]	@ (80020ac <MX_USART1_UART_Init+0x4c>)
 8002092:	2200      	movs	r2, #0
 8002094:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002096:	4805      	ldr	r0, [pc, #20]	@ (80020ac <MX_USART1_UART_Init+0x4c>)
 8002098:	f002 fdb2 	bl	8004c00 <HAL_UART_Init>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020a2:	f000 f85f 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000d0c 	.word	0x20000d0c
 80020b0:	40013800 	.word	0x40013800

080020b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020b8:	4b11      	ldr	r3, [pc, #68]	@ (8002100 <MX_USART2_UART_Init+0x4c>)
 80020ba:	4a12      	ldr	r2, [pc, #72]	@ (8002104 <MX_USART2_UART_Init+0x50>)
 80020bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020be:	4b10      	ldr	r3, [pc, #64]	@ (8002100 <MX_USART2_UART_Init+0x4c>)
 80020c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002100 <MX_USART2_UART_Init+0x4c>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002100 <MX_USART2_UART_Init+0x4c>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002100 <MX_USART2_UART_Init+0x4c>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020d8:	4b09      	ldr	r3, [pc, #36]	@ (8002100 <MX_USART2_UART_Init+0x4c>)
 80020da:	220c      	movs	r2, #12
 80020dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020de:	4b08      	ldr	r3, [pc, #32]	@ (8002100 <MX_USART2_UART_Init+0x4c>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e4:	4b06      	ldr	r3, [pc, #24]	@ (8002100 <MX_USART2_UART_Init+0x4c>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020ea:	4805      	ldr	r0, [pc, #20]	@ (8002100 <MX_USART2_UART_Init+0x4c>)
 80020ec:	f002 fd88 	bl	8004c00 <HAL_UART_Init>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020f6:	f000 f835 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000d88 	.word	0x20000d88
 8002104:	40004400 	.word	0x40004400

08002108 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800210e:	4b14      	ldr	r3, [pc, #80]	@ (8002160 <MX_GPIO_Init+0x58>)
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	4a13      	ldr	r2, [pc, #76]	@ (8002160 <MX_GPIO_Init+0x58>)
 8002114:	f043 0320 	orr.w	r3, r3, #32
 8002118:	6193      	str	r3, [r2, #24]
 800211a:	4b11      	ldr	r3, [pc, #68]	@ (8002160 <MX_GPIO_Init+0x58>)
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002126:	4b0e      	ldr	r3, [pc, #56]	@ (8002160 <MX_GPIO_Init+0x58>)
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	4a0d      	ldr	r2, [pc, #52]	@ (8002160 <MX_GPIO_Init+0x58>)
 800212c:	f043 0304 	orr.w	r3, r3, #4
 8002130:	6193      	str	r3, [r2, #24]
 8002132:	4b0b      	ldr	r3, [pc, #44]	@ (8002160 <MX_GPIO_Init+0x58>)
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	f003 0304 	and.w	r3, r3, #4
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800213e:	4b08      	ldr	r3, [pc, #32]	@ (8002160 <MX_GPIO_Init+0x58>)
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	4a07      	ldr	r2, [pc, #28]	@ (8002160 <MX_GPIO_Init+0x58>)
 8002144:	f043 0308 	orr.w	r3, r3, #8
 8002148:	6193      	str	r3, [r2, #24]
 800214a:	4b05      	ldr	r3, [pc, #20]	@ (8002160 <MX_GPIO_Init+0x58>)
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	607b      	str	r3, [r7, #4]
 8002154:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002156:	bf00      	nop
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr
 8002160:	40021000 	.word	0x40021000

08002164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002168:	b672      	cpsid	i
}
 800216a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800216c:	bf00      	nop
 800216e:	e7fd      	b.n	800216c <Error_Handler+0x8>

08002170 <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	460a      	mov	r2, r1
 800217a:	71fb      	strb	r3, [r7, #7]
 800217c:	4613      	mov	r3, r2
 800217e:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 8002180:	2226      	movs	r2, #38	@ 0x26
 8002182:	2100      	movs	r1, #0
 8002184:	2078      	movs	r0, #120	@ 0x78
 8002186:	f000 fb0d 	bl	80027a4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 800218a:	2200      	movs	r2, #0
 800218c:	2100      	movs	r1, #0
 800218e:	2078      	movs	r0, #120	@ 0x78
 8002190:	f000 fb08 	bl	80027a4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	461a      	mov	r2, r3
 8002198:	2100      	movs	r1, #0
 800219a:	2078      	movs	r0, #120	@ 0x78
 800219c:	f000 fb02 	bl	80027a4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 80021a0:	2200      	movs	r2, #0
 80021a2:	2100      	movs	r1, #0
 80021a4:	2078      	movs	r0, #120	@ 0x78
 80021a6:	f000 fafd 	bl	80027a4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 80021aa:	79bb      	ldrb	r3, [r7, #6]
 80021ac:	461a      	mov	r2, r3
 80021ae:	2100      	movs	r1, #0
 80021b0:	2078      	movs	r0, #120	@ 0x78
 80021b2:	f000 faf7 	bl	80027a4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 80021b6:	2200      	movs	r2, #0
 80021b8:	2100      	movs	r1, #0
 80021ba:	2078      	movs	r0, #120	@ 0x78
 80021bc:	f000 faf2 	bl	80027a4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 80021c0:	22ff      	movs	r2, #255	@ 0xff
 80021c2:	2100      	movs	r1, #0
 80021c4:	2078      	movs	r0, #120	@ 0x78
 80021c6:	f000 faed 	bl	80027a4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 80021ca:	222f      	movs	r2, #47	@ 0x2f
 80021cc:	2100      	movs	r1, #0
 80021ce:	2078      	movs	r0, #120	@ 0x78
 80021d0:	f000 fae8 	bl	80027a4 <ssd1306_I2C_Write>
}
 80021d4:	bf00      	nop
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	460a      	mov	r2, r1
 80021e6:	71fb      	strb	r3, [r7, #7]
 80021e8:	4613      	mov	r3, r2
 80021ea:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 80021ec:	2227      	movs	r2, #39	@ 0x27
 80021ee:	2100      	movs	r1, #0
 80021f0:	2078      	movs	r0, #120	@ 0x78
 80021f2:	f000 fad7 	bl	80027a4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 80021f6:	2200      	movs	r2, #0
 80021f8:	2100      	movs	r1, #0
 80021fa:	2078      	movs	r0, #120	@ 0x78
 80021fc:	f000 fad2 	bl	80027a4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	461a      	mov	r2, r3
 8002204:	2100      	movs	r1, #0
 8002206:	2078      	movs	r0, #120	@ 0x78
 8002208:	f000 facc 	bl	80027a4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 800220c:	2200      	movs	r2, #0
 800220e:	2100      	movs	r1, #0
 8002210:	2078      	movs	r0, #120	@ 0x78
 8002212:	f000 fac7 	bl	80027a4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8002216:	79bb      	ldrb	r3, [r7, #6]
 8002218:	461a      	mov	r2, r3
 800221a:	2100      	movs	r1, #0
 800221c:	2078      	movs	r0, #120	@ 0x78
 800221e:	f000 fac1 	bl	80027a4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8002222:	2200      	movs	r2, #0
 8002224:	2100      	movs	r1, #0
 8002226:	2078      	movs	r0, #120	@ 0x78
 8002228:	f000 fabc 	bl	80027a4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 800222c:	22ff      	movs	r2, #255	@ 0xff
 800222e:	2100      	movs	r1, #0
 8002230:	2078      	movs	r0, #120	@ 0x78
 8002232:	f000 fab7 	bl	80027a4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8002236:	222f      	movs	r2, #47	@ 0x2f
 8002238:	2100      	movs	r1, #0
 800223a:	2078      	movs	r0, #120	@ 0x78
 800223c:	f000 fab2 	bl	80027a4 <ssd1306_I2C_Write>
}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800224c:	222e      	movs	r2, #46	@ 0x2e
 800224e:	2100      	movs	r1, #0
 8002250:	2078      	movs	r0, #120	@ 0x78
 8002252:	f000 faa7 	bl	80027a4 <ssd1306_I2C_Write>
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002262:	f000 fa25 	bl	80026b0 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002266:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800226a:	2201      	movs	r2, #1
 800226c:	2178      	movs	r1, #120	@ 0x78
 800226e:	485b      	ldr	r0, [pc, #364]	@ (80023dc <SSD1306_Init+0x180>)
 8002270:	f001 fd2e 	bl	8003cd0 <HAL_I2C_IsDeviceReady>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800227a:	2300      	movs	r3, #0
 800227c:	e0a9      	b.n	80023d2 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800227e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002282:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002284:	e002      	b.n	800228c <SSD1306_Init+0x30>
		p--;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3b01      	subs	r3, #1
 800228a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f9      	bne.n	8002286 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002292:	22ae      	movs	r2, #174	@ 0xae
 8002294:	2100      	movs	r1, #0
 8002296:	2078      	movs	r0, #120	@ 0x78
 8002298:	f000 fa84 	bl	80027a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 800229c:	2220      	movs	r2, #32
 800229e:	2100      	movs	r1, #0
 80022a0:	2078      	movs	r0, #120	@ 0x78
 80022a2:	f000 fa7f 	bl	80027a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80022a6:	2210      	movs	r2, #16
 80022a8:	2100      	movs	r1, #0
 80022aa:	2078      	movs	r0, #120	@ 0x78
 80022ac:	f000 fa7a 	bl	80027a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80022b0:	22b0      	movs	r2, #176	@ 0xb0
 80022b2:	2100      	movs	r1, #0
 80022b4:	2078      	movs	r0, #120	@ 0x78
 80022b6:	f000 fa75 	bl	80027a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80022ba:	22c8      	movs	r2, #200	@ 0xc8
 80022bc:	2100      	movs	r1, #0
 80022be:	2078      	movs	r0, #120	@ 0x78
 80022c0:	f000 fa70 	bl	80027a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80022c4:	2200      	movs	r2, #0
 80022c6:	2100      	movs	r1, #0
 80022c8:	2078      	movs	r0, #120	@ 0x78
 80022ca:	f000 fa6b 	bl	80027a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80022ce:	2210      	movs	r2, #16
 80022d0:	2100      	movs	r1, #0
 80022d2:	2078      	movs	r0, #120	@ 0x78
 80022d4:	f000 fa66 	bl	80027a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80022d8:	2240      	movs	r2, #64	@ 0x40
 80022da:	2100      	movs	r1, #0
 80022dc:	2078      	movs	r0, #120	@ 0x78
 80022de:	f000 fa61 	bl	80027a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80022e2:	2281      	movs	r2, #129	@ 0x81
 80022e4:	2100      	movs	r1, #0
 80022e6:	2078      	movs	r0, #120	@ 0x78
 80022e8:	f000 fa5c 	bl	80027a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80022ec:	22ff      	movs	r2, #255	@ 0xff
 80022ee:	2100      	movs	r1, #0
 80022f0:	2078      	movs	r0, #120	@ 0x78
 80022f2:	f000 fa57 	bl	80027a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80022f6:	22a1      	movs	r2, #161	@ 0xa1
 80022f8:	2100      	movs	r1, #0
 80022fa:	2078      	movs	r0, #120	@ 0x78
 80022fc:	f000 fa52 	bl	80027a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002300:	22a6      	movs	r2, #166	@ 0xa6
 8002302:	2100      	movs	r1, #0
 8002304:	2078      	movs	r0, #120	@ 0x78
 8002306:	f000 fa4d 	bl	80027a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800230a:	22a8      	movs	r2, #168	@ 0xa8
 800230c:	2100      	movs	r1, #0
 800230e:	2078      	movs	r0, #120	@ 0x78
 8002310:	f000 fa48 	bl	80027a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002314:	223f      	movs	r2, #63	@ 0x3f
 8002316:	2100      	movs	r1, #0
 8002318:	2078      	movs	r0, #120	@ 0x78
 800231a:	f000 fa43 	bl	80027a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800231e:	22a4      	movs	r2, #164	@ 0xa4
 8002320:	2100      	movs	r1, #0
 8002322:	2078      	movs	r0, #120	@ 0x78
 8002324:	f000 fa3e 	bl	80027a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002328:	22d3      	movs	r2, #211	@ 0xd3
 800232a:	2100      	movs	r1, #0
 800232c:	2078      	movs	r0, #120	@ 0x78
 800232e:	f000 fa39 	bl	80027a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002332:	2200      	movs	r2, #0
 8002334:	2100      	movs	r1, #0
 8002336:	2078      	movs	r0, #120	@ 0x78
 8002338:	f000 fa34 	bl	80027a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800233c:	22d5      	movs	r2, #213	@ 0xd5
 800233e:	2100      	movs	r1, #0
 8002340:	2078      	movs	r0, #120	@ 0x78
 8002342:	f000 fa2f 	bl	80027a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002346:	22f0      	movs	r2, #240	@ 0xf0
 8002348:	2100      	movs	r1, #0
 800234a:	2078      	movs	r0, #120	@ 0x78
 800234c:	f000 fa2a 	bl	80027a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002350:	22d9      	movs	r2, #217	@ 0xd9
 8002352:	2100      	movs	r1, #0
 8002354:	2078      	movs	r0, #120	@ 0x78
 8002356:	f000 fa25 	bl	80027a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800235a:	2222      	movs	r2, #34	@ 0x22
 800235c:	2100      	movs	r1, #0
 800235e:	2078      	movs	r0, #120	@ 0x78
 8002360:	f000 fa20 	bl	80027a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002364:	22da      	movs	r2, #218	@ 0xda
 8002366:	2100      	movs	r1, #0
 8002368:	2078      	movs	r0, #120	@ 0x78
 800236a:	f000 fa1b 	bl	80027a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800236e:	2212      	movs	r2, #18
 8002370:	2100      	movs	r1, #0
 8002372:	2078      	movs	r0, #120	@ 0x78
 8002374:	f000 fa16 	bl	80027a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002378:	22db      	movs	r2, #219	@ 0xdb
 800237a:	2100      	movs	r1, #0
 800237c:	2078      	movs	r0, #120	@ 0x78
 800237e:	f000 fa11 	bl	80027a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002382:	2220      	movs	r2, #32
 8002384:	2100      	movs	r1, #0
 8002386:	2078      	movs	r0, #120	@ 0x78
 8002388:	f000 fa0c 	bl	80027a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800238c:	228d      	movs	r2, #141	@ 0x8d
 800238e:	2100      	movs	r1, #0
 8002390:	2078      	movs	r0, #120	@ 0x78
 8002392:	f000 fa07 	bl	80027a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002396:	2214      	movs	r2, #20
 8002398:	2100      	movs	r1, #0
 800239a:	2078      	movs	r0, #120	@ 0x78
 800239c:	f000 fa02 	bl	80027a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80023a0:	22af      	movs	r2, #175	@ 0xaf
 80023a2:	2100      	movs	r1, #0
 80023a4:	2078      	movs	r0, #120	@ 0x78
 80023a6:	f000 f9fd 	bl	80027a4 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80023aa:	222e      	movs	r2, #46	@ 0x2e
 80023ac:	2100      	movs	r1, #0
 80023ae:	2078      	movs	r0, #120	@ 0x78
 80023b0:	f000 f9f8 	bl	80027a4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80023b4:	2000      	movs	r0, #0
 80023b6:	f000 f843 	bl	8002440 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80023ba:	f000 f813 	bl	80023e4 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80023be:	4b08      	ldr	r3, [pc, #32]	@ (80023e0 <SSD1306_Init+0x184>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80023c4:	4b06      	ldr	r3, [pc, #24]	@ (80023e0 <SSD1306_Init+0x184>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80023ca:	4b05      	ldr	r3, [pc, #20]	@ (80023e0 <SSD1306_Init+0x184>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80023d0:	2301      	movs	r3, #1
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000bbc 	.word	0x20000bbc
 80023e0:	20000654 	.word	0x20000654

080023e4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80023ea:	2300      	movs	r3, #0
 80023ec:	71fb      	strb	r3, [r7, #7]
 80023ee:	e01d      	b.n	800242c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	3b50      	subs	r3, #80	@ 0x50
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	461a      	mov	r2, r3
 80023f8:	2100      	movs	r1, #0
 80023fa:	2078      	movs	r0, #120	@ 0x78
 80023fc:	f000 f9d2 	bl	80027a4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002400:	2200      	movs	r2, #0
 8002402:	2100      	movs	r1, #0
 8002404:	2078      	movs	r0, #120	@ 0x78
 8002406:	f000 f9cd 	bl	80027a4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800240a:	2210      	movs	r2, #16
 800240c:	2100      	movs	r1, #0
 800240e:	2078      	movs	r0, #120	@ 0x78
 8002410:	f000 f9c8 	bl	80027a4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	01db      	lsls	r3, r3, #7
 8002418:	4a08      	ldr	r2, [pc, #32]	@ (800243c <SSD1306_UpdateScreen+0x58>)
 800241a:	441a      	add	r2, r3
 800241c:	2380      	movs	r3, #128	@ 0x80
 800241e:	2140      	movs	r1, #64	@ 0x40
 8002420:	2078      	movs	r0, #120	@ 0x78
 8002422:	f000 f959 	bl	80026d8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	3301      	adds	r3, #1
 800242a:	71fb      	strb	r3, [r7, #7]
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	2b07      	cmp	r3, #7
 8002430:	d9de      	bls.n	80023f0 <SSD1306_UpdateScreen+0xc>
	}
}
 8002432:	bf00      	nop
 8002434:	bf00      	nop
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20000254 	.word	0x20000254

08002440 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <SSD1306_Fill+0x14>
 8002450:	2300      	movs	r3, #0
 8002452:	e000      	b.n	8002456 <SSD1306_Fill+0x16>
 8002454:	23ff      	movs	r3, #255	@ 0xff
 8002456:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800245a:	4619      	mov	r1, r3
 800245c:	4803      	ldr	r0, [pc, #12]	@ (800246c <SSD1306_Fill+0x2c>)
 800245e:	f005 f81c 	bl	800749a <memset>
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000254 	.word	0x20000254

08002470 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	80fb      	strh	r3, [r7, #6]
 800247a:	460b      	mov	r3, r1
 800247c:	80bb      	strh	r3, [r7, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	70fb      	strb	r3, [r7, #3]
	if (
 8002482:	88fb      	ldrh	r3, [r7, #6]
 8002484:	2b7f      	cmp	r3, #127	@ 0x7f
 8002486:	d848      	bhi.n	800251a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002488:	88bb      	ldrh	r3, [r7, #4]
 800248a:	2b3f      	cmp	r3, #63	@ 0x3f
 800248c:	d845      	bhi.n	800251a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800248e:	4b25      	ldr	r3, [pc, #148]	@ (8002524 <SSD1306_DrawPixel+0xb4>)
 8002490:	791b      	ldrb	r3, [r3, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d006      	beq.n	80024a4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002496:	78fb      	ldrb	r3, [r7, #3]
 8002498:	2b00      	cmp	r3, #0
 800249a:	bf0c      	ite	eq
 800249c:	2301      	moveq	r3, #1
 800249e:	2300      	movne	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d11a      	bne.n	80024e0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80024aa:	88fa      	ldrh	r2, [r7, #6]
 80024ac:	88bb      	ldrh	r3, [r7, #4]
 80024ae:	08db      	lsrs	r3, r3, #3
 80024b0:	b298      	uxth	r0, r3
 80024b2:	4603      	mov	r3, r0
 80024b4:	01db      	lsls	r3, r3, #7
 80024b6:	4413      	add	r3, r2
 80024b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002528 <SSD1306_DrawPixel+0xb8>)
 80024ba:	5cd3      	ldrb	r3, [r2, r3]
 80024bc:	b25a      	sxtb	r2, r3
 80024be:	88bb      	ldrh	r3, [r7, #4]
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	2101      	movs	r1, #1
 80024c6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ca:	b25b      	sxtb	r3, r3
 80024cc:	4313      	orrs	r3, r2
 80024ce:	b259      	sxtb	r1, r3
 80024d0:	88fa      	ldrh	r2, [r7, #6]
 80024d2:	4603      	mov	r3, r0
 80024d4:	01db      	lsls	r3, r3, #7
 80024d6:	4413      	add	r3, r2
 80024d8:	b2c9      	uxtb	r1, r1
 80024da:	4a13      	ldr	r2, [pc, #76]	@ (8002528 <SSD1306_DrawPixel+0xb8>)
 80024dc:	54d1      	strb	r1, [r2, r3]
 80024de:	e01d      	b.n	800251c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80024e0:	88fa      	ldrh	r2, [r7, #6]
 80024e2:	88bb      	ldrh	r3, [r7, #4]
 80024e4:	08db      	lsrs	r3, r3, #3
 80024e6:	b298      	uxth	r0, r3
 80024e8:	4603      	mov	r3, r0
 80024ea:	01db      	lsls	r3, r3, #7
 80024ec:	4413      	add	r3, r2
 80024ee:	4a0e      	ldr	r2, [pc, #56]	@ (8002528 <SSD1306_DrawPixel+0xb8>)
 80024f0:	5cd3      	ldrb	r3, [r2, r3]
 80024f2:	b25a      	sxtb	r2, r3
 80024f4:	88bb      	ldrh	r3, [r7, #4]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	2101      	movs	r1, #1
 80024fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002500:	b25b      	sxtb	r3, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	b25b      	sxtb	r3, r3
 8002506:	4013      	ands	r3, r2
 8002508:	b259      	sxtb	r1, r3
 800250a:	88fa      	ldrh	r2, [r7, #6]
 800250c:	4603      	mov	r3, r0
 800250e:	01db      	lsls	r3, r3, #7
 8002510:	4413      	add	r3, r2
 8002512:	b2c9      	uxtb	r1, r1
 8002514:	4a04      	ldr	r2, [pc, #16]	@ (8002528 <SSD1306_DrawPixel+0xb8>)
 8002516:	54d1      	strb	r1, [r2, r3]
 8002518:	e000      	b.n	800251c <SSD1306_DrawPixel+0xac>
		return;
 800251a:	bf00      	nop
	}
}
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr
 8002524:	20000654 	.word	0x20000654
 8002528:	20000254 	.word	0x20000254

0800252c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	460a      	mov	r2, r1
 8002536:	80fb      	strh	r3, [r7, #6]
 8002538:	4613      	mov	r3, r2
 800253a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800253c:	4a05      	ldr	r2, [pc, #20]	@ (8002554 <SSD1306_GotoXY+0x28>)
 800253e:	88fb      	ldrh	r3, [r7, #6]
 8002540:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002542:	4a04      	ldr	r2, [pc, #16]	@ (8002554 <SSD1306_GotoXY+0x28>)
 8002544:	88bb      	ldrh	r3, [r7, #4]
 8002546:	8053      	strh	r3, [r2, #2]
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	20000654 	.word	0x20000654

08002558 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	6039      	str	r1, [r7, #0]
 8002562:	71fb      	strb	r3, [r7, #7]
 8002564:	4613      	mov	r3, r2
 8002566:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002568:	4b39      	ldr	r3, [pc, #228]	@ (8002650 <SSD1306_Putc+0xf8>)
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	461a      	mov	r2, r3
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	4413      	add	r3, r2
	if (
 8002574:	2b7f      	cmp	r3, #127	@ 0x7f
 8002576:	dc07      	bgt.n	8002588 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002578:	4b35      	ldr	r3, [pc, #212]	@ (8002650 <SSD1306_Putc+0xf8>)
 800257a:	885b      	ldrh	r3, [r3, #2]
 800257c:	461a      	mov	r2, r3
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	785b      	ldrb	r3, [r3, #1]
 8002582:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002584:	2b3f      	cmp	r3, #63	@ 0x3f
 8002586:	dd01      	ble.n	800258c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002588:	2300      	movs	r3, #0
 800258a:	e05d      	b.n	8002648 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	e04b      	b.n	800262a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	3b20      	subs	r3, #32
 800259a:	6839      	ldr	r1, [r7, #0]
 800259c:	7849      	ldrb	r1, [r1, #1]
 800259e:	fb01 f303 	mul.w	r3, r1, r3
 80025a2:	4619      	mov	r1, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	440b      	add	r3, r1
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	4413      	add	r3, r2
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80025b0:	2300      	movs	r3, #0
 80025b2:	613b      	str	r3, [r7, #16]
 80025b4:	e030      	b.n	8002618 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d010      	beq.n	80025e8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80025c6:	4b22      	ldr	r3, [pc, #136]	@ (8002650 <SSD1306_Putc+0xf8>)
 80025c8:	881a      	ldrh	r2, [r3, #0]
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	4413      	add	r3, r2
 80025d0:	b298      	uxth	r0, r3
 80025d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002650 <SSD1306_Putc+0xf8>)
 80025d4:	885a      	ldrh	r2, [r3, #2]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	b29b      	uxth	r3, r3
 80025da:	4413      	add	r3, r2
 80025dc:	b29b      	uxth	r3, r3
 80025de:	79ba      	ldrb	r2, [r7, #6]
 80025e0:	4619      	mov	r1, r3
 80025e2:	f7ff ff45 	bl	8002470 <SSD1306_DrawPixel>
 80025e6:	e014      	b.n	8002612 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80025e8:	4b19      	ldr	r3, [pc, #100]	@ (8002650 <SSD1306_Putc+0xf8>)
 80025ea:	881a      	ldrh	r2, [r3, #0]
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	4413      	add	r3, r2
 80025f2:	b298      	uxth	r0, r3
 80025f4:	4b16      	ldr	r3, [pc, #88]	@ (8002650 <SSD1306_Putc+0xf8>)
 80025f6:	885a      	ldrh	r2, [r3, #2]
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	4413      	add	r3, r2
 80025fe:	b299      	uxth	r1, r3
 8002600:	79bb      	ldrb	r3, [r7, #6]
 8002602:	2b00      	cmp	r3, #0
 8002604:	bf0c      	ite	eq
 8002606:	2301      	moveq	r3, #1
 8002608:	2300      	movne	r3, #0
 800260a:	b2db      	uxtb	r3, r3
 800260c:	461a      	mov	r2, r3
 800260e:	f7ff ff2f 	bl	8002470 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	3301      	adds	r3, #1
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	461a      	mov	r2, r3
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	4293      	cmp	r3, r2
 8002622:	d3c8      	bcc.n	80025b6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	3301      	adds	r3, #1
 8002628:	617b      	str	r3, [r7, #20]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	785b      	ldrb	r3, [r3, #1]
 800262e:	461a      	mov	r2, r3
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	4293      	cmp	r3, r2
 8002634:	d3ad      	bcc.n	8002592 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002636:	4b06      	ldr	r3, [pc, #24]	@ (8002650 <SSD1306_Putc+0xf8>)
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	7812      	ldrb	r2, [r2, #0]
 800263e:	4413      	add	r3, r2
 8002640:	b29a      	uxth	r2, r3
 8002642:	4b03      	ldr	r3, [pc, #12]	@ (8002650 <SSD1306_Putc+0xf8>)
 8002644:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8002646:	79fb      	ldrb	r3, [r7, #7]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	20000654 	.word	0x20000654

08002654 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	4613      	mov	r3, r2
 8002660:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002662:	e012      	b.n	800268a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	79fa      	ldrb	r2, [r7, #7]
 800266a:	68b9      	ldr	r1, [r7, #8]
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff ff73 	bl	8002558 <SSD1306_Putc>
 8002672:	4603      	mov	r3, r0
 8002674:	461a      	mov	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d002      	beq.n	8002684 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	e008      	b.n	8002696 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	3301      	adds	r3, #1
 8002688:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1e8      	bne.n	8002664 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	781b      	ldrb	r3, [r3, #0]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80026a2:	2000      	movs	r0, #0
 80026a4:	f7ff fecc 	bl	8002440 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80026a8:	f7ff fe9c 	bl	80023e4 <SSD1306_UpdateScreen>
}
 80026ac:	bf00      	nop
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80026b6:	4b07      	ldr	r3, [pc, #28]	@ (80026d4 <ssd1306_I2C_Init+0x24>)
 80026b8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80026ba:	e002      	b.n	80026c2 <ssd1306_I2C_Init+0x12>
		p--;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3b01      	subs	r3, #1
 80026c0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1f9      	bne.n	80026bc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80026c8:	bf00      	nop
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr
 80026d4:	0003d090 	.word	0x0003d090

080026d8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80026d8:	b590      	push	{r4, r7, lr}
 80026da:	b0c7      	sub	sp, #284	@ 0x11c
 80026dc:	af02      	add	r7, sp, #8
 80026de:	4604      	mov	r4, r0
 80026e0:	4608      	mov	r0, r1
 80026e2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80026e6:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80026ea:	600a      	str	r2, [r1, #0]
 80026ec:	4619      	mov	r1, r3
 80026ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80026f2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80026f6:	4622      	mov	r2, r4
 80026f8:	701a      	strb	r2, [r3, #0]
 80026fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80026fe:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002702:	4602      	mov	r2, r0
 8002704:	701a      	strb	r2, [r3, #0]
 8002706:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800270a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800270e:	460a      	mov	r2, r1
 8002710:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002712:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002716:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800271a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800271e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8002722:	7812      	ldrb	r2, [r2, #0]
 8002724:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002726:	2300      	movs	r3, #0
 8002728:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800272c:	e015      	b.n	800275a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800272e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002732:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002736:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	441a      	add	r2, r3
 800273e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002742:	3301      	adds	r3, #1
 8002744:	7811      	ldrb	r1, [r2, #0]
 8002746:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800274a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800274e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002750:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002754:	3301      	adds	r3, #1
 8002756:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800275a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800275e:	b29b      	uxth	r3, r3
 8002760:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002764:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002768:	8812      	ldrh	r2, [r2, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d8df      	bhi.n	800272e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800276e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002772:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	b299      	uxth	r1, r3
 800277a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800277e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	3301      	adds	r3, #1
 8002786:	b29b      	uxth	r3, r3
 8002788:	f107 020c 	add.w	r2, r7, #12
 800278c:	200a      	movs	r0, #10
 800278e:	9000      	str	r0, [sp, #0]
 8002790:	4803      	ldr	r0, [pc, #12]	@ (80027a0 <ssd1306_I2C_WriteMulti+0xc8>)
 8002792:	f001 f99f 	bl	8003ad4 <HAL_I2C_Master_Transmit>
}
 8002796:	bf00      	nop
 8002798:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800279c:	46bd      	mov	sp, r7
 800279e:	bd90      	pop	{r4, r7, pc}
 80027a0:	20000bbc 	.word	0x20000bbc

080027a4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	4603      	mov	r3, r0
 80027ac:	71fb      	strb	r3, [r7, #7]
 80027ae:	460b      	mov	r3, r1
 80027b0:	71bb      	strb	r3, [r7, #6]
 80027b2:	4613      	mov	r3, r2
 80027b4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80027b6:	79bb      	ldrb	r3, [r7, #6]
 80027b8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80027ba:	797b      	ldrb	r3, [r7, #5]
 80027bc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	b299      	uxth	r1, r3
 80027c2:	f107 020c 	add.w	r2, r7, #12
 80027c6:	230a      	movs	r3, #10
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	2302      	movs	r3, #2
 80027cc:	4803      	ldr	r0, [pc, #12]	@ (80027dc <ssd1306_I2C_Write+0x38>)
 80027ce:	f001 f981 	bl	8003ad4 <HAL_I2C_Master_Transmit>
}
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20000bbc 	.word	0x20000bbc

080027e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80027e6:	4b15      	ldr	r3, [pc, #84]	@ (800283c <HAL_MspInit+0x5c>)
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	4a14      	ldr	r2, [pc, #80]	@ (800283c <HAL_MspInit+0x5c>)
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	6193      	str	r3, [r2, #24]
 80027f2:	4b12      	ldr	r3, [pc, #72]	@ (800283c <HAL_MspInit+0x5c>)
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027fe:	4b0f      	ldr	r3, [pc, #60]	@ (800283c <HAL_MspInit+0x5c>)
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	4a0e      	ldr	r2, [pc, #56]	@ (800283c <HAL_MspInit+0x5c>)
 8002804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002808:	61d3      	str	r3, [r2, #28]
 800280a:	4b0c      	ldr	r3, [pc, #48]	@ (800283c <HAL_MspInit+0x5c>)
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002812:	607b      	str	r3, [r7, #4]
 8002814:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002816:	4b0a      	ldr	r3, [pc, #40]	@ (8002840 <HAL_MspInit+0x60>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	4a04      	ldr	r2, [pc, #16]	@ (8002840 <HAL_MspInit+0x60>)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002832:	bf00      	nop
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr
 800283c:	40021000 	.word	0x40021000
 8002840:	40010000 	.word	0x40010000

08002844 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08a      	sub	sp, #40	@ 0x28
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284c:	f107 0314 	add.w	r3, r7, #20
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a1d      	ldr	r2, [pc, #116]	@ (80028d4 <HAL_I2C_MspInit+0x90>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d132      	bne.n	80028ca <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002864:	4b1c      	ldr	r3, [pc, #112]	@ (80028d8 <HAL_I2C_MspInit+0x94>)
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	4a1b      	ldr	r2, [pc, #108]	@ (80028d8 <HAL_I2C_MspInit+0x94>)
 800286a:	f043 0308 	orr.w	r3, r3, #8
 800286e:	6193      	str	r3, [r2, #24]
 8002870:	4b19      	ldr	r3, [pc, #100]	@ (80028d8 <HAL_I2C_MspInit+0x94>)
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	f003 0308 	and.w	r3, r3, #8
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800287c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002882:	2312      	movs	r3, #18
 8002884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002886:	2303      	movs	r3, #3
 8002888:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800288a:	f107 0314 	add.w	r3, r7, #20
 800288e:	4619      	mov	r1, r3
 8002890:	4812      	ldr	r0, [pc, #72]	@ (80028dc <HAL_I2C_MspInit+0x98>)
 8002892:	f000 fe57 	bl	8003544 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002896:	4b12      	ldr	r3, [pc, #72]	@ (80028e0 <HAL_I2C_MspInit+0x9c>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	627b      	str	r3, [r7, #36]	@ 0x24
 800289c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80028a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80028a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a6:	f043 0302 	orr.w	r3, r3, #2
 80028aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ac:	4a0c      	ldr	r2, [pc, #48]	@ (80028e0 <HAL_I2C_MspInit+0x9c>)
 80028ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028b2:	4b09      	ldr	r3, [pc, #36]	@ (80028d8 <HAL_I2C_MspInit+0x94>)
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	4a08      	ldr	r2, [pc, #32]	@ (80028d8 <HAL_I2C_MspInit+0x94>)
 80028b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80028bc:	61d3      	str	r3, [r2, #28]
 80028be:	4b06      	ldr	r3, [pc, #24]	@ (80028d8 <HAL_I2C_MspInit+0x94>)
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80028ca:	bf00      	nop
 80028cc:	3728      	adds	r7, #40	@ 0x28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40005400 	.word	0x40005400
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40010c00 	.word	0x40010c00
 80028e0:	40010000 	.word	0x40010000

080028e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08c      	sub	sp, #48	@ 0x30
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ec:	f107 031c 	add.w	r3, r7, #28
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a41      	ldr	r2, [pc, #260]	@ (8002a04 <HAL_UART_MspInit+0x120>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d146      	bne.n	8002992 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002904:	4b40      	ldr	r3, [pc, #256]	@ (8002a08 <HAL_UART_MspInit+0x124>)
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	4a3f      	ldr	r2, [pc, #252]	@ (8002a08 <HAL_UART_MspInit+0x124>)
 800290a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800290e:	6193      	str	r3, [r2, #24]
 8002910:	4b3d      	ldr	r3, [pc, #244]	@ (8002a08 <HAL_UART_MspInit+0x124>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002918:	61bb      	str	r3, [r7, #24]
 800291a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800291c:	4b3a      	ldr	r3, [pc, #232]	@ (8002a08 <HAL_UART_MspInit+0x124>)
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	4a39      	ldr	r2, [pc, #228]	@ (8002a08 <HAL_UART_MspInit+0x124>)
 8002922:	f043 0308 	orr.w	r3, r3, #8
 8002926:	6193      	str	r3, [r2, #24]
 8002928:	4b37      	ldr	r3, [pc, #220]	@ (8002a08 <HAL_UART_MspInit+0x124>)
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002934:	2340      	movs	r3, #64	@ 0x40
 8002936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002938:	2302      	movs	r3, #2
 800293a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800293c:	2303      	movs	r3, #3
 800293e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002940:	f107 031c 	add.w	r3, r7, #28
 8002944:	4619      	mov	r1, r3
 8002946:	4831      	ldr	r0, [pc, #196]	@ (8002a0c <HAL_UART_MspInit+0x128>)
 8002948:	f000 fdfc 	bl	8003544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800294c:	2380      	movs	r3, #128	@ 0x80
 800294e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002950:	2300      	movs	r3, #0
 8002952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002958:	f107 031c 	add.w	r3, r7, #28
 800295c:	4619      	mov	r1, r3
 800295e:	482b      	ldr	r0, [pc, #172]	@ (8002a0c <HAL_UART_MspInit+0x128>)
 8002960:	f000 fdf0 	bl	8003544 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002964:	4b2a      	ldr	r3, [pc, #168]	@ (8002a10 <HAL_UART_MspInit+0x12c>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800296a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800296c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002970:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002974:	f043 0304 	orr.w	r3, r3, #4
 8002978:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800297a:	4a25      	ldr	r2, [pc, #148]	@ (8002a10 <HAL_UART_MspInit+0x12c>)
 800297c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800297e:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002980:	2200      	movs	r2, #0
 8002982:	2100      	movs	r1, #0
 8002984:	2025      	movs	r0, #37	@ 0x25
 8002986:	f000 fcf4 	bl	8003372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800298a:	2025      	movs	r0, #37	@ 0x25
 800298c:	f000 fd0d 	bl	80033aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002990:	e034      	b.n	80029fc <HAL_UART_MspInit+0x118>
  else if(huart->Instance==USART2)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a1f      	ldr	r2, [pc, #124]	@ (8002a14 <HAL_UART_MspInit+0x130>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d12f      	bne.n	80029fc <HAL_UART_MspInit+0x118>
    __HAL_RCC_USART2_CLK_ENABLE();
 800299c:	4b1a      	ldr	r3, [pc, #104]	@ (8002a08 <HAL_UART_MspInit+0x124>)
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	4a19      	ldr	r2, [pc, #100]	@ (8002a08 <HAL_UART_MspInit+0x124>)
 80029a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029a6:	61d3      	str	r3, [r2, #28]
 80029a8:	4b17      	ldr	r3, [pc, #92]	@ (8002a08 <HAL_UART_MspInit+0x124>)
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b4:	4b14      	ldr	r3, [pc, #80]	@ (8002a08 <HAL_UART_MspInit+0x124>)
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	4a13      	ldr	r2, [pc, #76]	@ (8002a08 <HAL_UART_MspInit+0x124>)
 80029ba:	f043 0304 	orr.w	r3, r3, #4
 80029be:	6193      	str	r3, [r2, #24]
 80029c0:	4b11      	ldr	r3, [pc, #68]	@ (8002a08 <HAL_UART_MspInit+0x124>)
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029cc:	2304      	movs	r3, #4
 80029ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d0:	2302      	movs	r3, #2
 80029d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029d4:	2303      	movs	r3, #3
 80029d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d8:	f107 031c 	add.w	r3, r7, #28
 80029dc:	4619      	mov	r1, r3
 80029de:	480e      	ldr	r0, [pc, #56]	@ (8002a18 <HAL_UART_MspInit+0x134>)
 80029e0:	f000 fdb0 	bl	8003544 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029e4:	2308      	movs	r3, #8
 80029e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029e8:	2300      	movs	r3, #0
 80029ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f0:	f107 031c 	add.w	r3, r7, #28
 80029f4:	4619      	mov	r1, r3
 80029f6:	4808      	ldr	r0, [pc, #32]	@ (8002a18 <HAL_UART_MspInit+0x134>)
 80029f8:	f000 fda4 	bl	8003544 <HAL_GPIO_Init>
}
 80029fc:	bf00      	nop
 80029fe:	3730      	adds	r7, #48	@ 0x30
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40013800 	.word	0x40013800
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40010c00 	.word	0x40010c00
 8002a10:	40010000 	.word	0x40010000
 8002a14:	40004400 	.word	0x40004400
 8002a18:	40010800 	.word	0x40010800

08002a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a20:	bf00      	nop
 8002a22:	e7fd      	b.n	8002a20 <NMI_Handler+0x4>

08002a24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a28:	bf00      	nop
 8002a2a:	e7fd      	b.n	8002a28 <HardFault_Handler+0x4>

08002a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a30:	bf00      	nop
 8002a32:	e7fd      	b.n	8002a30 <MemManage_Handler+0x4>

08002a34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a38:	bf00      	nop
 8002a3a:	e7fd      	b.n	8002a38 <BusFault_Handler+0x4>

08002a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a40:	bf00      	nop
 8002a42:	e7fd      	b.n	8002a40 <UsageFault_Handler+0x4>

08002a44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a48:	bf00      	nop
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr

08002a50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a54:	bf00      	nop
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a60:	bf00      	nop
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr

08002a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	 if(timeout >0)  timeout--;
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a9c <SysTick_Handler+0x34>)
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <SysTick_Handler+0x18>
 8002a74:	4b09      	ldr	r3, [pc, #36]	@ (8002a9c <SysTick_Handler+0x34>)
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	4b07      	ldr	r3, [pc, #28]	@ (8002a9c <SysTick_Handler+0x34>)
 8002a7e:	801a      	strh	r2, [r3, #0]
	 if (VCCTimeout>0) VCCTimeout--;
 8002a80:	4b07      	ldr	r3, [pc, #28]	@ (8002aa0 <SysTick_Handler+0x38>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	dd04      	ble.n	8002a92 <SysTick_Handler+0x2a>
 8002a88:	4b05      	ldr	r3, [pc, #20]	@ (8002aa0 <SysTick_Handler+0x38>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	4a04      	ldr	r2, [pc, #16]	@ (8002aa0 <SysTick_Handler+0x38>)
 8002a90:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a92:	f000 fb57 	bl	8003144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20000dd8 	.word	0x20000dd8
 8002aa0:	20000014 	.word	0x20000014

08002aa4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr (&huart1);
 8002aa8:	4803      	ldr	r0, [pc, #12]	@ (8002ab8 <USART1_IRQHandler+0x14>)
 8002aaa:	f000 fa81 	bl	8002fb0 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002aae:	4802      	ldr	r0, [pc, #8]	@ (8002ab8 <USART1_IRQHandler+0x14>)
 8002ab0:	f002 f97a 	bl	8004da8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ab4:	bf00      	nop
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	20000d0c 	.word	0x20000d0c

08002abc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return 1;
 8002ac0:	2301      	movs	r3, #1
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr

08002aca <_kill>:

int _kill(int pid, int sig)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ad4:	f004 fd46 	bl	8007564 <__errno>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2216      	movs	r2, #22
 8002adc:	601a      	str	r2, [r3, #0]
  return -1;
 8002ade:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <_exit>:

void _exit (int status)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002af2:	f04f 31ff 	mov.w	r1, #4294967295
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff ffe7 	bl	8002aca <_kill>
  while (1) {}    /* Make sure we hang here */
 8002afc:	bf00      	nop
 8002afe:	e7fd      	b.n	8002afc <_exit+0x12>

08002b00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	e00a      	b.n	8002b28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b12:	f3af 8000 	nop.w
 8002b16:	4601      	mov	r1, r0
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	60ba      	str	r2, [r7, #8]
 8002b1e:	b2ca      	uxtb	r2, r1
 8002b20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	3301      	adds	r3, #1
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	dbf0      	blt.n	8002b12 <_read+0x12>
  }

  return len;
 8002b30:	687b      	ldr	r3, [r7, #4]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b086      	sub	sp, #24
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	60f8      	str	r0, [r7, #12]
 8002b42:	60b9      	str	r1, [r7, #8]
 8002b44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	e009      	b.n	8002b60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	1c5a      	adds	r2, r3, #1
 8002b50:	60ba      	str	r2, [r7, #8]
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	dbf1      	blt.n	8002b4c <_write+0x12>
  }
  return len;
 8002b68:	687b      	ldr	r3, [r7, #4]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <_close>:

int _close(int file)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr

08002b88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b98:	605a      	str	r2, [r3, #4]
  return 0;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr

08002ba6 <_isatty>:

int _isatty(int file)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002bae:	2301      	movs	r3, #1
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr

08002bba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b085      	sub	sp, #20
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	60f8      	str	r0, [r7, #12]
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr
	...

08002bd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bdc:	4a14      	ldr	r2, [pc, #80]	@ (8002c30 <_sbrk+0x5c>)
 8002bde:	4b15      	ldr	r3, [pc, #84]	@ (8002c34 <_sbrk+0x60>)
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002be8:	4b13      	ldr	r3, [pc, #76]	@ (8002c38 <_sbrk+0x64>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d102      	bne.n	8002bf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bf0:	4b11      	ldr	r3, [pc, #68]	@ (8002c38 <_sbrk+0x64>)
 8002bf2:	4a12      	ldr	r2, [pc, #72]	@ (8002c3c <_sbrk+0x68>)
 8002bf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bf6:	4b10      	ldr	r3, [pc, #64]	@ (8002c38 <_sbrk+0x64>)
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d207      	bcs.n	8002c14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c04:	f004 fcae 	bl	8007564 <__errno>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	220c      	movs	r2, #12
 8002c0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c12:	e009      	b.n	8002c28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c14:	4b08      	ldr	r3, [pc, #32]	@ (8002c38 <_sbrk+0x64>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c1a:	4b07      	ldr	r3, [pc, #28]	@ (8002c38 <_sbrk+0x64>)
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4413      	add	r3, r2
 8002c22:	4a05      	ldr	r2, [pc, #20]	@ (8002c38 <_sbrk+0x64>)
 8002c24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c26:	68fb      	ldr	r3, [r7, #12]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	20005000 	.word	0x20005000
 8002c34:	00000400 	.word	0x00000400
 8002c38:	2000065c 	.word	0x2000065c
 8002c3c:	20000de0 	.word	0x20000de0

08002c40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr

08002c4c <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8002c50:	4b0c      	ldr	r3, [pc, #48]	@ (8002c84 <Ringbuf_init+0x38>)
 8002c52:	4a0d      	ldr	r2, [pc, #52]	@ (8002c88 <Ringbuf_init+0x3c>)
 8002c54:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8002c56:	4b0d      	ldr	r3, [pc, #52]	@ (8002c8c <Ringbuf_init+0x40>)
 8002c58:	4a0d      	ldr	r2, [pc, #52]	@ (8002c90 <Ringbuf_init+0x44>)
 8002c5a:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8002c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8002c94 <Ringbuf_init+0x48>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695a      	ldr	r2, [r3, #20]
 8002c62:	4b0c      	ldr	r3, [pc, #48]	@ (8002c94 <Ringbuf_init+0x48>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0201 	orr.w	r2, r2, #1
 8002c6a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8002c6c:	4b09      	ldr	r3, [pc, #36]	@ (8002c94 <Ringbuf_init+0x48>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	4b08      	ldr	r3, [pc, #32]	@ (8002c94 <Ringbuf_init+0x48>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0220 	orr.w	r2, r2, #32
 8002c7a:	60da      	str	r2, [r3, #12]
}
 8002c7c:	bf00      	nop
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr
 8002c84:	20000dd4 	.word	0x20000dd4
 8002c88:	20000660 	.word	0x20000660
 8002c8c:	20000dd0 	.word	0x20000dd0
 8002c90:	20000868 	.word	0x20000868
 8002c94:	20000d0c 	.word	0x20000d0c

08002c98 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	6039      	str	r1, [r7, #0]
 8002ca2:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002caa:	3301      	adds	r3, #1
 8002cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cb0:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d009      	beq.n	8002cd2 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	79f9      	ldrb	r1, [r7, #7]
 8002cc8:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  }
}
 8002cd2:	bf00      	nop
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr

08002cdc <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8002ce2:	4b13      	ldr	r3, [pc, #76]	@ (8002d30 <Uart_read+0x54>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002cea:	4b11      	ldr	r3, [pc, #68]	@ (8002d30 <Uart_read+0x54>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d102      	bne.n	8002cfc <Uart_read+0x20>
  {
    return -1;
 8002cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfa:	e013      	b.n	8002d24 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8002cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002d30 <Uart_read+0x54>)
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	4b0b      	ldr	r3, [pc, #44]	@ (8002d30 <Uart_read+0x54>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002d08:	5cd3      	ldrb	r3, [r2, r3]
 8002d0a:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8002d0c:	4b08      	ldr	r3, [pc, #32]	@ (8002d30 <Uart_read+0x54>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	4b06      	ldr	r3, [pc, #24]	@ (8002d30 <Uart_read+0x54>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d1e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    return c;
 8002d22:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	20000dd4 	.word	0x20000dd4

08002d34 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8002d38:	4b0a      	ldr	r3, [pc, #40]	@ (8002d64 <IsDataAvailable+0x30>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	4b08      	ldr	r3, [pc, #32]	@ (8002d64 <IsDataAvailable+0x30>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	20000dd4 	.word	0x20000dd4

08002d68 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d9c <Uart_peek+0x34>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002d74:	4b09      	ldr	r3, [pc, #36]	@ (8002d9c <Uart_peek+0x34>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d102      	bne.n	8002d86 <Uart_peek+0x1e>
  {
    return -1;
 8002d80:	f04f 33ff 	mov.w	r3, #4294967295
 8002d84:	e006      	b.n	8002d94 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8002d86:	4b05      	ldr	r3, [pc, #20]	@ (8002d9c <Uart_peek+0x34>)
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	4b04      	ldr	r3, [pc, #16]	@ (8002d9c <Uart_peek+0x34>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002d92:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bc80      	pop	{r7}
 8002d9a:	4770      	bx	lr
 8002d9c:	20000dd4 	.word	0x20000dd4

08002da0 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8002daa:	2300      	movs	r3, #0
 8002dac:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7fd f9ce 	bl	8000150 <strlen>
 8002db4:	4603      	mov	r3, r0
 8002db6:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8002dbc:	e01e      	b.n	8002dfc <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8002dbe:	4b36      	ldr	r3, [pc, #216]	@ (8002e98 <Copy_upto+0xf8>)
 8002dc0:	6819      	ldr	r1, [r3, #0]
 8002dc2:	4b35      	ldr	r3, [pc, #212]	@ (8002e98 <Copy_upto+0xf8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	6838      	ldr	r0, [r7, #0]
 8002dce:	4403      	add	r3, r0
 8002dd0:	5c8a      	ldrb	r2, [r1, r2]
 8002dd2:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8002dd4:	4b30      	ldr	r3, [pc, #192]	@ (8002e98 <Copy_upto+0xf8>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	4b2e      	ldr	r3, [pc, #184]	@ (8002e98 <Copy_upto+0xf8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002de6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
			indx++;
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	3301      	adds	r3, #1
 8002dee:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8002df0:	bf00      	nop
 8002df2:	f7ff ff9f 	bl	8002d34 <IsDataAvailable>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0fa      	beq.n	8002df2 <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8002dfc:	f7ff ffb4 	bl	8002d68 <Uart_peek>
 8002e00:	4601      	mov	r1, r0
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	4413      	add	r3, r2
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	4299      	cmp	r1, r3
 8002e0c:	d1d7      	bne.n	8002dbe <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8002e0e:	e027      	b.n	8002e60 <Copy_upto+0xc0>
	{
		so_far++;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	3301      	adds	r3, #1
 8002e14:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8002e16:	f7ff ff61 	bl	8002cdc <Uart_read>
 8002e1a:	4601      	mov	r1, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	613a      	str	r2, [r7, #16]
 8002e22:	461a      	mov	r2, r3
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	4413      	add	r3, r2
 8002e28:	b2ca      	uxtb	r2, r1
 8002e2a:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d101      	bne.n	8002e38 <Copy_upto+0x98>
 8002e34:	2301      	movs	r3, #1
 8002e36:	e02a      	b.n	8002e8e <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 8002e38:	4b18      	ldr	r3, [pc, #96]	@ (8002e9c <Copy_upto+0xfc>)
 8002e3a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002e3e:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8002e40:	bf00      	nop
 8002e42:	f7ff ff77 	bl	8002d34 <IsDataAvailable>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d103      	bne.n	8002e54 <Copy_upto+0xb4>
 8002e4c:	4b13      	ldr	r3, [pc, #76]	@ (8002e9c <Copy_upto+0xfc>)
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1f6      	bne.n	8002e42 <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8002e54:	4b11      	ldr	r3, [pc, #68]	@ (8002e9c <Copy_upto+0xfc>)
 8002e56:	881b      	ldrh	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <Copy_upto+0xc0>
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	e016      	b.n	8002e8e <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 8002e60:	f7ff ff82 	bl	8002d68 <Uart_peek>
 8002e64:	4601      	mov	r1, r0
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	4299      	cmp	r1, r3
 8002e70:	d0ce      	beq.n	8002e10 <Copy_upto+0x70>
	}

	if (so_far != len)
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d002      	beq.n	8002e80 <Copy_upto+0xe0>
	{
		so_far = 0;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]
		goto again;
 8002e7e:	e79d      	b.n	8002dbc <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d101      	bne.n	8002e8c <Copy_upto+0xec>
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e000      	b.n	8002e8e <Copy_upto+0xee>
	else return 0;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	20000dd4 	.word	0x20000dd4
 8002e9c:	20000dd8 	.word	0x20000dd8

08002ea0 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7fd f94f 	bl	8000150 <strlen>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8002eb6:	4b3c      	ldr	r3, [pc, #240]	@ (8002fa8 <Wait_for+0x108>)
 8002eb8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002ebc:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 8002ebe:	bf00      	nop
 8002ec0:	f7ff ff38 	bl	8002d34 <IsDataAvailable>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d103      	bne.n	8002ed2 <Wait_for+0x32>
 8002eca:	4b37      	ldr	r3, [pc, #220]	@ (8002fa8 <Wait_for+0x108>)
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f6      	bne.n	8002ec0 <Wait_for+0x20>
	if (timeout == 0) return 0;
 8002ed2:	4b35      	ldr	r3, [pc, #212]	@ (8002fa8 <Wait_for+0x108>)
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d119      	bne.n	8002f0e <Wait_for+0x6e>
 8002eda:	2300      	movs	r3, #0
 8002edc:	e060      	b.n	8002fa0 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8002ede:	4b33      	ldr	r3, [pc, #204]	@ (8002fac <Wait_for+0x10c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002ee6:	4b31      	ldr	r3, [pc, #196]	@ (8002fac <Wait_for+0x10c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d00b      	beq.n	8002f0a <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8002ef2:	4b2e      	ldr	r3, [pc, #184]	@ (8002fac <Wait_for+0x10c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	4b2b      	ldr	r3, [pc, #172]	@ (8002fac <Wait_for+0x10c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f04:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002f08:	e001      	b.n	8002f0e <Wait_for+0x6e>
		}

		else
		{
			return 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	e048      	b.n	8002fa0 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8002f0e:	f7ff ff2b 	bl	8002d68 <Uart_peek>
 8002f12:	4601      	mov	r1, r0
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	4413      	add	r3, r2
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	4299      	cmp	r1, r3
 8002f1e:	d1de      	bne.n	8002ede <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8002f20:	e027      	b.n	8002f72 <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	3301      	adds	r3, #1
 8002f26:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8002f28:	4b20      	ldr	r3, [pc, #128]	@ (8002fac <Wait_for+0x10c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	4b1e      	ldr	r3, [pc, #120]	@ (8002fac <Wait_for+0x10c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f3a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
		if (so_far == len) return 1;
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d101      	bne.n	8002f4a <Wait_for+0xaa>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e02a      	b.n	8002fa0 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 8002f4a:	4b17      	ldr	r3, [pc, #92]	@ (8002fa8 <Wait_for+0x108>)
 8002f4c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002f50:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8002f52:	bf00      	nop
 8002f54:	f7ff feee 	bl	8002d34 <IsDataAvailable>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d103      	bne.n	8002f66 <Wait_for+0xc6>
 8002f5e:	4b12      	ldr	r3, [pc, #72]	@ (8002fa8 <Wait_for+0x108>)
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f6      	bne.n	8002f54 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 8002f66:	4b10      	ldr	r3, [pc, #64]	@ (8002fa8 <Wait_for+0x108>)
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <Wait_for+0xd2>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	e016      	b.n	8002fa0 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8002f72:	f7ff fef9 	bl	8002d68 <Uart_peek>
 8002f76:	4601      	mov	r1, r0
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	4299      	cmp	r1, r3
 8002f82:	d0ce      	beq.n	8002f22 <Wait_for+0x82>
	}

	if (so_far != len)
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d002      	beq.n	8002f92 <Wait_for+0xf2>
	{
		so_far = 0;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60fb      	str	r3, [r7, #12]
		goto again;
 8002f90:	e791      	b.n	8002eb6 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d101      	bne.n	8002f9e <Wait_for+0xfe>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <Wait_for+0x100>
	else return 0;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20000dd8 	.word	0x20000dd8
 8002fac:	20000dd4 	.word	0x20000dd4

08002fb0 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f003 0320 	and.w	r3, r3, #32
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d013      	beq.n	8002ffa <Uart_isr+0x4a>
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	f003 0320 	and.w	r3, r3, #32
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00e      	beq.n	8002ffa <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8002fea:	4b1e      	ldr	r3, [pc, #120]	@ (8003064 <Uart_isr+0xb4>)
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	7bfb      	ldrb	r3, [r7, #15]
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fe50 	bl	8002c98 <store_char>
        return;
 8002ff8:	e031      	b.n	800305e <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003000:	2b00      	cmp	r3, #0
 8003002:	d02c      	beq.n	800305e <Uart_isr+0xae>
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800300a:	2b00      	cmp	r3, #0
 800300c:	d027      	beq.n	800305e <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 800300e:	4b16      	ldr	r3, [pc, #88]	@ (8003068 <Uart_isr+0xb8>)
 8003010:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8003014:	4b14      	ldr	r3, [pc, #80]	@ (8003068 <Uart_isr+0xb8>)
 8003016:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800301a:	429a      	cmp	r2, r3
 800301c:	d108      	bne.n	8003030 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800302c:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 800302e:	e015      	b.n	800305c <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8003030:	4b0d      	ldr	r3, [pc, #52]	@ (8003068 <Uart_isr+0xb8>)
 8003032:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8003036:	4a0c      	ldr	r2, [pc, #48]	@ (8003068 <Uart_isr+0xb8>)
 8003038:	5cd3      	ldrb	r3, [r2, r3]
 800303a:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 800303c:	4b0a      	ldr	r3, [pc, #40]	@ (8003068 <Uart_isr+0xb8>)
 800303e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8003042:	3301      	adds	r3, #1
 8003044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003048:	4a07      	ldr	r2, [pc, #28]	@ (8003068 <Uart_isr+0xb8>)
 800304a:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
    	      huart->Instance->SR;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	7bba      	ldrb	r2, [r7, #14]
 800305a:	605a      	str	r2, [r3, #4]
    	return;
 800305c:	bf00      	nop
    }
}
 800305e:	3718      	adds	r7, #24
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	20000dd4 	.word	0x20000dd4
 8003068:	20000868 	.word	0x20000868

0800306c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800306c:	f7ff fde8 	bl	8002c40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003070:	480b      	ldr	r0, [pc, #44]	@ (80030a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003072:	490c      	ldr	r1, [pc, #48]	@ (80030a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003074:	4a0c      	ldr	r2, [pc, #48]	@ (80030a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003078:	e002      	b.n	8003080 <LoopCopyDataInit>

0800307a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800307a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800307c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800307e:	3304      	adds	r3, #4

08003080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003084:	d3f9      	bcc.n	800307a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003086:	4a09      	ldr	r2, [pc, #36]	@ (80030ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003088:	4c09      	ldr	r4, [pc, #36]	@ (80030b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800308a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800308c:	e001      	b.n	8003092 <LoopFillZerobss>

0800308e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800308e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003090:	3204      	adds	r2, #4

08003092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003094:	d3fb      	bcc.n	800308e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003096:	f004 fa6b 	bl	8007570 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800309a:	f7fe feaf 	bl	8001dfc <main>
  bx lr
 800309e:	4770      	bx	lr
  ldr r0, =_sdata
 80030a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030a4:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80030a8:	0800c740 	.word	0x0800c740
  ldr r2, =_sbss
 80030ac:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80030b0:	20000de0 	.word	0x20000de0

080030b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030b4:	e7fe      	b.n	80030b4 <ADC1_2_IRQHandler>
	...

080030b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030bc:	4b08      	ldr	r3, [pc, #32]	@ (80030e0 <HAL_Init+0x28>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a07      	ldr	r2, [pc, #28]	@ (80030e0 <HAL_Init+0x28>)
 80030c2:	f043 0310 	orr.w	r3, r3, #16
 80030c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030c8:	2003      	movs	r0, #3
 80030ca:	f000 f947 	bl	800335c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030ce:	200f      	movs	r0, #15
 80030d0:	f000 f808 	bl	80030e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030d4:	f7ff fb84 	bl	80027e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40022000 	.word	0x40022000

080030e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030ec:	4b12      	ldr	r3, [pc, #72]	@ (8003138 <HAL_InitTick+0x54>)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	4b12      	ldr	r3, [pc, #72]	@ (800313c <HAL_InitTick+0x58>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	4619      	mov	r1, r3
 80030f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80030fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003102:	4618      	mov	r0, r3
 8003104:	f000 f95f 	bl	80033c6 <HAL_SYSTICK_Config>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e00e      	b.n	8003130 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b0f      	cmp	r3, #15
 8003116:	d80a      	bhi.n	800312e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003118:	2200      	movs	r2, #0
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	f04f 30ff 	mov.w	r0, #4294967295
 8003120:	f000 f927 	bl	8003372 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003124:	4a06      	ldr	r2, [pc, #24]	@ (8003140 <HAL_InitTick+0x5c>)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	e000      	b.n	8003130 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
}
 8003130:	4618      	mov	r0, r3
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	20000018 	.word	0x20000018
 800313c:	20000020 	.word	0x20000020
 8003140:	2000001c 	.word	0x2000001c

08003144 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003148:	4b05      	ldr	r3, [pc, #20]	@ (8003160 <HAL_IncTick+0x1c>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	461a      	mov	r2, r3
 800314e:	4b05      	ldr	r3, [pc, #20]	@ (8003164 <HAL_IncTick+0x20>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4413      	add	r3, r2
 8003154:	4a03      	ldr	r2, [pc, #12]	@ (8003164 <HAL_IncTick+0x20>)
 8003156:	6013      	str	r3, [r2, #0]
}
 8003158:	bf00      	nop
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr
 8003160:	20000020 	.word	0x20000020
 8003164:	20000ddc 	.word	0x20000ddc

08003168 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  return uwTick;
 800316c:	4b02      	ldr	r3, [pc, #8]	@ (8003178 <HAL_GetTick+0x10>)
 800316e:	681b      	ldr	r3, [r3, #0]
}
 8003170:	4618      	mov	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr
 8003178:	20000ddc 	.word	0x20000ddc

0800317c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003184:	f7ff fff0 	bl	8003168 <HAL_GetTick>
 8003188:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003194:	d005      	beq.n	80031a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003196:	4b0a      	ldr	r3, [pc, #40]	@ (80031c0 <HAL_Delay+0x44>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4413      	add	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031a2:	bf00      	nop
 80031a4:	f7ff ffe0 	bl	8003168 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d8f7      	bhi.n	80031a4 <HAL_Delay+0x28>
  {
  }
}
 80031b4:	bf00      	nop
 80031b6:	bf00      	nop
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	20000020 	.word	0x20000020

080031c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003208 <__NVIC_SetPriorityGrouping+0x44>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031e0:	4013      	ands	r3, r2
 80031e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031f6:	4a04      	ldr	r2, [pc, #16]	@ (8003208 <__NVIC_SetPriorityGrouping+0x44>)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	60d3      	str	r3, [r2, #12]
}
 80031fc:	bf00      	nop
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	bc80      	pop	{r7}
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	e000ed00 	.word	0xe000ed00

0800320c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003210:	4b04      	ldr	r3, [pc, #16]	@ (8003224 <__NVIC_GetPriorityGrouping+0x18>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	0a1b      	lsrs	r3, r3, #8
 8003216:	f003 0307 	and.w	r3, r3, #7
}
 800321a:	4618      	mov	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003236:	2b00      	cmp	r3, #0
 8003238:	db0b      	blt.n	8003252 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	f003 021f 	and.w	r2, r3, #31
 8003240:	4906      	ldr	r1, [pc, #24]	@ (800325c <__NVIC_EnableIRQ+0x34>)
 8003242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	2001      	movs	r0, #1
 800324a:	fa00 f202 	lsl.w	r2, r0, r2
 800324e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr
 800325c:	e000e100 	.word	0xe000e100

08003260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	6039      	str	r1, [r7, #0]
 800326a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800326c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003270:	2b00      	cmp	r3, #0
 8003272:	db0a      	blt.n	800328a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	b2da      	uxtb	r2, r3
 8003278:	490c      	ldr	r1, [pc, #48]	@ (80032ac <__NVIC_SetPriority+0x4c>)
 800327a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327e:	0112      	lsls	r2, r2, #4
 8003280:	b2d2      	uxtb	r2, r2
 8003282:	440b      	add	r3, r1
 8003284:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003288:	e00a      	b.n	80032a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	b2da      	uxtb	r2, r3
 800328e:	4908      	ldr	r1, [pc, #32]	@ (80032b0 <__NVIC_SetPriority+0x50>)
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	3b04      	subs	r3, #4
 8003298:	0112      	lsls	r2, r2, #4
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	440b      	add	r3, r1
 800329e:	761a      	strb	r2, [r3, #24]
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bc80      	pop	{r7}
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	e000e100 	.word	0xe000e100
 80032b0:	e000ed00 	.word	0xe000ed00

080032b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b089      	sub	sp, #36	@ 0x24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f1c3 0307 	rsb	r3, r3, #7
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	bf28      	it	cs
 80032d2:	2304      	movcs	r3, #4
 80032d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	3304      	adds	r3, #4
 80032da:	2b06      	cmp	r3, #6
 80032dc:	d902      	bls.n	80032e4 <NVIC_EncodePriority+0x30>
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	3b03      	subs	r3, #3
 80032e2:	e000      	b.n	80032e6 <NVIC_EncodePriority+0x32>
 80032e4:	2300      	movs	r3, #0
 80032e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e8:	f04f 32ff 	mov.w	r2, #4294967295
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	43da      	mvns	r2, r3
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	401a      	ands	r2, r3
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	fa01 f303 	lsl.w	r3, r1, r3
 8003306:	43d9      	mvns	r1, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800330c:	4313      	orrs	r3, r2
         );
}
 800330e:	4618      	mov	r0, r3
 8003310:	3724      	adds	r7, #36	@ 0x24
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr

08003318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3b01      	subs	r3, #1
 8003324:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003328:	d301      	bcc.n	800332e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800332a:	2301      	movs	r3, #1
 800332c:	e00f      	b.n	800334e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800332e:	4a0a      	ldr	r2, [pc, #40]	@ (8003358 <SysTick_Config+0x40>)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3b01      	subs	r3, #1
 8003334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003336:	210f      	movs	r1, #15
 8003338:	f04f 30ff 	mov.w	r0, #4294967295
 800333c:	f7ff ff90 	bl	8003260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003340:	4b05      	ldr	r3, [pc, #20]	@ (8003358 <SysTick_Config+0x40>)
 8003342:	2200      	movs	r2, #0
 8003344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003346:	4b04      	ldr	r3, [pc, #16]	@ (8003358 <SysTick_Config+0x40>)
 8003348:	2207      	movs	r2, #7
 800334a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	e000e010 	.word	0xe000e010

0800335c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff ff2d 	bl	80031c4 <__NVIC_SetPriorityGrouping>
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003372:	b580      	push	{r7, lr}
 8003374:	b086      	sub	sp, #24
 8003376:	af00      	add	r7, sp, #0
 8003378:	4603      	mov	r3, r0
 800337a:	60b9      	str	r1, [r7, #8]
 800337c:	607a      	str	r2, [r7, #4]
 800337e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003380:	2300      	movs	r3, #0
 8003382:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003384:	f7ff ff42 	bl	800320c <__NVIC_GetPriorityGrouping>
 8003388:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	68b9      	ldr	r1, [r7, #8]
 800338e:	6978      	ldr	r0, [r7, #20]
 8003390:	f7ff ff90 	bl	80032b4 <NVIC_EncodePriority>
 8003394:	4602      	mov	r2, r0
 8003396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800339a:	4611      	mov	r1, r2
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff ff5f 	bl	8003260 <__NVIC_SetPriority>
}
 80033a2:	bf00      	nop
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b082      	sub	sp, #8
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	4603      	mov	r3, r0
 80033b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff ff35 	bl	8003228 <__NVIC_EnableIRQ>
}
 80033be:	bf00      	nop
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b082      	sub	sp, #8
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7ff ffa2 	bl	8003318 <SysTick_Config>
 80033d4:	4603      	mov	r3, r0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033de:	b480      	push	{r7}
 80033e0:	b085      	sub	sp, #20
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033e6:	2300      	movs	r3, #0
 80033e8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d008      	beq.n	8003408 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2204      	movs	r2, #4
 80033fa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e020      	b.n	800344a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 020e 	bic.w	r2, r2, #14
 8003416:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0201 	bic.w	r2, r2, #1
 8003426:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003430:	2101      	movs	r1, #1
 8003432:	fa01 f202 	lsl.w	r2, r1, r2
 8003436:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003448:	7bfb      	ldrb	r3, [r7, #15]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3714      	adds	r7, #20
 800344e:	46bd      	mov	sp, r7
 8003450:	bc80      	pop	{r7}
 8003452:	4770      	bx	lr

08003454 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d005      	beq.n	8003478 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2204      	movs	r2, #4
 8003470:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	73fb      	strb	r3, [r7, #15]
 8003476:	e051      	b.n	800351c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 020e 	bic.w	r2, r2, #14
 8003486:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0201 	bic.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a22      	ldr	r2, [pc, #136]	@ (8003528 <HAL_DMA_Abort_IT+0xd4>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d029      	beq.n	80034f6 <HAL_DMA_Abort_IT+0xa2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a21      	ldr	r2, [pc, #132]	@ (800352c <HAL_DMA_Abort_IT+0xd8>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d022      	beq.n	80034f2 <HAL_DMA_Abort_IT+0x9e>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a1f      	ldr	r2, [pc, #124]	@ (8003530 <HAL_DMA_Abort_IT+0xdc>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d01a      	beq.n	80034ec <HAL_DMA_Abort_IT+0x98>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1e      	ldr	r2, [pc, #120]	@ (8003534 <HAL_DMA_Abort_IT+0xe0>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d012      	beq.n	80034e6 <HAL_DMA_Abort_IT+0x92>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003538 <HAL_DMA_Abort_IT+0xe4>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00a      	beq.n	80034e0 <HAL_DMA_Abort_IT+0x8c>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1b      	ldr	r2, [pc, #108]	@ (800353c <HAL_DMA_Abort_IT+0xe8>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d102      	bne.n	80034da <HAL_DMA_Abort_IT+0x86>
 80034d4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80034d8:	e00e      	b.n	80034f8 <HAL_DMA_Abort_IT+0xa4>
 80034da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034de:	e00b      	b.n	80034f8 <HAL_DMA_Abort_IT+0xa4>
 80034e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80034e4:	e008      	b.n	80034f8 <HAL_DMA_Abort_IT+0xa4>
 80034e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034ea:	e005      	b.n	80034f8 <HAL_DMA_Abort_IT+0xa4>
 80034ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034f0:	e002      	b.n	80034f8 <HAL_DMA_Abort_IT+0xa4>
 80034f2:	2310      	movs	r3, #16
 80034f4:	e000      	b.n	80034f8 <HAL_DMA_Abort_IT+0xa4>
 80034f6:	2301      	movs	r3, #1
 80034f8:	4a11      	ldr	r2, [pc, #68]	@ (8003540 <HAL_DMA_Abort_IT+0xec>)
 80034fa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	4798      	blx	r3
    } 
  }
  return status;
 800351c:	7bfb      	ldrb	r3, [r7, #15]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40020008 	.word	0x40020008
 800352c:	4002001c 	.word	0x4002001c
 8003530:	40020030 	.word	0x40020030
 8003534:	40020044 	.word	0x40020044
 8003538:	40020058 	.word	0x40020058
 800353c:	4002006c 	.word	0x4002006c
 8003540:	40020000 	.word	0x40020000

08003544 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003544:	b480      	push	{r7}
 8003546:	b08b      	sub	sp, #44	@ 0x2c
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800354e:	2300      	movs	r3, #0
 8003550:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003552:	2300      	movs	r3, #0
 8003554:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003556:	e169      	b.n	800382c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003558:	2201      	movs	r2, #1
 800355a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	69fa      	ldr	r2, [r7, #28]
 8003568:	4013      	ands	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	429a      	cmp	r2, r3
 8003572:	f040 8158 	bne.w	8003826 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	4a9a      	ldr	r2, [pc, #616]	@ (80037e4 <HAL_GPIO_Init+0x2a0>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d05e      	beq.n	800363e <HAL_GPIO_Init+0xfa>
 8003580:	4a98      	ldr	r2, [pc, #608]	@ (80037e4 <HAL_GPIO_Init+0x2a0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d875      	bhi.n	8003672 <HAL_GPIO_Init+0x12e>
 8003586:	4a98      	ldr	r2, [pc, #608]	@ (80037e8 <HAL_GPIO_Init+0x2a4>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d058      	beq.n	800363e <HAL_GPIO_Init+0xfa>
 800358c:	4a96      	ldr	r2, [pc, #600]	@ (80037e8 <HAL_GPIO_Init+0x2a4>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d86f      	bhi.n	8003672 <HAL_GPIO_Init+0x12e>
 8003592:	4a96      	ldr	r2, [pc, #600]	@ (80037ec <HAL_GPIO_Init+0x2a8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d052      	beq.n	800363e <HAL_GPIO_Init+0xfa>
 8003598:	4a94      	ldr	r2, [pc, #592]	@ (80037ec <HAL_GPIO_Init+0x2a8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d869      	bhi.n	8003672 <HAL_GPIO_Init+0x12e>
 800359e:	4a94      	ldr	r2, [pc, #592]	@ (80037f0 <HAL_GPIO_Init+0x2ac>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d04c      	beq.n	800363e <HAL_GPIO_Init+0xfa>
 80035a4:	4a92      	ldr	r2, [pc, #584]	@ (80037f0 <HAL_GPIO_Init+0x2ac>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d863      	bhi.n	8003672 <HAL_GPIO_Init+0x12e>
 80035aa:	4a92      	ldr	r2, [pc, #584]	@ (80037f4 <HAL_GPIO_Init+0x2b0>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d046      	beq.n	800363e <HAL_GPIO_Init+0xfa>
 80035b0:	4a90      	ldr	r2, [pc, #576]	@ (80037f4 <HAL_GPIO_Init+0x2b0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d85d      	bhi.n	8003672 <HAL_GPIO_Init+0x12e>
 80035b6:	2b12      	cmp	r3, #18
 80035b8:	d82a      	bhi.n	8003610 <HAL_GPIO_Init+0xcc>
 80035ba:	2b12      	cmp	r3, #18
 80035bc:	d859      	bhi.n	8003672 <HAL_GPIO_Init+0x12e>
 80035be:	a201      	add	r2, pc, #4	@ (adr r2, 80035c4 <HAL_GPIO_Init+0x80>)
 80035c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c4:	0800363f 	.word	0x0800363f
 80035c8:	08003619 	.word	0x08003619
 80035cc:	0800362b 	.word	0x0800362b
 80035d0:	0800366d 	.word	0x0800366d
 80035d4:	08003673 	.word	0x08003673
 80035d8:	08003673 	.word	0x08003673
 80035dc:	08003673 	.word	0x08003673
 80035e0:	08003673 	.word	0x08003673
 80035e4:	08003673 	.word	0x08003673
 80035e8:	08003673 	.word	0x08003673
 80035ec:	08003673 	.word	0x08003673
 80035f0:	08003673 	.word	0x08003673
 80035f4:	08003673 	.word	0x08003673
 80035f8:	08003673 	.word	0x08003673
 80035fc:	08003673 	.word	0x08003673
 8003600:	08003673 	.word	0x08003673
 8003604:	08003673 	.word	0x08003673
 8003608:	08003621 	.word	0x08003621
 800360c:	08003635 	.word	0x08003635
 8003610:	4a79      	ldr	r2, [pc, #484]	@ (80037f8 <HAL_GPIO_Init+0x2b4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d013      	beq.n	800363e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003616:	e02c      	b.n	8003672 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	623b      	str	r3, [r7, #32]
          break;
 800361e:	e029      	b.n	8003674 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	3304      	adds	r3, #4
 8003626:	623b      	str	r3, [r7, #32]
          break;
 8003628:	e024      	b.n	8003674 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	3308      	adds	r3, #8
 8003630:	623b      	str	r3, [r7, #32]
          break;
 8003632:	e01f      	b.n	8003674 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	330c      	adds	r3, #12
 800363a:	623b      	str	r3, [r7, #32]
          break;
 800363c:	e01a      	b.n	8003674 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d102      	bne.n	800364c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003646:	2304      	movs	r3, #4
 8003648:	623b      	str	r3, [r7, #32]
          break;
 800364a:	e013      	b.n	8003674 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d105      	bne.n	8003660 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003654:	2308      	movs	r3, #8
 8003656:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	69fa      	ldr	r2, [r7, #28]
 800365c:	611a      	str	r2, [r3, #16]
          break;
 800365e:	e009      	b.n	8003674 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003660:	2308      	movs	r3, #8
 8003662:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	69fa      	ldr	r2, [r7, #28]
 8003668:	615a      	str	r2, [r3, #20]
          break;
 800366a:	e003      	b.n	8003674 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800366c:	2300      	movs	r3, #0
 800366e:	623b      	str	r3, [r7, #32]
          break;
 8003670:	e000      	b.n	8003674 <HAL_GPIO_Init+0x130>
          break;
 8003672:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	2bff      	cmp	r3, #255	@ 0xff
 8003678:	d801      	bhi.n	800367e <HAL_GPIO_Init+0x13a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	e001      	b.n	8003682 <HAL_GPIO_Init+0x13e>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3304      	adds	r3, #4
 8003682:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	2bff      	cmp	r3, #255	@ 0xff
 8003688:	d802      	bhi.n	8003690 <HAL_GPIO_Init+0x14c>
 800368a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	e002      	b.n	8003696 <HAL_GPIO_Init+0x152>
 8003690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003692:	3b08      	subs	r3, #8
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	210f      	movs	r1, #15
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	fa01 f303 	lsl.w	r3, r1, r3
 80036a4:	43db      	mvns	r3, r3
 80036a6:	401a      	ands	r2, r3
 80036a8:	6a39      	ldr	r1, [r7, #32]
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	fa01 f303 	lsl.w	r3, r1, r3
 80036b0:	431a      	orrs	r2, r3
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 80b1 	beq.w	8003826 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80036c4:	4b4d      	ldr	r3, [pc, #308]	@ (80037fc <HAL_GPIO_Init+0x2b8>)
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	4a4c      	ldr	r2, [pc, #304]	@ (80037fc <HAL_GPIO_Init+0x2b8>)
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	6193      	str	r3, [r2, #24]
 80036d0:	4b4a      	ldr	r3, [pc, #296]	@ (80037fc <HAL_GPIO_Init+0x2b8>)
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	60bb      	str	r3, [r7, #8]
 80036da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80036dc:	4a48      	ldr	r2, [pc, #288]	@ (8003800 <HAL_GPIO_Init+0x2bc>)
 80036de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e0:	089b      	lsrs	r3, r3, #2
 80036e2:	3302      	adds	r3, #2
 80036e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80036ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ec:	f003 0303 	and.w	r3, r3, #3
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	220f      	movs	r2, #15
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	4013      	ands	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a40      	ldr	r2, [pc, #256]	@ (8003804 <HAL_GPIO_Init+0x2c0>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d013      	beq.n	8003730 <HAL_GPIO_Init+0x1ec>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a3f      	ldr	r2, [pc, #252]	@ (8003808 <HAL_GPIO_Init+0x2c4>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d00d      	beq.n	800372c <HAL_GPIO_Init+0x1e8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a3e      	ldr	r2, [pc, #248]	@ (800380c <HAL_GPIO_Init+0x2c8>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d007      	beq.n	8003728 <HAL_GPIO_Init+0x1e4>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a3d      	ldr	r2, [pc, #244]	@ (8003810 <HAL_GPIO_Init+0x2cc>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d101      	bne.n	8003724 <HAL_GPIO_Init+0x1e0>
 8003720:	2303      	movs	r3, #3
 8003722:	e006      	b.n	8003732 <HAL_GPIO_Init+0x1ee>
 8003724:	2304      	movs	r3, #4
 8003726:	e004      	b.n	8003732 <HAL_GPIO_Init+0x1ee>
 8003728:	2302      	movs	r3, #2
 800372a:	e002      	b.n	8003732 <HAL_GPIO_Init+0x1ee>
 800372c:	2301      	movs	r3, #1
 800372e:	e000      	b.n	8003732 <HAL_GPIO_Init+0x1ee>
 8003730:	2300      	movs	r3, #0
 8003732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003734:	f002 0203 	and.w	r2, r2, #3
 8003738:	0092      	lsls	r2, r2, #2
 800373a:	4093      	lsls	r3, r2
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003742:	492f      	ldr	r1, [pc, #188]	@ (8003800 <HAL_GPIO_Init+0x2bc>)
 8003744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003746:	089b      	lsrs	r3, r3, #2
 8003748:	3302      	adds	r3, #2
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d006      	beq.n	800376a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800375c:	4b2d      	ldr	r3, [pc, #180]	@ (8003814 <HAL_GPIO_Init+0x2d0>)
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	492c      	ldr	r1, [pc, #176]	@ (8003814 <HAL_GPIO_Init+0x2d0>)
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	4313      	orrs	r3, r2
 8003766:	608b      	str	r3, [r1, #8]
 8003768:	e006      	b.n	8003778 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800376a:	4b2a      	ldr	r3, [pc, #168]	@ (8003814 <HAL_GPIO_Init+0x2d0>)
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	43db      	mvns	r3, r3
 8003772:	4928      	ldr	r1, [pc, #160]	@ (8003814 <HAL_GPIO_Init+0x2d0>)
 8003774:	4013      	ands	r3, r2
 8003776:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d006      	beq.n	8003792 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003784:	4b23      	ldr	r3, [pc, #140]	@ (8003814 <HAL_GPIO_Init+0x2d0>)
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	4922      	ldr	r1, [pc, #136]	@ (8003814 <HAL_GPIO_Init+0x2d0>)
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	4313      	orrs	r3, r2
 800378e:	60cb      	str	r3, [r1, #12]
 8003790:	e006      	b.n	80037a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003792:	4b20      	ldr	r3, [pc, #128]	@ (8003814 <HAL_GPIO_Init+0x2d0>)
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	43db      	mvns	r3, r3
 800379a:	491e      	ldr	r1, [pc, #120]	@ (8003814 <HAL_GPIO_Init+0x2d0>)
 800379c:	4013      	ands	r3, r2
 800379e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d006      	beq.n	80037ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80037ac:	4b19      	ldr	r3, [pc, #100]	@ (8003814 <HAL_GPIO_Init+0x2d0>)
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	4918      	ldr	r1, [pc, #96]	@ (8003814 <HAL_GPIO_Init+0x2d0>)
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	604b      	str	r3, [r1, #4]
 80037b8:	e006      	b.n	80037c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80037ba:	4b16      	ldr	r3, [pc, #88]	@ (8003814 <HAL_GPIO_Init+0x2d0>)
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	43db      	mvns	r3, r3
 80037c2:	4914      	ldr	r1, [pc, #80]	@ (8003814 <HAL_GPIO_Init+0x2d0>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d021      	beq.n	8003818 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80037d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003814 <HAL_GPIO_Init+0x2d0>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	490e      	ldr	r1, [pc, #56]	@ (8003814 <HAL_GPIO_Init+0x2d0>)
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	4313      	orrs	r3, r2
 80037de:	600b      	str	r3, [r1, #0]
 80037e0:	e021      	b.n	8003826 <HAL_GPIO_Init+0x2e2>
 80037e2:	bf00      	nop
 80037e4:	10320000 	.word	0x10320000
 80037e8:	10310000 	.word	0x10310000
 80037ec:	10220000 	.word	0x10220000
 80037f0:	10210000 	.word	0x10210000
 80037f4:	10120000 	.word	0x10120000
 80037f8:	10110000 	.word	0x10110000
 80037fc:	40021000 	.word	0x40021000
 8003800:	40010000 	.word	0x40010000
 8003804:	40010800 	.word	0x40010800
 8003808:	40010c00 	.word	0x40010c00
 800380c:	40011000 	.word	0x40011000
 8003810:	40011400 	.word	0x40011400
 8003814:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003818:	4b0b      	ldr	r3, [pc, #44]	@ (8003848 <HAL_GPIO_Init+0x304>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	43db      	mvns	r3, r3
 8003820:	4909      	ldr	r1, [pc, #36]	@ (8003848 <HAL_GPIO_Init+0x304>)
 8003822:	4013      	ands	r3, r2
 8003824:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003828:	3301      	adds	r3, #1
 800382a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003832:	fa22 f303 	lsr.w	r3, r2, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	f47f ae8e 	bne.w	8003558 <HAL_GPIO_Init+0x14>
  }
}
 800383c:	bf00      	nop
 800383e:	bf00      	nop
 8003840:	372c      	adds	r7, #44	@ 0x2c
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr
 8003848:	40010400 	.word	0x40010400

0800384c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e12b      	b.n	8003ab6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d106      	bne.n	8003878 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7fe ffe6 	bl	8002844 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2224      	movs	r2, #36	@ 0x24
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0201 	bic.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800389e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038b0:	f001 f960 	bl	8004b74 <HAL_RCC_GetPCLK1Freq>
 80038b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	4a81      	ldr	r2, [pc, #516]	@ (8003ac0 <HAL_I2C_Init+0x274>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d807      	bhi.n	80038d0 <HAL_I2C_Init+0x84>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4a80      	ldr	r2, [pc, #512]	@ (8003ac4 <HAL_I2C_Init+0x278>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	bf94      	ite	ls
 80038c8:	2301      	movls	r3, #1
 80038ca:	2300      	movhi	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	e006      	b.n	80038de <HAL_I2C_Init+0x92>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4a7d      	ldr	r2, [pc, #500]	@ (8003ac8 <HAL_I2C_Init+0x27c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	bf94      	ite	ls
 80038d8:	2301      	movls	r3, #1
 80038da:	2300      	movhi	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e0e7      	b.n	8003ab6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4a78      	ldr	r2, [pc, #480]	@ (8003acc <HAL_I2C_Init+0x280>)
 80038ea:	fba2 2303 	umull	r2, r3, r2, r3
 80038ee:	0c9b      	lsrs	r3, r3, #18
 80038f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	430a      	orrs	r2, r1
 8003904:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	4a6a      	ldr	r2, [pc, #424]	@ (8003ac0 <HAL_I2C_Init+0x274>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d802      	bhi.n	8003920 <HAL_I2C_Init+0xd4>
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	3301      	adds	r3, #1
 800391e:	e009      	b.n	8003934 <HAL_I2C_Init+0xe8>
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003926:	fb02 f303 	mul.w	r3, r2, r3
 800392a:	4a69      	ldr	r2, [pc, #420]	@ (8003ad0 <HAL_I2C_Init+0x284>)
 800392c:	fba2 2303 	umull	r2, r3, r2, r3
 8003930:	099b      	lsrs	r3, r3, #6
 8003932:	3301      	adds	r3, #1
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6812      	ldr	r2, [r2, #0]
 8003938:	430b      	orrs	r3, r1
 800393a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003946:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	495c      	ldr	r1, [pc, #368]	@ (8003ac0 <HAL_I2C_Init+0x274>)
 8003950:	428b      	cmp	r3, r1
 8003952:	d819      	bhi.n	8003988 <HAL_I2C_Init+0x13c>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	1e59      	subs	r1, r3, #1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003962:	1c59      	adds	r1, r3, #1
 8003964:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003968:	400b      	ands	r3, r1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <HAL_I2C_Init+0x138>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	1e59      	subs	r1, r3, #1
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	fbb1 f3f3 	udiv	r3, r1, r3
 800397c:	3301      	adds	r3, #1
 800397e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003982:	e051      	b.n	8003a28 <HAL_I2C_Init+0x1dc>
 8003984:	2304      	movs	r3, #4
 8003986:	e04f      	b.n	8003a28 <HAL_I2C_Init+0x1dc>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d111      	bne.n	80039b4 <HAL_I2C_Init+0x168>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	1e58      	subs	r0, r3, #1
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6859      	ldr	r1, [r3, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	440b      	add	r3, r1
 800399e:	fbb0 f3f3 	udiv	r3, r0, r3
 80039a2:	3301      	adds	r3, #1
 80039a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	bf0c      	ite	eq
 80039ac:	2301      	moveq	r3, #1
 80039ae:	2300      	movne	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	e012      	b.n	80039da <HAL_I2C_Init+0x18e>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	1e58      	subs	r0, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6859      	ldr	r1, [r3, #4]
 80039bc:	460b      	mov	r3, r1
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	0099      	lsls	r1, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ca:	3301      	adds	r3, #1
 80039cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	bf0c      	ite	eq
 80039d4:	2301      	moveq	r3, #1
 80039d6:	2300      	movne	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_I2C_Init+0x196>
 80039de:	2301      	movs	r3, #1
 80039e0:	e022      	b.n	8003a28 <HAL_I2C_Init+0x1dc>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10e      	bne.n	8003a08 <HAL_I2C_Init+0x1bc>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	1e58      	subs	r0, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6859      	ldr	r1, [r3, #4]
 80039f2:	460b      	mov	r3, r1
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	440b      	add	r3, r1
 80039f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80039fc:	3301      	adds	r3, #1
 80039fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a06:	e00f      	b.n	8003a28 <HAL_I2C_Init+0x1dc>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	1e58      	subs	r0, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6859      	ldr	r1, [r3, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	0099      	lsls	r1, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a1e:	3301      	adds	r3, #1
 8003a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	6809      	ldr	r1, [r1, #0]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69da      	ldr	r2, [r3, #28]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a56:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6911      	ldr	r1, [r2, #16]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	68d2      	ldr	r2, [r2, #12]
 8003a62:	4311      	orrs	r1, r2
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6812      	ldr	r2, [r2, #0]
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695a      	ldr	r2, [r3, #20]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0201 	orr.w	r2, r2, #1
 8003a96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	000186a0 	.word	0x000186a0
 8003ac4:	001e847f 	.word	0x001e847f
 8003ac8:	003d08ff 	.word	0x003d08ff
 8003acc:	431bde83 	.word	0x431bde83
 8003ad0:	10624dd3 	.word	0x10624dd3

08003ad4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b088      	sub	sp, #32
 8003ad8:	af02      	add	r7, sp, #8
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	607a      	str	r2, [r7, #4]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	817b      	strh	r3, [r7, #10]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ae8:	f7ff fb3e 	bl	8003168 <HAL_GetTick>
 8003aec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b20      	cmp	r3, #32
 8003af8:	f040 80e0 	bne.w	8003cbc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	2319      	movs	r3, #25
 8003b02:	2201      	movs	r2, #1
 8003b04:	4970      	ldr	r1, [pc, #448]	@ (8003cc8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 fa92 	bl	8004030 <I2C_WaitOnFlagUntilTimeout>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b12:	2302      	movs	r3, #2
 8003b14:	e0d3      	b.n	8003cbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_I2C_Master_Transmit+0x50>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e0cc      	b.n	8003cbe <HAL_I2C_Master_Transmit+0x1ea>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d007      	beq.n	8003b4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f042 0201 	orr.w	r2, r2, #1
 8003b48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2221      	movs	r2, #33	@ 0x21
 8003b5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2210      	movs	r2, #16
 8003b66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	893a      	ldrh	r2, [r7, #8]
 8003b7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4a50      	ldr	r2, [pc, #320]	@ (8003ccc <HAL_I2C_Master_Transmit+0x1f8>)
 8003b8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b8c:	8979      	ldrh	r1, [r7, #10]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	6a3a      	ldr	r2, [r7, #32]
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 f9ca 	bl	8003f2c <I2C_MasterRequestWrite>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e08d      	b.n	8003cbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	613b      	str	r3, [r7, #16]
 8003bb6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003bb8:	e066      	b.n	8003c88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	6a39      	ldr	r1, [r7, #32]
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 fb50 	bl	8004264 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00d      	beq.n	8003be6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d107      	bne.n	8003be2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003be0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e06b      	b.n	8003cbe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bea:	781a      	ldrb	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	d11b      	bne.n	8003c5c <HAL_I2C_Master_Transmit+0x188>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d017      	beq.n	8003c5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	781a      	ldrb	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	6a39      	ldr	r1, [r7, #32]
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 fb47 	bl	80042f4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00d      	beq.n	8003c88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c70:	2b04      	cmp	r3, #4
 8003c72:	d107      	bne.n	8003c84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e01a      	b.n	8003cbe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d194      	bne.n	8003bba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	e000      	b.n	8003cbe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003cbc:	2302      	movs	r3, #2
  }
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3718      	adds	r7, #24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	00100002 	.word	0x00100002
 8003ccc:	ffff0000 	.word	0xffff0000

08003cd0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08a      	sub	sp, #40	@ 0x28
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	607a      	str	r2, [r7, #4]
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003ce0:	f7ff fa42 	bl	8003168 <HAL_GetTick>
 8003ce4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	f040 8111 	bne.w	8003f1a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	2319      	movs	r3, #25
 8003cfe:	2201      	movs	r2, #1
 8003d00:	4988      	ldr	r1, [pc, #544]	@ (8003f24 <HAL_I2C_IsDeviceReady+0x254>)
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 f994 	bl	8004030 <I2C_WaitOnFlagUntilTimeout>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e104      	b.n	8003f1c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d101      	bne.n	8003d20 <HAL_I2C_IsDeviceReady+0x50>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	e0fd      	b.n	8003f1c <HAL_I2C_IsDeviceReady+0x24c>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d007      	beq.n	8003d46 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f042 0201 	orr.w	r2, r2, #1
 8003d44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2224      	movs	r2, #36	@ 0x24
 8003d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4a70      	ldr	r2, [pc, #448]	@ (8003f28 <HAL_I2C_IsDeviceReady+0x258>)
 8003d68:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d78:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 f952 	bl	8004030 <I2C_WaitOnFlagUntilTimeout>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00d      	beq.n	8003dae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003da0:	d103      	bne.n	8003daa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003da8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e0b6      	b.n	8003f1c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dae:	897b      	ldrh	r3, [r7, #10]
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	461a      	mov	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003dbc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003dbe:	f7ff f9d3 	bl	8003168 <HAL_GetTick>
 8003dc2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	bf0c      	ite	eq
 8003dd2:	2301      	moveq	r3, #1
 8003dd4:	2300      	movne	r3, #0
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003de4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003de8:	bf0c      	ite	eq
 8003dea:	2301      	moveq	r3, #1
 8003dec:	2300      	movne	r3, #0
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003df2:	e025      	b.n	8003e40 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003df4:	f7ff f9b8 	bl	8003168 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d302      	bcc.n	8003e0a <HAL_I2C_IsDeviceReady+0x13a>
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d103      	bne.n	8003e12 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	22a0      	movs	r2, #160	@ 0xa0
 8003e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	bf0c      	ite	eq
 8003e20:	2301      	moveq	r3, #1
 8003e22:	2300      	movne	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e36:	bf0c      	ite	eq
 8003e38:	2301      	moveq	r3, #1
 8003e3a:	2300      	movne	r3, #0
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2ba0      	cmp	r3, #160	@ 0xa0
 8003e4a:	d005      	beq.n	8003e58 <HAL_I2C_IsDeviceReady+0x188>
 8003e4c:	7dfb      	ldrb	r3, [r7, #23]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d102      	bne.n	8003e58 <HAL_I2C_IsDeviceReady+0x188>
 8003e52:	7dbb      	ldrb	r3, [r7, #22]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0cd      	beq.n	8003df4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d129      	bne.n	8003ec2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e7c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e7e:	2300      	movs	r3, #0
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	613b      	str	r3, [r7, #16]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	613b      	str	r3, [r7, #16]
 8003e92:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	2319      	movs	r3, #25
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	4921      	ldr	r1, [pc, #132]	@ (8003f24 <HAL_I2C_IsDeviceReady+0x254>)
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 f8c6 	bl	8004030 <I2C_WaitOnFlagUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e036      	b.n	8003f1c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	e02c      	b.n	8003f1c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ed0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003eda:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	2319      	movs	r3, #25
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	490f      	ldr	r1, [pc, #60]	@ (8003f24 <HAL_I2C_IsDeviceReady+0x254>)
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 f8a2 	bl	8004030 <I2C_WaitOnFlagUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e012      	b.n	8003f1c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	f4ff af32 	bcc.w	8003d6a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003f1a:	2302      	movs	r3, #2
  }
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3720      	adds	r7, #32
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	00100002 	.word	0x00100002
 8003f28:	ffff0000 	.word	0xffff0000

08003f2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b088      	sub	sp, #32
 8003f30:	af02      	add	r7, sp, #8
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	607a      	str	r2, [r7, #4]
 8003f36:	603b      	str	r3, [r7, #0]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d006      	beq.n	8003f56 <I2C_MasterRequestWrite+0x2a>
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d003      	beq.n	8003f56 <I2C_MasterRequestWrite+0x2a>
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f54:	d108      	bne.n	8003f68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	e00b      	b.n	8003f80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6c:	2b12      	cmp	r3, #18
 8003f6e:	d107      	bne.n	8003f80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 f84f 	bl	8004030 <I2C_WaitOnFlagUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00d      	beq.n	8003fb4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fa6:	d103      	bne.n	8003fb0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e035      	b.n	8004020 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fbc:	d108      	bne.n	8003fd0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fbe:	897b      	ldrh	r3, [r7, #10]
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003fcc:	611a      	str	r2, [r3, #16]
 8003fce:	e01b      	b.n	8004008 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003fd0:	897b      	ldrh	r3, [r7, #10]
 8003fd2:	11db      	asrs	r3, r3, #7
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	f003 0306 	and.w	r3, r3, #6
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	f063 030f 	orn	r3, r3, #15
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	490e      	ldr	r1, [pc, #56]	@ (8004028 <I2C_MasterRequestWrite+0xfc>)
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 f898 	bl	8004124 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e010      	b.n	8004020 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ffe:	897b      	ldrh	r3, [r7, #10]
 8004000:	b2da      	uxtb	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	4907      	ldr	r1, [pc, #28]	@ (800402c <I2C_MasterRequestWrite+0x100>)
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 f888 	bl	8004124 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e000      	b.n	8004020 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	00010008 	.word	0x00010008
 800402c:	00010002 	.word	0x00010002

08004030 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	603b      	str	r3, [r7, #0]
 800403c:	4613      	mov	r3, r2
 800403e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004040:	e048      	b.n	80040d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004048:	d044      	beq.n	80040d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800404a:	f7ff f88d 	bl	8003168 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	429a      	cmp	r2, r3
 8004058:	d302      	bcc.n	8004060 <I2C_WaitOnFlagUntilTimeout+0x30>
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d139      	bne.n	80040d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	0c1b      	lsrs	r3, r3, #16
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b01      	cmp	r3, #1
 8004068:	d10d      	bne.n	8004086 <I2C_WaitOnFlagUntilTimeout+0x56>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	43da      	mvns	r2, r3
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	4013      	ands	r3, r2
 8004076:	b29b      	uxth	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	bf0c      	ite	eq
 800407c:	2301      	moveq	r3, #1
 800407e:	2300      	movne	r3, #0
 8004080:	b2db      	uxtb	r3, r3
 8004082:	461a      	mov	r2, r3
 8004084:	e00c      	b.n	80040a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	43da      	mvns	r2, r3
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	4013      	ands	r3, r2
 8004092:	b29b      	uxth	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	bf0c      	ite	eq
 8004098:	2301      	moveq	r3, #1
 800409a:	2300      	movne	r3, #0
 800409c:	b2db      	uxtb	r3, r3
 800409e:	461a      	mov	r2, r3
 80040a0:	79fb      	ldrb	r3, [r7, #7]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d116      	bne.n	80040d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2220      	movs	r2, #32
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c0:	f043 0220 	orr.w	r2, r3, #32
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e023      	b.n	800411c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	0c1b      	lsrs	r3, r3, #16
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d10d      	bne.n	80040fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	43da      	mvns	r2, r3
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	4013      	ands	r3, r2
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	bf0c      	ite	eq
 80040f0:	2301      	moveq	r3, #1
 80040f2:	2300      	movne	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	461a      	mov	r2, r3
 80040f8:	e00c      	b.n	8004114 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	43da      	mvns	r2, r3
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	4013      	ands	r3, r2
 8004106:	b29b      	uxth	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	bf0c      	ite	eq
 800410c:	2301      	moveq	r3, #1
 800410e:	2300      	movne	r3, #0
 8004110:	b2db      	uxtb	r3, r3
 8004112:	461a      	mov	r2, r3
 8004114:	79fb      	ldrb	r3, [r7, #7]
 8004116:	429a      	cmp	r2, r3
 8004118:	d093      	beq.n	8004042 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
 8004130:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004132:	e071      	b.n	8004218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800413e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004142:	d123      	bne.n	800418c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004152:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800415c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004178:	f043 0204 	orr.w	r2, r3, #4
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e067      	b.n	800425c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004192:	d041      	beq.n	8004218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004194:	f7fe ffe8 	bl	8003168 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d302      	bcc.n	80041aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d136      	bne.n	8004218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	0c1b      	lsrs	r3, r3, #16
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d10c      	bne.n	80041ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	43da      	mvns	r2, r3
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	4013      	ands	r3, r2
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	bf14      	ite	ne
 80041c6:	2301      	movne	r3, #1
 80041c8:	2300      	moveq	r3, #0
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	e00b      	b.n	80041e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	43da      	mvns	r2, r3
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	4013      	ands	r3, r2
 80041da:	b29b      	uxth	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	bf14      	ite	ne
 80041e0:	2301      	movne	r3, #1
 80041e2:	2300      	moveq	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d016      	beq.n	8004218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004204:	f043 0220 	orr.w	r2, r3, #32
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e021      	b.n	800425c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	0c1b      	lsrs	r3, r3, #16
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b01      	cmp	r3, #1
 8004220:	d10c      	bne.n	800423c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	43da      	mvns	r2, r3
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	4013      	ands	r3, r2
 800422e:	b29b      	uxth	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	bf14      	ite	ne
 8004234:	2301      	movne	r3, #1
 8004236:	2300      	moveq	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	e00b      	b.n	8004254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	43da      	mvns	r2, r3
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	4013      	ands	r3, r2
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	bf14      	ite	ne
 800424e:	2301      	movne	r3, #1
 8004250:	2300      	moveq	r3, #0
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	f47f af6d 	bne.w	8004134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004270:	e034      	b.n	80042dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 f886 	bl	8004384 <I2C_IsAcknowledgeFailed>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e034      	b.n	80042ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004288:	d028      	beq.n	80042dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800428a:	f7fe ff6d 	bl	8003168 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	429a      	cmp	r2, r3
 8004298:	d302      	bcc.n	80042a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d11d      	bne.n	80042dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042aa:	2b80      	cmp	r3, #128	@ 0x80
 80042ac:	d016      	beq.n	80042dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c8:	f043 0220 	orr.w	r2, r3, #32
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e007      	b.n	80042ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042e6:	2b80      	cmp	r3, #128	@ 0x80
 80042e8:	d1c3      	bne.n	8004272 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004300:	e034      	b.n	800436c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 f83e 	bl	8004384 <I2C_IsAcknowledgeFailed>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e034      	b.n	800437c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004318:	d028      	beq.n	800436c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800431a:	f7fe ff25 	bl	8003168 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	429a      	cmp	r2, r3
 8004328:	d302      	bcc.n	8004330 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d11d      	bne.n	800436c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	f003 0304 	and.w	r3, r3, #4
 800433a:	2b04      	cmp	r3, #4
 800433c:	d016      	beq.n	800436c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004358:	f043 0220 	orr.w	r2, r3, #32
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e007      	b.n	800437c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	f003 0304 	and.w	r3, r3, #4
 8004376:	2b04      	cmp	r3, #4
 8004378:	d1c3      	bne.n	8004302 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004396:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800439a:	d11b      	bne.n	80043d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2220      	movs	r2, #32
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c0:	f043 0204 	orr.w	r2, r3, #4
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e000      	b.n	80043d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	bc80      	pop	{r7}
 80043de:	4770      	bx	lr

080043e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e272      	b.n	80048d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 8087 	beq.w	800450e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004400:	4b92      	ldr	r3, [pc, #584]	@ (800464c <HAL_RCC_OscConfig+0x26c>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f003 030c 	and.w	r3, r3, #12
 8004408:	2b04      	cmp	r3, #4
 800440a:	d00c      	beq.n	8004426 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800440c:	4b8f      	ldr	r3, [pc, #572]	@ (800464c <HAL_RCC_OscConfig+0x26c>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f003 030c 	and.w	r3, r3, #12
 8004414:	2b08      	cmp	r3, #8
 8004416:	d112      	bne.n	800443e <HAL_RCC_OscConfig+0x5e>
 8004418:	4b8c      	ldr	r3, [pc, #560]	@ (800464c <HAL_RCC_OscConfig+0x26c>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004424:	d10b      	bne.n	800443e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004426:	4b89      	ldr	r3, [pc, #548]	@ (800464c <HAL_RCC_OscConfig+0x26c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d06c      	beq.n	800450c <HAL_RCC_OscConfig+0x12c>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d168      	bne.n	800450c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e24c      	b.n	80048d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004446:	d106      	bne.n	8004456 <HAL_RCC_OscConfig+0x76>
 8004448:	4b80      	ldr	r3, [pc, #512]	@ (800464c <HAL_RCC_OscConfig+0x26c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a7f      	ldr	r2, [pc, #508]	@ (800464c <HAL_RCC_OscConfig+0x26c>)
 800444e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	e02e      	b.n	80044b4 <HAL_RCC_OscConfig+0xd4>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10c      	bne.n	8004478 <HAL_RCC_OscConfig+0x98>
 800445e:	4b7b      	ldr	r3, [pc, #492]	@ (800464c <HAL_RCC_OscConfig+0x26c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a7a      	ldr	r2, [pc, #488]	@ (800464c <HAL_RCC_OscConfig+0x26c>)
 8004464:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004468:	6013      	str	r3, [r2, #0]
 800446a:	4b78      	ldr	r3, [pc, #480]	@ (800464c <HAL_RCC_OscConfig+0x26c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a77      	ldr	r2, [pc, #476]	@ (800464c <HAL_RCC_OscConfig+0x26c>)
 8004470:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	e01d      	b.n	80044b4 <HAL_RCC_OscConfig+0xd4>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004480:	d10c      	bne.n	800449c <HAL_RCC_OscConfig+0xbc>
 8004482:	4b72      	ldr	r3, [pc, #456]	@ (800464c <HAL_RCC_OscConfig+0x26c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a71      	ldr	r2, [pc, #452]	@ (800464c <HAL_RCC_OscConfig+0x26c>)
 8004488:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	4b6f      	ldr	r3, [pc, #444]	@ (800464c <HAL_RCC_OscConfig+0x26c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a6e      	ldr	r2, [pc, #440]	@ (800464c <HAL_RCC_OscConfig+0x26c>)
 8004494:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	e00b      	b.n	80044b4 <HAL_RCC_OscConfig+0xd4>
 800449c:	4b6b      	ldr	r3, [pc, #428]	@ (800464c <HAL_RCC_OscConfig+0x26c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a6a      	ldr	r2, [pc, #424]	@ (800464c <HAL_RCC_OscConfig+0x26c>)
 80044a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	4b68      	ldr	r3, [pc, #416]	@ (800464c <HAL_RCC_OscConfig+0x26c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a67      	ldr	r2, [pc, #412]	@ (800464c <HAL_RCC_OscConfig+0x26c>)
 80044ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d013      	beq.n	80044e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044bc:	f7fe fe54 	bl	8003168 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044c4:	f7fe fe50 	bl	8003168 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b64      	cmp	r3, #100	@ 0x64
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e200      	b.n	80048d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d6:	4b5d      	ldr	r3, [pc, #372]	@ (800464c <HAL_RCC_OscConfig+0x26c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0f0      	beq.n	80044c4 <HAL_RCC_OscConfig+0xe4>
 80044e2:	e014      	b.n	800450e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e4:	f7fe fe40 	bl	8003168 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044ec:	f7fe fe3c 	bl	8003168 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b64      	cmp	r3, #100	@ 0x64
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e1ec      	b.n	80048d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044fe:	4b53      	ldr	r3, [pc, #332]	@ (800464c <HAL_RCC_OscConfig+0x26c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1f0      	bne.n	80044ec <HAL_RCC_OscConfig+0x10c>
 800450a:	e000      	b.n	800450e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800450c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d063      	beq.n	80045e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800451a:	4b4c      	ldr	r3, [pc, #304]	@ (800464c <HAL_RCC_OscConfig+0x26c>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f003 030c 	and.w	r3, r3, #12
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00b      	beq.n	800453e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004526:	4b49      	ldr	r3, [pc, #292]	@ (800464c <HAL_RCC_OscConfig+0x26c>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f003 030c 	and.w	r3, r3, #12
 800452e:	2b08      	cmp	r3, #8
 8004530:	d11c      	bne.n	800456c <HAL_RCC_OscConfig+0x18c>
 8004532:	4b46      	ldr	r3, [pc, #280]	@ (800464c <HAL_RCC_OscConfig+0x26c>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d116      	bne.n	800456c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800453e:	4b43      	ldr	r3, [pc, #268]	@ (800464c <HAL_RCC_OscConfig+0x26c>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d005      	beq.n	8004556 <HAL_RCC_OscConfig+0x176>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d001      	beq.n	8004556 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e1c0      	b.n	80048d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004556:	4b3d      	ldr	r3, [pc, #244]	@ (800464c <HAL_RCC_OscConfig+0x26c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	4939      	ldr	r1, [pc, #228]	@ (800464c <HAL_RCC_OscConfig+0x26c>)
 8004566:	4313      	orrs	r3, r2
 8004568:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800456a:	e03a      	b.n	80045e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d020      	beq.n	80045b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004574:	4b36      	ldr	r3, [pc, #216]	@ (8004650 <HAL_RCC_OscConfig+0x270>)
 8004576:	2201      	movs	r2, #1
 8004578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457a:	f7fe fdf5 	bl	8003168 <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004580:	e008      	b.n	8004594 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004582:	f7fe fdf1 	bl	8003168 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e1a1      	b.n	80048d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004594:	4b2d      	ldr	r3, [pc, #180]	@ (800464c <HAL_RCC_OscConfig+0x26c>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0f0      	beq.n	8004582 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a0:	4b2a      	ldr	r3, [pc, #168]	@ (800464c <HAL_RCC_OscConfig+0x26c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	4927      	ldr	r1, [pc, #156]	@ (800464c <HAL_RCC_OscConfig+0x26c>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	600b      	str	r3, [r1, #0]
 80045b4:	e015      	b.n	80045e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045b6:	4b26      	ldr	r3, [pc, #152]	@ (8004650 <HAL_RCC_OscConfig+0x270>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045bc:	f7fe fdd4 	bl	8003168 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045c4:	f7fe fdd0 	bl	8003168 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e180      	b.n	80048d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045d6:	4b1d      	ldr	r3, [pc, #116]	@ (800464c <HAL_RCC_OscConfig+0x26c>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1f0      	bne.n	80045c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0308 	and.w	r3, r3, #8
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d03a      	beq.n	8004664 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d019      	beq.n	800462a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045f6:	4b17      	ldr	r3, [pc, #92]	@ (8004654 <HAL_RCC_OscConfig+0x274>)
 80045f8:	2201      	movs	r2, #1
 80045fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045fc:	f7fe fdb4 	bl	8003168 <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004604:	f7fe fdb0 	bl	8003168 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e160      	b.n	80048d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004616:	4b0d      	ldr	r3, [pc, #52]	@ (800464c <HAL_RCC_OscConfig+0x26c>)
 8004618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0f0      	beq.n	8004604 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004622:	2001      	movs	r0, #1
 8004624:	f000 face 	bl	8004bc4 <RCC_Delay>
 8004628:	e01c      	b.n	8004664 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800462a:	4b0a      	ldr	r3, [pc, #40]	@ (8004654 <HAL_RCC_OscConfig+0x274>)
 800462c:	2200      	movs	r2, #0
 800462e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004630:	f7fe fd9a 	bl	8003168 <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004636:	e00f      	b.n	8004658 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004638:	f7fe fd96 	bl	8003168 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d908      	bls.n	8004658 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e146      	b.n	80048d8 <HAL_RCC_OscConfig+0x4f8>
 800464a:	bf00      	nop
 800464c:	40021000 	.word	0x40021000
 8004650:	42420000 	.word	0x42420000
 8004654:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004658:	4b92      	ldr	r3, [pc, #584]	@ (80048a4 <HAL_RCC_OscConfig+0x4c4>)
 800465a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1e9      	bne.n	8004638 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 80a6 	beq.w	80047be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004672:	2300      	movs	r3, #0
 8004674:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004676:	4b8b      	ldr	r3, [pc, #556]	@ (80048a4 <HAL_RCC_OscConfig+0x4c4>)
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10d      	bne.n	800469e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004682:	4b88      	ldr	r3, [pc, #544]	@ (80048a4 <HAL_RCC_OscConfig+0x4c4>)
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	4a87      	ldr	r2, [pc, #540]	@ (80048a4 <HAL_RCC_OscConfig+0x4c4>)
 8004688:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800468c:	61d3      	str	r3, [r2, #28]
 800468e:	4b85      	ldr	r3, [pc, #532]	@ (80048a4 <HAL_RCC_OscConfig+0x4c4>)
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004696:	60bb      	str	r3, [r7, #8]
 8004698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800469a:	2301      	movs	r3, #1
 800469c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800469e:	4b82      	ldr	r3, [pc, #520]	@ (80048a8 <HAL_RCC_OscConfig+0x4c8>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d118      	bne.n	80046dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046aa:	4b7f      	ldr	r3, [pc, #508]	@ (80048a8 <HAL_RCC_OscConfig+0x4c8>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a7e      	ldr	r2, [pc, #504]	@ (80048a8 <HAL_RCC_OscConfig+0x4c8>)
 80046b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046b6:	f7fe fd57 	bl	8003168 <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046bc:	e008      	b.n	80046d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046be:	f7fe fd53 	bl	8003168 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b64      	cmp	r3, #100	@ 0x64
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e103      	b.n	80048d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d0:	4b75      	ldr	r3, [pc, #468]	@ (80048a8 <HAL_RCC_OscConfig+0x4c8>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d0f0      	beq.n	80046be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d106      	bne.n	80046f2 <HAL_RCC_OscConfig+0x312>
 80046e4:	4b6f      	ldr	r3, [pc, #444]	@ (80048a4 <HAL_RCC_OscConfig+0x4c4>)
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	4a6e      	ldr	r2, [pc, #440]	@ (80048a4 <HAL_RCC_OscConfig+0x4c4>)
 80046ea:	f043 0301 	orr.w	r3, r3, #1
 80046ee:	6213      	str	r3, [r2, #32]
 80046f0:	e02d      	b.n	800474e <HAL_RCC_OscConfig+0x36e>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10c      	bne.n	8004714 <HAL_RCC_OscConfig+0x334>
 80046fa:	4b6a      	ldr	r3, [pc, #424]	@ (80048a4 <HAL_RCC_OscConfig+0x4c4>)
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	4a69      	ldr	r2, [pc, #420]	@ (80048a4 <HAL_RCC_OscConfig+0x4c4>)
 8004700:	f023 0301 	bic.w	r3, r3, #1
 8004704:	6213      	str	r3, [r2, #32]
 8004706:	4b67      	ldr	r3, [pc, #412]	@ (80048a4 <HAL_RCC_OscConfig+0x4c4>)
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	4a66      	ldr	r2, [pc, #408]	@ (80048a4 <HAL_RCC_OscConfig+0x4c4>)
 800470c:	f023 0304 	bic.w	r3, r3, #4
 8004710:	6213      	str	r3, [r2, #32]
 8004712:	e01c      	b.n	800474e <HAL_RCC_OscConfig+0x36e>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	2b05      	cmp	r3, #5
 800471a:	d10c      	bne.n	8004736 <HAL_RCC_OscConfig+0x356>
 800471c:	4b61      	ldr	r3, [pc, #388]	@ (80048a4 <HAL_RCC_OscConfig+0x4c4>)
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	4a60      	ldr	r2, [pc, #384]	@ (80048a4 <HAL_RCC_OscConfig+0x4c4>)
 8004722:	f043 0304 	orr.w	r3, r3, #4
 8004726:	6213      	str	r3, [r2, #32]
 8004728:	4b5e      	ldr	r3, [pc, #376]	@ (80048a4 <HAL_RCC_OscConfig+0x4c4>)
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	4a5d      	ldr	r2, [pc, #372]	@ (80048a4 <HAL_RCC_OscConfig+0x4c4>)
 800472e:	f043 0301 	orr.w	r3, r3, #1
 8004732:	6213      	str	r3, [r2, #32]
 8004734:	e00b      	b.n	800474e <HAL_RCC_OscConfig+0x36e>
 8004736:	4b5b      	ldr	r3, [pc, #364]	@ (80048a4 <HAL_RCC_OscConfig+0x4c4>)
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	4a5a      	ldr	r2, [pc, #360]	@ (80048a4 <HAL_RCC_OscConfig+0x4c4>)
 800473c:	f023 0301 	bic.w	r3, r3, #1
 8004740:	6213      	str	r3, [r2, #32]
 8004742:	4b58      	ldr	r3, [pc, #352]	@ (80048a4 <HAL_RCC_OscConfig+0x4c4>)
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	4a57      	ldr	r2, [pc, #348]	@ (80048a4 <HAL_RCC_OscConfig+0x4c4>)
 8004748:	f023 0304 	bic.w	r3, r3, #4
 800474c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d015      	beq.n	8004782 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004756:	f7fe fd07 	bl	8003168 <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800475c:	e00a      	b.n	8004774 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800475e:	f7fe fd03 	bl	8003168 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	f241 3288 	movw	r2, #5000	@ 0x1388
 800476c:	4293      	cmp	r3, r2
 800476e:	d901      	bls.n	8004774 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e0b1      	b.n	80048d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004774:	4b4b      	ldr	r3, [pc, #300]	@ (80048a4 <HAL_RCC_OscConfig+0x4c4>)
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0ee      	beq.n	800475e <HAL_RCC_OscConfig+0x37e>
 8004780:	e014      	b.n	80047ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004782:	f7fe fcf1 	bl	8003168 <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004788:	e00a      	b.n	80047a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800478a:	f7fe fced 	bl	8003168 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004798:	4293      	cmp	r3, r2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e09b      	b.n	80048d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047a0:	4b40      	ldr	r3, [pc, #256]	@ (80048a4 <HAL_RCC_OscConfig+0x4c4>)
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1ee      	bne.n	800478a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047ac:	7dfb      	ldrb	r3, [r7, #23]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d105      	bne.n	80047be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047b2:	4b3c      	ldr	r3, [pc, #240]	@ (80048a4 <HAL_RCC_OscConfig+0x4c4>)
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	4a3b      	ldr	r2, [pc, #236]	@ (80048a4 <HAL_RCC_OscConfig+0x4c4>)
 80047b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 8087 	beq.w	80048d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047c8:	4b36      	ldr	r3, [pc, #216]	@ (80048a4 <HAL_RCC_OscConfig+0x4c4>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f003 030c 	and.w	r3, r3, #12
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d061      	beq.n	8004898 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	69db      	ldr	r3, [r3, #28]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d146      	bne.n	800486a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047dc:	4b33      	ldr	r3, [pc, #204]	@ (80048ac <HAL_RCC_OscConfig+0x4cc>)
 80047de:	2200      	movs	r2, #0
 80047e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e2:	f7fe fcc1 	bl	8003168 <HAL_GetTick>
 80047e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047e8:	e008      	b.n	80047fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ea:	f7fe fcbd 	bl	8003168 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e06d      	b.n	80048d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047fc:	4b29      	ldr	r3, [pc, #164]	@ (80048a4 <HAL_RCC_OscConfig+0x4c4>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1f0      	bne.n	80047ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004810:	d108      	bne.n	8004824 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004812:	4b24      	ldr	r3, [pc, #144]	@ (80048a4 <HAL_RCC_OscConfig+0x4c4>)
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	4921      	ldr	r1, [pc, #132]	@ (80048a4 <HAL_RCC_OscConfig+0x4c4>)
 8004820:	4313      	orrs	r3, r2
 8004822:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004824:	4b1f      	ldr	r3, [pc, #124]	@ (80048a4 <HAL_RCC_OscConfig+0x4c4>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a19      	ldr	r1, [r3, #32]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004834:	430b      	orrs	r3, r1
 8004836:	491b      	ldr	r1, [pc, #108]	@ (80048a4 <HAL_RCC_OscConfig+0x4c4>)
 8004838:	4313      	orrs	r3, r2
 800483a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800483c:	4b1b      	ldr	r3, [pc, #108]	@ (80048ac <HAL_RCC_OscConfig+0x4cc>)
 800483e:	2201      	movs	r2, #1
 8004840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004842:	f7fe fc91 	bl	8003168 <HAL_GetTick>
 8004846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004848:	e008      	b.n	800485c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800484a:	f7fe fc8d 	bl	8003168 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d901      	bls.n	800485c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e03d      	b.n	80048d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800485c:	4b11      	ldr	r3, [pc, #68]	@ (80048a4 <HAL_RCC_OscConfig+0x4c4>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d0f0      	beq.n	800484a <HAL_RCC_OscConfig+0x46a>
 8004868:	e035      	b.n	80048d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800486a:	4b10      	ldr	r3, [pc, #64]	@ (80048ac <HAL_RCC_OscConfig+0x4cc>)
 800486c:	2200      	movs	r2, #0
 800486e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004870:	f7fe fc7a 	bl	8003168 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004878:	f7fe fc76 	bl	8003168 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e026      	b.n	80048d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800488a:	4b06      	ldr	r3, [pc, #24]	@ (80048a4 <HAL_RCC_OscConfig+0x4c4>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1f0      	bne.n	8004878 <HAL_RCC_OscConfig+0x498>
 8004896:	e01e      	b.n	80048d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	69db      	ldr	r3, [r3, #28]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d107      	bne.n	80048b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e019      	b.n	80048d8 <HAL_RCC_OscConfig+0x4f8>
 80048a4:	40021000 	.word	0x40021000
 80048a8:	40007000 	.word	0x40007000
 80048ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048b0:	4b0b      	ldr	r3, [pc, #44]	@ (80048e0 <HAL_RCC_OscConfig+0x500>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d106      	bne.n	80048d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d001      	beq.n	80048d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e000      	b.n	80048d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3718      	adds	r7, #24
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	40021000 	.word	0x40021000

080048e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e0d0      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048f8:	4b6a      	ldr	r3, [pc, #424]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1c0>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d910      	bls.n	8004928 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004906:	4b67      	ldr	r3, [pc, #412]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f023 0207 	bic.w	r2, r3, #7
 800490e:	4965      	ldr	r1, [pc, #404]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	4313      	orrs	r3, r2
 8004914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004916:	4b63      	ldr	r3, [pc, #396]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0307 	and.w	r3, r3, #7
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	429a      	cmp	r2, r3
 8004922:	d001      	beq.n	8004928 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e0b8      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d020      	beq.n	8004976 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	d005      	beq.n	800494c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004940:	4b59      	ldr	r3, [pc, #356]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	4a58      	ldr	r2, [pc, #352]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8004946:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800494a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0308 	and.w	r3, r3, #8
 8004954:	2b00      	cmp	r3, #0
 8004956:	d005      	beq.n	8004964 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004958:	4b53      	ldr	r3, [pc, #332]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1c4>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	4a52      	ldr	r2, [pc, #328]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1c4>)
 800495e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004962:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004964:	4b50      	ldr	r3, [pc, #320]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	494d      	ldr	r1, [pc, #308]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8004972:	4313      	orrs	r3, r2
 8004974:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d040      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d107      	bne.n	800499a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800498a:	4b47      	ldr	r3, [pc, #284]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1c4>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d115      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e07f      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d107      	bne.n	80049b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049a2:	4b41      	ldr	r3, [pc, #260]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d109      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e073      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049b2:	4b3d      	ldr	r3, [pc, #244]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e06b      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049c2:	4b39      	ldr	r3, [pc, #228]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f023 0203 	bic.w	r2, r3, #3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	4936      	ldr	r1, [pc, #216]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049d4:	f7fe fbc8 	bl	8003168 <HAL_GetTick>
 80049d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049da:	e00a      	b.n	80049f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049dc:	f7fe fbc4 	bl	8003168 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e053      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049f2:	4b2d      	ldr	r3, [pc, #180]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f003 020c 	and.w	r2, r3, #12
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d1eb      	bne.n	80049dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a04:	4b27      	ldr	r3, [pc, #156]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d210      	bcs.n	8004a34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a12:	4b24      	ldr	r3, [pc, #144]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f023 0207 	bic.w	r2, r3, #7
 8004a1a:	4922      	ldr	r1, [pc, #136]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a22:	4b20      	ldr	r3, [pc, #128]	@ (8004aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d001      	beq.n	8004a34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e032      	b.n	8004a9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d008      	beq.n	8004a52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a40:	4b19      	ldr	r3, [pc, #100]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	4916      	ldr	r1, [pc, #88]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0308 	and.w	r3, r3, #8
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d009      	beq.n	8004a72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a5e:	4b12      	ldr	r3, [pc, #72]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	490e      	ldr	r1, [pc, #56]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a72:	f000 f821 	bl	8004ab8 <HAL_RCC_GetSysClockFreq>
 8004a76:	4602      	mov	r2, r0
 8004a78:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	091b      	lsrs	r3, r3, #4
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	490a      	ldr	r1, [pc, #40]	@ (8004aac <HAL_RCC_ClockConfig+0x1c8>)
 8004a84:	5ccb      	ldrb	r3, [r1, r3]
 8004a86:	fa22 f303 	lsr.w	r3, r2, r3
 8004a8a:	4a09      	ldr	r2, [pc, #36]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1cc>)
 8004a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a8e:	4b09      	ldr	r3, [pc, #36]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1d0>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fe fb26 	bl	80030e4 <HAL_InitTick>

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40022000 	.word	0x40022000
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	0800c2a8 	.word	0x0800c2a8
 8004ab0:	20000018 	.word	0x20000018
 8004ab4:	2000001c 	.word	0x2000001c

08004ab8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60fb      	str	r3, [r7, #12]
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60bb      	str	r3, [r7, #8]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	617b      	str	r3, [r7, #20]
 8004aca:	2300      	movs	r3, #0
 8004acc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8004b4c <HAL_RCC_GetSysClockFreq+0x94>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f003 030c 	and.w	r3, r3, #12
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d002      	beq.n	8004ae8 <HAL_RCC_GetSysClockFreq+0x30>
 8004ae2:	2b08      	cmp	r3, #8
 8004ae4:	d003      	beq.n	8004aee <HAL_RCC_GetSysClockFreq+0x36>
 8004ae6:	e027      	b.n	8004b38 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ae8:	4b19      	ldr	r3, [pc, #100]	@ (8004b50 <HAL_RCC_GetSysClockFreq+0x98>)
 8004aea:	613b      	str	r3, [r7, #16]
      break;
 8004aec:	e027      	b.n	8004b3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	0c9b      	lsrs	r3, r3, #18
 8004af2:	f003 030f 	and.w	r3, r3, #15
 8004af6:	4a17      	ldr	r2, [pc, #92]	@ (8004b54 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004af8:	5cd3      	ldrb	r3, [r2, r3]
 8004afa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d010      	beq.n	8004b28 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b06:	4b11      	ldr	r3, [pc, #68]	@ (8004b4c <HAL_RCC_GetSysClockFreq+0x94>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	0c5b      	lsrs	r3, r3, #17
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	4a11      	ldr	r2, [pc, #68]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b12:	5cd3      	ldrb	r3, [r2, r3]
 8004b14:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a0d      	ldr	r2, [pc, #52]	@ (8004b50 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b1a:	fb03 f202 	mul.w	r2, r3, r2
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b24:	617b      	str	r3, [r7, #20]
 8004b26:	e004      	b.n	8004b32 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a0c      	ldr	r2, [pc, #48]	@ (8004b5c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b2c:	fb02 f303 	mul.w	r3, r2, r3
 8004b30:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	613b      	str	r3, [r7, #16]
      break;
 8004b36:	e002      	b.n	8004b3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b38:	4b05      	ldr	r3, [pc, #20]	@ (8004b50 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b3a:	613b      	str	r3, [r7, #16]
      break;
 8004b3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b3e:	693b      	ldr	r3, [r7, #16]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	371c      	adds	r7, #28
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bc80      	pop	{r7}
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	007a1200 	.word	0x007a1200
 8004b54:	0800c2c0 	.word	0x0800c2c0
 8004b58:	0800c2d0 	.word	0x0800c2d0
 8004b5c:	003d0900 	.word	0x003d0900

08004b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b60:	b480      	push	{r7}
 8004b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b64:	4b02      	ldr	r3, [pc, #8]	@ (8004b70 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b66:	681b      	ldr	r3, [r3, #0]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bc80      	pop	{r7}
 8004b6e:	4770      	bx	lr
 8004b70:	20000018 	.word	0x20000018

08004b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b78:	f7ff fff2 	bl	8004b60 <HAL_RCC_GetHCLKFreq>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	4b05      	ldr	r3, [pc, #20]	@ (8004b94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	0a1b      	lsrs	r3, r3, #8
 8004b84:	f003 0307 	and.w	r3, r3, #7
 8004b88:	4903      	ldr	r1, [pc, #12]	@ (8004b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b8a:	5ccb      	ldrb	r3, [r1, r3]
 8004b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40021000 	.word	0x40021000
 8004b98:	0800c2b8 	.word	0x0800c2b8

08004b9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ba0:	f7ff ffde 	bl	8004b60 <HAL_RCC_GetHCLKFreq>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	4b05      	ldr	r3, [pc, #20]	@ (8004bbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	0adb      	lsrs	r3, r3, #11
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	4903      	ldr	r1, [pc, #12]	@ (8004bc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bb2:	5ccb      	ldrb	r3, [r1, r3]
 8004bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	0800c2b8 	.word	0x0800c2b8

08004bc4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8004bf8 <RCC_Delay+0x34>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8004bfc <RCC_Delay+0x38>)
 8004bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd6:	0a5b      	lsrs	r3, r3, #9
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	fb02 f303 	mul.w	r3, r2, r3
 8004bde:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004be0:	bf00      	nop
  }
  while (Delay --);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	1e5a      	subs	r2, r3, #1
 8004be6:	60fa      	str	r2, [r7, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1f9      	bne.n	8004be0 <RCC_Delay+0x1c>
}
 8004bec:	bf00      	nop
 8004bee:	bf00      	nop
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bc80      	pop	{r7}
 8004bf6:	4770      	bx	lr
 8004bf8:	20000018 	.word	0x20000018
 8004bfc:	10624dd3 	.word	0x10624dd3

08004c00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e042      	b.n	8004c98 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d106      	bne.n	8004c2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7fd fe5c 	bl	80028e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2224      	movs	r2, #36	@ 0x24
 8004c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 fd71 	bl	800572c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	691a      	ldr	r2, [r3, #16]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	695a      	ldr	r2, [r3, #20]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68da      	ldr	r2, [r3, #12]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08a      	sub	sp, #40	@ 0x28
 8004ca4:	af02      	add	r7, sp, #8
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	603b      	str	r3, [r7, #0]
 8004cac:	4613      	mov	r3, r2
 8004cae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b20      	cmp	r3, #32
 8004cbe:	d16d      	bne.n	8004d9c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <HAL_UART_Transmit+0x2c>
 8004cc6:	88fb      	ldrh	r3, [r7, #6]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e066      	b.n	8004d9e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2221      	movs	r2, #33	@ 0x21
 8004cda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cde:	f7fe fa43 	bl	8003168 <HAL_GetTick>
 8004ce2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	88fa      	ldrh	r2, [r7, #6]
 8004ce8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	88fa      	ldrh	r2, [r7, #6]
 8004cee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cf8:	d108      	bne.n	8004d0c <HAL_UART_Transmit+0x6c>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d104      	bne.n	8004d0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d02:	2300      	movs	r3, #0
 8004d04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	61bb      	str	r3, [r7, #24]
 8004d0a:	e003      	b.n	8004d14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d10:	2300      	movs	r3, #0
 8004d12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d14:	e02a      	b.n	8004d6c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	2180      	movs	r1, #128	@ 0x80
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 faf9 	bl	8005318 <UART_WaitOnFlagUntilTimeout>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e036      	b.n	8004d9e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10b      	bne.n	8004d4e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	3302      	adds	r3, #2
 8004d4a:	61bb      	str	r3, [r7, #24]
 8004d4c:	e007      	b.n	8004d5e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	781a      	ldrb	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1cf      	bne.n	8004d16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	2140      	movs	r1, #64	@ 0x40
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f000 fac9 	bl	8005318 <UART_WaitOnFlagUntilTimeout>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e006      	b.n	8004d9e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	e000      	b.n	8004d9e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004d9c:	2302      	movs	r3, #2
  }
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3720      	adds	r7, #32
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
	...

08004da8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b0ba      	sub	sp, #232	@ 0xe8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dde:	f003 030f 	and.w	r3, r3, #15
 8004de2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004de6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10f      	bne.n	8004e0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004df2:	f003 0320 	and.w	r3, r3, #32
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d009      	beq.n	8004e0e <HAL_UART_IRQHandler+0x66>
 8004dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dfe:	f003 0320 	and.w	r3, r3, #32
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fbd1 	bl	80055ae <UART_Receive_IT>
      return;
 8004e0c:	e25b      	b.n	80052c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 80de 	beq.w	8004fd4 <HAL_UART_IRQHandler+0x22c>
 8004e18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d106      	bne.n	8004e32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e28:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 80d1 	beq.w	8004fd4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00b      	beq.n	8004e56 <HAL_UART_IRQHandler+0xae>
 8004e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d005      	beq.n	8004e56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e4e:	f043 0201 	orr.w	r2, r3, #1
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e5a:	f003 0304 	and.w	r3, r3, #4
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00b      	beq.n	8004e7a <HAL_UART_IRQHandler+0xd2>
 8004e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d005      	beq.n	8004e7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e72:	f043 0202 	orr.w	r2, r3, #2
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00b      	beq.n	8004e9e <HAL_UART_IRQHandler+0xf6>
 8004e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d005      	beq.n	8004e9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e96:	f043 0204 	orr.w	r2, r3, #4
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d011      	beq.n	8004ece <HAL_UART_IRQHandler+0x126>
 8004eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eae:	f003 0320 	and.w	r3, r3, #32
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d105      	bne.n	8004ec2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d005      	beq.n	8004ece <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ec6:	f043 0208 	orr.w	r2, r3, #8
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 81f2 	beq.w	80052bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004edc:	f003 0320 	and.w	r3, r3, #32
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d008      	beq.n	8004ef6 <HAL_UART_IRQHandler+0x14e>
 8004ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ee8:	f003 0320 	and.w	r3, r3, #32
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fb5c 	bl	80055ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	bf14      	ite	ne
 8004f04:	2301      	movne	r3, #1
 8004f06:	2300      	moveq	r3, #0
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f12:	f003 0308 	and.w	r3, r3, #8
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d103      	bne.n	8004f22 <HAL_UART_IRQHandler+0x17a>
 8004f1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d04f      	beq.n	8004fc2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fa66 	bl	80053f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d041      	beq.n	8004fba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	3314      	adds	r3, #20
 8004f3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f44:	e853 3f00 	ldrex	r3, [r3]
 8004f48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004f4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3314      	adds	r3, #20
 8004f5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f62:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f72:	e841 2300 	strex	r3, r2, [r1]
 8004f76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1d9      	bne.n	8004f36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d013      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f8e:	4a7e      	ldr	r2, [pc, #504]	@ (8005188 <HAL_UART_IRQHandler+0x3e0>)
 8004f90:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fe fa5c 	bl	8003454 <HAL_DMA_Abort_IT>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d016      	beq.n	8004fd0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004fac:	4610      	mov	r0, r2
 8004fae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb0:	e00e      	b.n	8004fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f99c 	bl	80052f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb8:	e00a      	b.n	8004fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f998 	bl	80052f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc0:	e006      	b.n	8004fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f994 	bl	80052f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004fce:	e175      	b.n	80052bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd0:	bf00      	nop
    return;
 8004fd2:	e173      	b.n	80052bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	f040 814f 	bne.w	800527c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fe2:	f003 0310 	and.w	r3, r3, #16
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f000 8148 	beq.w	800527c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ff0:	f003 0310 	and.w	r3, r3, #16
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 8141 	beq.w	800527c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60bb      	str	r3, [r7, #8]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	60bb      	str	r3, [r7, #8]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	60bb      	str	r3, [r7, #8]
 800500e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800501a:	2b00      	cmp	r3, #0
 800501c:	f000 80b6 	beq.w	800518c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800502c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 8145 	beq.w	80052c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800503a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800503e:	429a      	cmp	r2, r3
 8005040:	f080 813e 	bcs.w	80052c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800504a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	2b20      	cmp	r3, #32
 8005054:	f000 8088 	beq.w	8005168 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	330c      	adds	r3, #12
 800505e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005062:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005066:	e853 3f00 	ldrex	r3, [r3]
 800506a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800506e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005072:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005076:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	330c      	adds	r3, #12
 8005080:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005084:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005088:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005090:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005094:	e841 2300 	strex	r3, r2, [r1]
 8005098:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800509c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1d9      	bne.n	8005058 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	3314      	adds	r3, #20
 80050aa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050ae:	e853 3f00 	ldrex	r3, [r3]
 80050b2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80050b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050b6:	f023 0301 	bic.w	r3, r3, #1
 80050ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3314      	adds	r3, #20
 80050c4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80050c8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80050cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ce:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80050d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80050d4:	e841 2300 	strex	r3, r2, [r1]
 80050d8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80050da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1e1      	bne.n	80050a4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3314      	adds	r3, #20
 80050e6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050ea:	e853 3f00 	ldrex	r3, [r3]
 80050ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80050f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3314      	adds	r3, #20
 8005100:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005104:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005106:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005108:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800510a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800510c:	e841 2300 	strex	r3, r2, [r1]
 8005110:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005112:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1e3      	bne.n	80050e0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2220      	movs	r2, #32
 800511c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	330c      	adds	r3, #12
 800512c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005130:	e853 3f00 	ldrex	r3, [r3]
 8005134:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005136:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005138:	f023 0310 	bic.w	r3, r3, #16
 800513c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	330c      	adds	r3, #12
 8005146:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800514a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800514c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005150:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005152:	e841 2300 	strex	r3, r2, [r1]
 8005156:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005158:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1e3      	bne.n	8005126 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005162:	4618      	mov	r0, r3
 8005164:	f7fe f93b 	bl	80033de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2202      	movs	r2, #2
 800516c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005176:	b29b      	uxth	r3, r3
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	b29b      	uxth	r3, r3
 800517c:	4619      	mov	r1, r3
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f8bf 	bl	8005302 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005184:	e09c      	b.n	80052c0 <HAL_UART_IRQHandler+0x518>
 8005186:	bf00      	nop
 8005188:	080054b9 	.word	0x080054b9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005194:	b29b      	uxth	r3, r3
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f000 808e 	beq.w	80052c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80051a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 8089 	beq.w	80052c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	330c      	adds	r3, #12
 80051b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051bc:	e853 3f00 	ldrex	r3, [r3]
 80051c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	330c      	adds	r3, #12
 80051d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80051d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80051d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051de:	e841 2300 	strex	r3, r2, [r1]
 80051e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1e3      	bne.n	80051b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	3314      	adds	r3, #20
 80051f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f4:	e853 3f00 	ldrex	r3, [r3]
 80051f8:	623b      	str	r3, [r7, #32]
   return(result);
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	f023 0301 	bic.w	r3, r3, #1
 8005200:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	3314      	adds	r3, #20
 800520a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800520e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005210:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005212:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005214:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005216:	e841 2300 	strex	r3, r2, [r1]
 800521a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800521c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1e3      	bne.n	80051ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2220      	movs	r2, #32
 8005226:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	330c      	adds	r3, #12
 8005236:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	e853 3f00 	ldrex	r3, [r3]
 800523e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f023 0310 	bic.w	r3, r3, #16
 8005246:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	330c      	adds	r3, #12
 8005250:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005254:	61fa      	str	r2, [r7, #28]
 8005256:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005258:	69b9      	ldr	r1, [r7, #24]
 800525a:	69fa      	ldr	r2, [r7, #28]
 800525c:	e841 2300 	strex	r3, r2, [r1]
 8005260:	617b      	str	r3, [r7, #20]
   return(result);
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1e3      	bne.n	8005230 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2202      	movs	r2, #2
 800526c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800526e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005272:	4619      	mov	r1, r3
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f844 	bl	8005302 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800527a:	e023      	b.n	80052c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800527c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005284:	2b00      	cmp	r3, #0
 8005286:	d009      	beq.n	800529c <HAL_UART_IRQHandler+0x4f4>
 8005288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800528c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005290:	2b00      	cmp	r3, #0
 8005292:	d003      	beq.n	800529c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f923 	bl	80054e0 <UART_Transmit_IT>
    return;
 800529a:	e014      	b.n	80052c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800529c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00e      	beq.n	80052c6 <HAL_UART_IRQHandler+0x51e>
 80052a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d008      	beq.n	80052c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f962 	bl	800557e <UART_EndTransmit_IT>
    return;
 80052ba:	e004      	b.n	80052c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80052bc:	bf00      	nop
 80052be:	e002      	b.n	80052c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80052c0:	bf00      	nop
 80052c2:	e000      	b.n	80052c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80052c4:	bf00      	nop
  }
}
 80052c6:	37e8      	adds	r7, #232	@ 0xe8
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	bc80      	pop	{r7}
 80052dc:	4770      	bx	lr

080052de <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80052de:	b480      	push	{r7}
 80052e0:	b083      	sub	sp, #12
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bc80      	pop	{r7}
 80052ee:	4770      	bx	lr

080052f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bc80      	pop	{r7}
 8005300:	4770      	bx	lr

08005302 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005302:	b480      	push	{r7}
 8005304:	b083      	sub	sp, #12
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	460b      	mov	r3, r1
 800530c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	bc80      	pop	{r7}
 8005316:	4770      	bx	lr

08005318 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b090      	sub	sp, #64	@ 0x40
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	603b      	str	r3, [r7, #0]
 8005324:	4613      	mov	r3, r2
 8005326:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005328:	e050      	b.n	80053cc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800532a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800532c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005330:	d04c      	beq.n	80053cc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005332:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005334:	2b00      	cmp	r3, #0
 8005336:	d007      	beq.n	8005348 <UART_WaitOnFlagUntilTimeout+0x30>
 8005338:	f7fd ff16 	bl	8003168 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005344:	429a      	cmp	r2, r3
 8005346:	d241      	bcs.n	80053cc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	330c      	adds	r3, #12
 800534e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005352:	e853 3f00 	ldrex	r3, [r3]
 8005356:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800535e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	330c      	adds	r3, #12
 8005366:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005368:	637a      	str	r2, [r7, #52]	@ 0x34
 800536a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800536e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005370:	e841 2300 	strex	r3, r2, [r1]
 8005374:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1e5      	bne.n	8005348 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	3314      	adds	r3, #20
 8005382:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	e853 3f00 	ldrex	r3, [r3]
 800538a:	613b      	str	r3, [r7, #16]
   return(result);
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	f023 0301 	bic.w	r3, r3, #1
 8005392:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3314      	adds	r3, #20
 800539a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800539c:	623a      	str	r2, [r7, #32]
 800539e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a0:	69f9      	ldr	r1, [r7, #28]
 80053a2:	6a3a      	ldr	r2, [r7, #32]
 80053a4:	e841 2300 	strex	r3, r2, [r1]
 80053a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1e5      	bne.n	800537c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2220      	movs	r2, #32
 80053b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2220      	movs	r2, #32
 80053bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e00f      	b.n	80053ec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	4013      	ands	r3, r2
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	429a      	cmp	r2, r3
 80053da:	bf0c      	ite	eq
 80053dc:	2301      	moveq	r3, #1
 80053de:	2300      	movne	r3, #0
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	461a      	mov	r2, r3
 80053e4:	79fb      	ldrb	r3, [r7, #7]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d09f      	beq.n	800532a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3740      	adds	r7, #64	@ 0x40
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b095      	sub	sp, #84	@ 0x54
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	330c      	adds	r3, #12
 8005402:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005406:	e853 3f00 	ldrex	r3, [r3]
 800540a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800540c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005412:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	330c      	adds	r3, #12
 800541a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800541c:	643a      	str	r2, [r7, #64]	@ 0x40
 800541e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005420:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005422:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005424:	e841 2300 	strex	r3, r2, [r1]
 8005428:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800542a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1e5      	bne.n	80053fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3314      	adds	r3, #20
 8005436:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	e853 3f00 	ldrex	r3, [r3]
 800543e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	f023 0301 	bic.w	r3, r3, #1
 8005446:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3314      	adds	r3, #20
 800544e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005450:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005452:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005454:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005456:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005458:	e841 2300 	strex	r3, r2, [r1]
 800545c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800545e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1e5      	bne.n	8005430 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005468:	2b01      	cmp	r3, #1
 800546a:	d119      	bne.n	80054a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	330c      	adds	r3, #12
 8005472:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	e853 3f00 	ldrex	r3, [r3]
 800547a:	60bb      	str	r3, [r7, #8]
   return(result);
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	f023 0310 	bic.w	r3, r3, #16
 8005482:	647b      	str	r3, [r7, #68]	@ 0x44
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	330c      	adds	r3, #12
 800548a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800548c:	61ba      	str	r2, [r7, #24]
 800548e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005490:	6979      	ldr	r1, [r7, #20]
 8005492:	69ba      	ldr	r2, [r7, #24]
 8005494:	e841 2300 	strex	r3, r2, [r1]
 8005498:	613b      	str	r3, [r7, #16]
   return(result);
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1e5      	bne.n	800546c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80054ae:	bf00      	nop
 80054b0:	3754      	adds	r7, #84	@ 0x54
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bc80      	pop	{r7}
 80054b6:	4770      	bx	lr

080054b8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f7ff ff0c 	bl	80052f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054d8:	bf00      	nop
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b21      	cmp	r3, #33	@ 0x21
 80054f2:	d13e      	bne.n	8005572 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054fc:	d114      	bne.n	8005528 <UART_Transmit_IT+0x48>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d110      	bne.n	8005528 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	461a      	mov	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800551a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a1b      	ldr	r3, [r3, #32]
 8005520:	1c9a      	adds	r2, r3, #2
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	621a      	str	r2, [r3, #32]
 8005526:	e008      	b.n	800553a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	1c59      	adds	r1, r3, #1
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	6211      	str	r1, [r2, #32]
 8005532:	781a      	ldrb	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800553e:	b29b      	uxth	r3, r3
 8005540:	3b01      	subs	r3, #1
 8005542:	b29b      	uxth	r3, r3
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	4619      	mov	r1, r3
 8005548:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10f      	bne.n	800556e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68da      	ldr	r2, [r3, #12]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800555c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68da      	ldr	r2, [r3, #12]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800556c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	e000      	b.n	8005574 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005572:	2302      	movs	r3, #2
  }
}
 8005574:	4618      	mov	r0, r3
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	bc80      	pop	{r7}
 800557c:	4770      	bx	lr

0800557e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b082      	sub	sp, #8
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68da      	ldr	r2, [r3, #12]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005594:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2220      	movs	r2, #32
 800559a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff fe94 	bl	80052cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b08c      	sub	sp, #48	@ 0x30
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b22      	cmp	r3, #34	@ 0x22
 80055c0:	f040 80ae 	bne.w	8005720 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055cc:	d117      	bne.n	80055fe <UART_Receive_IT+0x50>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d113      	bne.n	80055fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055de:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f6:	1c9a      	adds	r2, r3, #2
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80055fc:	e026      	b.n	800564c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005602:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005604:	2300      	movs	r3, #0
 8005606:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005610:	d007      	beq.n	8005622 <UART_Receive_IT+0x74>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10a      	bne.n	8005630 <UART_Receive_IT+0x82>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d106      	bne.n	8005630 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	b2da      	uxtb	r2, r3
 800562a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800562c:	701a      	strb	r2, [r3, #0]
 800562e:	e008      	b.n	8005642 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	b2db      	uxtb	r3, r3
 8005638:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800563c:	b2da      	uxtb	r2, r3
 800563e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005640:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005646:	1c5a      	adds	r2, r3, #1
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005650:	b29b      	uxth	r3, r3
 8005652:	3b01      	subs	r3, #1
 8005654:	b29b      	uxth	r3, r3
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	4619      	mov	r1, r3
 800565a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800565c:	2b00      	cmp	r3, #0
 800565e:	d15d      	bne.n	800571c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 0220 	bic.w	r2, r2, #32
 800566e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800567e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695a      	ldr	r2, [r3, #20]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0201 	bic.w	r2, r2, #1
 800568e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2220      	movs	r2, #32
 8005694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d135      	bne.n	8005712 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	330c      	adds	r3, #12
 80056b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	e853 3f00 	ldrex	r3, [r3]
 80056ba:	613b      	str	r3, [r7, #16]
   return(result);
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	f023 0310 	bic.w	r3, r3, #16
 80056c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	330c      	adds	r3, #12
 80056ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056cc:	623a      	str	r2, [r7, #32]
 80056ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d0:	69f9      	ldr	r1, [r7, #28]
 80056d2:	6a3a      	ldr	r2, [r7, #32]
 80056d4:	e841 2300 	strex	r3, r2, [r1]
 80056d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1e5      	bne.n	80056ac <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0310 	and.w	r3, r3, #16
 80056ea:	2b10      	cmp	r3, #16
 80056ec:	d10a      	bne.n	8005704 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056ee:	2300      	movs	r3, #0
 80056f0:	60fb      	str	r3, [r7, #12]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	60fb      	str	r3, [r7, #12]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005708:	4619      	mov	r1, r3
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7ff fdf9 	bl	8005302 <HAL_UARTEx_RxEventCallback>
 8005710:	e002      	b.n	8005718 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7ff fde3 	bl	80052de <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005718:	2300      	movs	r3, #0
 800571a:	e002      	b.n	8005722 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800571c:	2300      	movs	r3, #0
 800571e:	e000      	b.n	8005722 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005720:	2302      	movs	r3, #2
  }
}
 8005722:	4618      	mov	r0, r3
 8005724:	3730      	adds	r7, #48	@ 0x30
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
	...

0800572c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	689a      	ldr	r2, [r3, #8]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	431a      	orrs	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	4313      	orrs	r3, r2
 800575a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005766:	f023 030c 	bic.w	r3, r3, #12
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	6812      	ldr	r2, [r2, #0]
 800576e:	68b9      	ldr	r1, [r7, #8]
 8005770:	430b      	orrs	r3, r1
 8005772:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	699a      	ldr	r2, [r3, #24]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	430a      	orrs	r2, r1
 8005788:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a2c      	ldr	r2, [pc, #176]	@ (8005840 <UART_SetConfig+0x114>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d103      	bne.n	800579c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005794:	f7ff fa02 	bl	8004b9c <HAL_RCC_GetPCLK2Freq>
 8005798:	60f8      	str	r0, [r7, #12]
 800579a:	e002      	b.n	80057a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800579c:	f7ff f9ea 	bl	8004b74 <HAL_RCC_GetPCLK1Freq>
 80057a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	4613      	mov	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	009a      	lsls	r2, r3, #2
 80057ac:	441a      	add	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b8:	4a22      	ldr	r2, [pc, #136]	@ (8005844 <UART_SetConfig+0x118>)
 80057ba:	fba2 2303 	umull	r2, r3, r2, r3
 80057be:	095b      	lsrs	r3, r3, #5
 80057c0:	0119      	lsls	r1, r3, #4
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	4613      	mov	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	4413      	add	r3, r2
 80057ca:	009a      	lsls	r2, r3, #2
 80057cc:	441a      	add	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80057d8:	4b1a      	ldr	r3, [pc, #104]	@ (8005844 <UART_SetConfig+0x118>)
 80057da:	fba3 0302 	umull	r0, r3, r3, r2
 80057de:	095b      	lsrs	r3, r3, #5
 80057e0:	2064      	movs	r0, #100	@ 0x64
 80057e2:	fb00 f303 	mul.w	r3, r0, r3
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	011b      	lsls	r3, r3, #4
 80057ea:	3332      	adds	r3, #50	@ 0x32
 80057ec:	4a15      	ldr	r2, [pc, #84]	@ (8005844 <UART_SetConfig+0x118>)
 80057ee:	fba2 2303 	umull	r2, r3, r2, r3
 80057f2:	095b      	lsrs	r3, r3, #5
 80057f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057f8:	4419      	add	r1, r3
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4613      	mov	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	009a      	lsls	r2, r3, #2
 8005804:	441a      	add	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005810:	4b0c      	ldr	r3, [pc, #48]	@ (8005844 <UART_SetConfig+0x118>)
 8005812:	fba3 0302 	umull	r0, r3, r3, r2
 8005816:	095b      	lsrs	r3, r3, #5
 8005818:	2064      	movs	r0, #100	@ 0x64
 800581a:	fb00 f303 	mul.w	r3, r0, r3
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	011b      	lsls	r3, r3, #4
 8005822:	3332      	adds	r3, #50	@ 0x32
 8005824:	4a07      	ldr	r2, [pc, #28]	@ (8005844 <UART_SetConfig+0x118>)
 8005826:	fba2 2303 	umull	r2, r3, r2, r3
 800582a:	095b      	lsrs	r3, r3, #5
 800582c:	f003 020f 	and.w	r2, r3, #15
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	440a      	add	r2, r1
 8005836:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005838:	bf00      	nop
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	40013800 	.word	0x40013800
 8005844:	51eb851f 	.word	0x51eb851f

08005848 <atof>:
 8005848:	2100      	movs	r1, #0
 800584a:	f000 be03 	b.w	8006454 <strtod>

0800584e <atoi>:
 800584e:	220a      	movs	r2, #10
 8005850:	2100      	movs	r1, #0
 8005852:	f000 be87 	b.w	8006564 <strtol>

08005856 <sulp>:
 8005856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800585a:	460f      	mov	r7, r1
 800585c:	4690      	mov	r8, r2
 800585e:	f003 fce3 	bl	8009228 <__ulp>
 8005862:	4604      	mov	r4, r0
 8005864:	460d      	mov	r5, r1
 8005866:	f1b8 0f00 	cmp.w	r8, #0
 800586a:	d011      	beq.n	8005890 <sulp+0x3a>
 800586c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005870:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005874:	2b00      	cmp	r3, #0
 8005876:	dd0b      	ble.n	8005890 <sulp+0x3a>
 8005878:	2400      	movs	r4, #0
 800587a:	051b      	lsls	r3, r3, #20
 800587c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005880:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005884:	4622      	mov	r2, r4
 8005886:	462b      	mov	r3, r5
 8005888:	f7fa fe26 	bl	80004d8 <__aeabi_dmul>
 800588c:	4604      	mov	r4, r0
 800588e:	460d      	mov	r5, r1
 8005890:	4620      	mov	r0, r4
 8005892:	4629      	mov	r1, r5
 8005894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005898 <_strtod_l>:
 8005898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800589c:	b09f      	sub	sp, #124	@ 0x7c
 800589e:	9217      	str	r2, [sp, #92]	@ 0x5c
 80058a0:	2200      	movs	r2, #0
 80058a2:	460c      	mov	r4, r1
 80058a4:	921a      	str	r2, [sp, #104]	@ 0x68
 80058a6:	f04f 0a00 	mov.w	sl, #0
 80058aa:	f04f 0b00 	mov.w	fp, #0
 80058ae:	460a      	mov	r2, r1
 80058b0:	9005      	str	r0, [sp, #20]
 80058b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80058b4:	7811      	ldrb	r1, [r2, #0]
 80058b6:	292b      	cmp	r1, #43	@ 0x2b
 80058b8:	d048      	beq.n	800594c <_strtod_l+0xb4>
 80058ba:	d836      	bhi.n	800592a <_strtod_l+0x92>
 80058bc:	290d      	cmp	r1, #13
 80058be:	d830      	bhi.n	8005922 <_strtod_l+0x8a>
 80058c0:	2908      	cmp	r1, #8
 80058c2:	d830      	bhi.n	8005926 <_strtod_l+0x8e>
 80058c4:	2900      	cmp	r1, #0
 80058c6:	d039      	beq.n	800593c <_strtod_l+0xa4>
 80058c8:	2200      	movs	r2, #0
 80058ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 80058cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80058ce:	782a      	ldrb	r2, [r5, #0]
 80058d0:	2a30      	cmp	r2, #48	@ 0x30
 80058d2:	f040 80b1 	bne.w	8005a38 <_strtod_l+0x1a0>
 80058d6:	786a      	ldrb	r2, [r5, #1]
 80058d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80058dc:	2a58      	cmp	r2, #88	@ 0x58
 80058de:	d16c      	bne.n	80059ba <_strtod_l+0x122>
 80058e0:	9302      	str	r3, [sp, #8]
 80058e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80058e4:	4a8e      	ldr	r2, [pc, #568]	@ (8005b20 <_strtod_l+0x288>)
 80058e6:	9301      	str	r3, [sp, #4]
 80058e8:	ab1a      	add	r3, sp, #104	@ 0x68
 80058ea:	9300      	str	r3, [sp, #0]
 80058ec:	9805      	ldr	r0, [sp, #20]
 80058ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 80058f0:	a919      	add	r1, sp, #100	@ 0x64
 80058f2:	f002 fd8d 	bl	8008410 <__gethex>
 80058f6:	f010 060f 	ands.w	r6, r0, #15
 80058fa:	4604      	mov	r4, r0
 80058fc:	d005      	beq.n	800590a <_strtod_l+0x72>
 80058fe:	2e06      	cmp	r6, #6
 8005900:	d126      	bne.n	8005950 <_strtod_l+0xb8>
 8005902:	2300      	movs	r3, #0
 8005904:	3501      	adds	r5, #1
 8005906:	9519      	str	r5, [sp, #100]	@ 0x64
 8005908:	930b      	str	r3, [sp, #44]	@ 0x2c
 800590a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800590c:	2b00      	cmp	r3, #0
 800590e:	f040 8584 	bne.w	800641a <_strtod_l+0xb82>
 8005912:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005914:	b1bb      	cbz	r3, 8005946 <_strtod_l+0xae>
 8005916:	4650      	mov	r0, sl
 8005918:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800591c:	b01f      	add	sp, #124	@ 0x7c
 800591e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005922:	2920      	cmp	r1, #32
 8005924:	d1d0      	bne.n	80058c8 <_strtod_l+0x30>
 8005926:	3201      	adds	r2, #1
 8005928:	e7c3      	b.n	80058b2 <_strtod_l+0x1a>
 800592a:	292d      	cmp	r1, #45	@ 0x2d
 800592c:	d1cc      	bne.n	80058c8 <_strtod_l+0x30>
 800592e:	2101      	movs	r1, #1
 8005930:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005932:	1c51      	adds	r1, r2, #1
 8005934:	9119      	str	r1, [sp, #100]	@ 0x64
 8005936:	7852      	ldrb	r2, [r2, #1]
 8005938:	2a00      	cmp	r2, #0
 800593a:	d1c7      	bne.n	80058cc <_strtod_l+0x34>
 800593c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800593e:	9419      	str	r4, [sp, #100]	@ 0x64
 8005940:	2b00      	cmp	r3, #0
 8005942:	f040 8568 	bne.w	8006416 <_strtod_l+0xb7e>
 8005946:	4650      	mov	r0, sl
 8005948:	4659      	mov	r1, fp
 800594a:	e7e7      	b.n	800591c <_strtod_l+0x84>
 800594c:	2100      	movs	r1, #0
 800594e:	e7ef      	b.n	8005930 <_strtod_l+0x98>
 8005950:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005952:	b13a      	cbz	r2, 8005964 <_strtod_l+0xcc>
 8005954:	2135      	movs	r1, #53	@ 0x35
 8005956:	a81c      	add	r0, sp, #112	@ 0x70
 8005958:	f003 fd56 	bl	8009408 <__copybits>
 800595c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800595e:	9805      	ldr	r0, [sp, #20]
 8005960:	f003 f930 	bl	8008bc4 <_Bfree>
 8005964:	3e01      	subs	r6, #1
 8005966:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005968:	2e04      	cmp	r6, #4
 800596a:	d806      	bhi.n	800597a <_strtod_l+0xe2>
 800596c:	e8df f006 	tbb	[pc, r6]
 8005970:	201d0314 	.word	0x201d0314
 8005974:	14          	.byte	0x14
 8005975:	00          	.byte	0x00
 8005976:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800597a:	05e1      	lsls	r1, r4, #23
 800597c:	bf48      	it	mi
 800597e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005982:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005986:	0d1b      	lsrs	r3, r3, #20
 8005988:	051b      	lsls	r3, r3, #20
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1bd      	bne.n	800590a <_strtod_l+0x72>
 800598e:	f001 fde9 	bl	8007564 <__errno>
 8005992:	2322      	movs	r3, #34	@ 0x22
 8005994:	6003      	str	r3, [r0, #0]
 8005996:	e7b8      	b.n	800590a <_strtod_l+0x72>
 8005998:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800599c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80059a0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80059a4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80059a8:	e7e7      	b.n	800597a <_strtod_l+0xe2>
 80059aa:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8005b24 <_strtod_l+0x28c>
 80059ae:	e7e4      	b.n	800597a <_strtod_l+0xe2>
 80059b0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80059b4:	f04f 3aff 	mov.w	sl, #4294967295
 80059b8:	e7df      	b.n	800597a <_strtod_l+0xe2>
 80059ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80059bc:	1c5a      	adds	r2, r3, #1
 80059be:	9219      	str	r2, [sp, #100]	@ 0x64
 80059c0:	785b      	ldrb	r3, [r3, #1]
 80059c2:	2b30      	cmp	r3, #48	@ 0x30
 80059c4:	d0f9      	beq.n	80059ba <_strtod_l+0x122>
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d09f      	beq.n	800590a <_strtod_l+0x72>
 80059ca:	2301      	movs	r3, #1
 80059cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80059ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80059d0:	220a      	movs	r2, #10
 80059d2:	930c      	str	r3, [sp, #48]	@ 0x30
 80059d4:	2300      	movs	r3, #0
 80059d6:	461f      	mov	r7, r3
 80059d8:	9308      	str	r3, [sp, #32]
 80059da:	930a      	str	r3, [sp, #40]	@ 0x28
 80059dc:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80059de:	7805      	ldrb	r5, [r0, #0]
 80059e0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80059e4:	b2d9      	uxtb	r1, r3
 80059e6:	2909      	cmp	r1, #9
 80059e8:	d928      	bls.n	8005a3c <_strtod_l+0x1a4>
 80059ea:	2201      	movs	r2, #1
 80059ec:	494e      	ldr	r1, [pc, #312]	@ (8005b28 <_strtod_l+0x290>)
 80059ee:	f001 fd5c 	bl	80074aa <strncmp>
 80059f2:	2800      	cmp	r0, #0
 80059f4:	d032      	beq.n	8005a5c <_strtod_l+0x1c4>
 80059f6:	2000      	movs	r0, #0
 80059f8:	462a      	mov	r2, r5
 80059fa:	4681      	mov	r9, r0
 80059fc:	463d      	mov	r5, r7
 80059fe:	4603      	mov	r3, r0
 8005a00:	2a65      	cmp	r2, #101	@ 0x65
 8005a02:	d001      	beq.n	8005a08 <_strtod_l+0x170>
 8005a04:	2a45      	cmp	r2, #69	@ 0x45
 8005a06:	d114      	bne.n	8005a32 <_strtod_l+0x19a>
 8005a08:	b91d      	cbnz	r5, 8005a12 <_strtod_l+0x17a>
 8005a0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a0c:	4302      	orrs	r2, r0
 8005a0e:	d095      	beq.n	800593c <_strtod_l+0xa4>
 8005a10:	2500      	movs	r5, #0
 8005a12:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005a14:	1c62      	adds	r2, r4, #1
 8005a16:	9219      	str	r2, [sp, #100]	@ 0x64
 8005a18:	7862      	ldrb	r2, [r4, #1]
 8005a1a:	2a2b      	cmp	r2, #43	@ 0x2b
 8005a1c:	d077      	beq.n	8005b0e <_strtod_l+0x276>
 8005a1e:	2a2d      	cmp	r2, #45	@ 0x2d
 8005a20:	d07b      	beq.n	8005b1a <_strtod_l+0x282>
 8005a22:	f04f 0c00 	mov.w	ip, #0
 8005a26:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005a2a:	2909      	cmp	r1, #9
 8005a2c:	f240 8082 	bls.w	8005b34 <_strtod_l+0x29c>
 8005a30:	9419      	str	r4, [sp, #100]	@ 0x64
 8005a32:	f04f 0800 	mov.w	r8, #0
 8005a36:	e0a2      	b.n	8005b7e <_strtod_l+0x2e6>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	e7c7      	b.n	80059cc <_strtod_l+0x134>
 8005a3c:	2f08      	cmp	r7, #8
 8005a3e:	bfd5      	itete	le
 8005a40:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8005a42:	9908      	ldrgt	r1, [sp, #32]
 8005a44:	fb02 3301 	mlale	r3, r2, r1, r3
 8005a48:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005a4c:	f100 0001 	add.w	r0, r0, #1
 8005a50:	bfd4      	ite	le
 8005a52:	930a      	strle	r3, [sp, #40]	@ 0x28
 8005a54:	9308      	strgt	r3, [sp, #32]
 8005a56:	3701      	adds	r7, #1
 8005a58:	9019      	str	r0, [sp, #100]	@ 0x64
 8005a5a:	e7bf      	b.n	80059dc <_strtod_l+0x144>
 8005a5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	9219      	str	r2, [sp, #100]	@ 0x64
 8005a62:	785a      	ldrb	r2, [r3, #1]
 8005a64:	b37f      	cbz	r7, 8005ac6 <_strtod_l+0x22e>
 8005a66:	4681      	mov	r9, r0
 8005a68:	463d      	mov	r5, r7
 8005a6a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005a6e:	2b09      	cmp	r3, #9
 8005a70:	d912      	bls.n	8005a98 <_strtod_l+0x200>
 8005a72:	2301      	movs	r3, #1
 8005a74:	e7c4      	b.n	8005a00 <_strtod_l+0x168>
 8005a76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005a78:	3001      	adds	r0, #1
 8005a7a:	1c5a      	adds	r2, r3, #1
 8005a7c:	9219      	str	r2, [sp, #100]	@ 0x64
 8005a7e:	785a      	ldrb	r2, [r3, #1]
 8005a80:	2a30      	cmp	r2, #48	@ 0x30
 8005a82:	d0f8      	beq.n	8005a76 <_strtod_l+0x1de>
 8005a84:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	f200 84cb 	bhi.w	8006424 <_strtod_l+0xb8c>
 8005a8e:	4681      	mov	r9, r0
 8005a90:	2000      	movs	r0, #0
 8005a92:	4605      	mov	r5, r0
 8005a94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005a96:	930c      	str	r3, [sp, #48]	@ 0x30
 8005a98:	3a30      	subs	r2, #48	@ 0x30
 8005a9a:	f100 0301 	add.w	r3, r0, #1
 8005a9e:	d02a      	beq.n	8005af6 <_strtod_l+0x25e>
 8005aa0:	4499      	add	r9, r3
 8005aa2:	210a      	movs	r1, #10
 8005aa4:	462b      	mov	r3, r5
 8005aa6:	eb00 0c05 	add.w	ip, r0, r5
 8005aaa:	4563      	cmp	r3, ip
 8005aac:	d10d      	bne.n	8005aca <_strtod_l+0x232>
 8005aae:	1c69      	adds	r1, r5, #1
 8005ab0:	4401      	add	r1, r0
 8005ab2:	4428      	add	r0, r5
 8005ab4:	2808      	cmp	r0, #8
 8005ab6:	dc16      	bgt.n	8005ae6 <_strtod_l+0x24e>
 8005ab8:	230a      	movs	r3, #10
 8005aba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005abc:	fb03 2300 	mla	r3, r3, r0, r2
 8005ac0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	e018      	b.n	8005af8 <_strtod_l+0x260>
 8005ac6:	4638      	mov	r0, r7
 8005ac8:	e7da      	b.n	8005a80 <_strtod_l+0x1e8>
 8005aca:	2b08      	cmp	r3, #8
 8005acc:	f103 0301 	add.w	r3, r3, #1
 8005ad0:	dc03      	bgt.n	8005ada <_strtod_l+0x242>
 8005ad2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005ad4:	434e      	muls	r6, r1
 8005ad6:	960a      	str	r6, [sp, #40]	@ 0x28
 8005ad8:	e7e7      	b.n	8005aaa <_strtod_l+0x212>
 8005ada:	2b10      	cmp	r3, #16
 8005adc:	bfde      	ittt	le
 8005ade:	9e08      	ldrle	r6, [sp, #32]
 8005ae0:	434e      	mulle	r6, r1
 8005ae2:	9608      	strle	r6, [sp, #32]
 8005ae4:	e7e1      	b.n	8005aaa <_strtod_l+0x212>
 8005ae6:	280f      	cmp	r0, #15
 8005ae8:	dceb      	bgt.n	8005ac2 <_strtod_l+0x22a>
 8005aea:	230a      	movs	r3, #10
 8005aec:	9808      	ldr	r0, [sp, #32]
 8005aee:	fb03 2300 	mla	r3, r3, r0, r2
 8005af2:	9308      	str	r3, [sp, #32]
 8005af4:	e7e5      	b.n	8005ac2 <_strtod_l+0x22a>
 8005af6:	4629      	mov	r1, r5
 8005af8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005afa:	460d      	mov	r5, r1
 8005afc:	1c50      	adds	r0, r2, #1
 8005afe:	9019      	str	r0, [sp, #100]	@ 0x64
 8005b00:	7852      	ldrb	r2, [r2, #1]
 8005b02:	4618      	mov	r0, r3
 8005b04:	e7b1      	b.n	8005a6a <_strtod_l+0x1d2>
 8005b06:	f04f 0900 	mov.w	r9, #0
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e77d      	b.n	8005a0a <_strtod_l+0x172>
 8005b0e:	f04f 0c00 	mov.w	ip, #0
 8005b12:	1ca2      	adds	r2, r4, #2
 8005b14:	9219      	str	r2, [sp, #100]	@ 0x64
 8005b16:	78a2      	ldrb	r2, [r4, #2]
 8005b18:	e785      	b.n	8005a26 <_strtod_l+0x18e>
 8005b1a:	f04f 0c01 	mov.w	ip, #1
 8005b1e:	e7f8      	b.n	8005b12 <_strtod_l+0x27a>
 8005b20:	0800c2e8 	.word	0x0800c2e8
 8005b24:	7ff00000 	.word	0x7ff00000
 8005b28:	0800c2d2 	.word	0x0800c2d2
 8005b2c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005b2e:	1c51      	adds	r1, r2, #1
 8005b30:	9119      	str	r1, [sp, #100]	@ 0x64
 8005b32:	7852      	ldrb	r2, [r2, #1]
 8005b34:	2a30      	cmp	r2, #48	@ 0x30
 8005b36:	d0f9      	beq.n	8005b2c <_strtod_l+0x294>
 8005b38:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005b3c:	2908      	cmp	r1, #8
 8005b3e:	f63f af78 	bhi.w	8005a32 <_strtod_l+0x19a>
 8005b42:	f04f 080a 	mov.w	r8, #10
 8005b46:	3a30      	subs	r2, #48	@ 0x30
 8005b48:	920e      	str	r2, [sp, #56]	@ 0x38
 8005b4a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005b4c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005b4e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005b50:	1c56      	adds	r6, r2, #1
 8005b52:	9619      	str	r6, [sp, #100]	@ 0x64
 8005b54:	7852      	ldrb	r2, [r2, #1]
 8005b56:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005b5a:	f1be 0f09 	cmp.w	lr, #9
 8005b5e:	d939      	bls.n	8005bd4 <_strtod_l+0x33c>
 8005b60:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005b62:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005b66:	1a76      	subs	r6, r6, r1
 8005b68:	2e08      	cmp	r6, #8
 8005b6a:	dc03      	bgt.n	8005b74 <_strtod_l+0x2dc>
 8005b6c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005b6e:	4588      	cmp	r8, r1
 8005b70:	bfa8      	it	ge
 8005b72:	4688      	movge	r8, r1
 8005b74:	f1bc 0f00 	cmp.w	ip, #0
 8005b78:	d001      	beq.n	8005b7e <_strtod_l+0x2e6>
 8005b7a:	f1c8 0800 	rsb	r8, r8, #0
 8005b7e:	2d00      	cmp	r5, #0
 8005b80:	d14e      	bne.n	8005c20 <_strtod_l+0x388>
 8005b82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005b84:	4308      	orrs	r0, r1
 8005b86:	f47f aec0 	bne.w	800590a <_strtod_l+0x72>
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f47f aed6 	bne.w	800593c <_strtod_l+0xa4>
 8005b90:	2a69      	cmp	r2, #105	@ 0x69
 8005b92:	d028      	beq.n	8005be6 <_strtod_l+0x34e>
 8005b94:	dc25      	bgt.n	8005be2 <_strtod_l+0x34a>
 8005b96:	2a49      	cmp	r2, #73	@ 0x49
 8005b98:	d025      	beq.n	8005be6 <_strtod_l+0x34e>
 8005b9a:	2a4e      	cmp	r2, #78	@ 0x4e
 8005b9c:	f47f aece 	bne.w	800593c <_strtod_l+0xa4>
 8005ba0:	499a      	ldr	r1, [pc, #616]	@ (8005e0c <_strtod_l+0x574>)
 8005ba2:	a819      	add	r0, sp, #100	@ 0x64
 8005ba4:	f002 fe56 	bl	8008854 <__match>
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	f43f aec7 	beq.w	800593c <_strtod_l+0xa4>
 8005bae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	2b28      	cmp	r3, #40	@ 0x28
 8005bb4:	d12e      	bne.n	8005c14 <_strtod_l+0x37c>
 8005bb6:	4996      	ldr	r1, [pc, #600]	@ (8005e10 <_strtod_l+0x578>)
 8005bb8:	aa1c      	add	r2, sp, #112	@ 0x70
 8005bba:	a819      	add	r0, sp, #100	@ 0x64
 8005bbc:	f002 fe5e 	bl	800887c <__hexnan>
 8005bc0:	2805      	cmp	r0, #5
 8005bc2:	d127      	bne.n	8005c14 <_strtod_l+0x37c>
 8005bc4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005bc6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005bca:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005bce:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005bd2:	e69a      	b.n	800590a <_strtod_l+0x72>
 8005bd4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005bd6:	fb08 2101 	mla	r1, r8, r1, r2
 8005bda:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005bde:	920e      	str	r2, [sp, #56]	@ 0x38
 8005be0:	e7b5      	b.n	8005b4e <_strtod_l+0x2b6>
 8005be2:	2a6e      	cmp	r2, #110	@ 0x6e
 8005be4:	e7da      	b.n	8005b9c <_strtod_l+0x304>
 8005be6:	498b      	ldr	r1, [pc, #556]	@ (8005e14 <_strtod_l+0x57c>)
 8005be8:	a819      	add	r0, sp, #100	@ 0x64
 8005bea:	f002 fe33 	bl	8008854 <__match>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	f43f aea4 	beq.w	800593c <_strtod_l+0xa4>
 8005bf4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005bf6:	4988      	ldr	r1, [pc, #544]	@ (8005e18 <_strtod_l+0x580>)
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	a819      	add	r0, sp, #100	@ 0x64
 8005bfc:	9319      	str	r3, [sp, #100]	@ 0x64
 8005bfe:	f002 fe29 	bl	8008854 <__match>
 8005c02:	b910      	cbnz	r0, 8005c0a <_strtod_l+0x372>
 8005c04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c06:	3301      	adds	r3, #1
 8005c08:	9319      	str	r3, [sp, #100]	@ 0x64
 8005c0a:	f04f 0a00 	mov.w	sl, #0
 8005c0e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8005e1c <_strtod_l+0x584>
 8005c12:	e67a      	b.n	800590a <_strtod_l+0x72>
 8005c14:	4882      	ldr	r0, [pc, #520]	@ (8005e20 <_strtod_l+0x588>)
 8005c16:	f001 fcef 	bl	80075f8 <nan>
 8005c1a:	4682      	mov	sl, r0
 8005c1c:	468b      	mov	fp, r1
 8005c1e:	e674      	b.n	800590a <_strtod_l+0x72>
 8005c20:	eba8 0309 	sub.w	r3, r8, r9
 8005c24:	2f00      	cmp	r7, #0
 8005c26:	bf08      	it	eq
 8005c28:	462f      	moveq	r7, r5
 8005c2a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005c2c:	2d10      	cmp	r5, #16
 8005c2e:	462c      	mov	r4, r5
 8005c30:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c32:	bfa8      	it	ge
 8005c34:	2410      	movge	r4, #16
 8005c36:	f7fa fbd5 	bl	80003e4 <__aeabi_ui2d>
 8005c3a:	2d09      	cmp	r5, #9
 8005c3c:	4682      	mov	sl, r0
 8005c3e:	468b      	mov	fp, r1
 8005c40:	dc11      	bgt.n	8005c66 <_strtod_l+0x3ce>
 8005c42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f43f ae60 	beq.w	800590a <_strtod_l+0x72>
 8005c4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c4c:	dd76      	ble.n	8005d3c <_strtod_l+0x4a4>
 8005c4e:	2b16      	cmp	r3, #22
 8005c50:	dc5d      	bgt.n	8005d0e <_strtod_l+0x476>
 8005c52:	4974      	ldr	r1, [pc, #464]	@ (8005e24 <_strtod_l+0x58c>)
 8005c54:	4652      	mov	r2, sl
 8005c56:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005c5a:	465b      	mov	r3, fp
 8005c5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c60:	f7fa fc3a 	bl	80004d8 <__aeabi_dmul>
 8005c64:	e7d9      	b.n	8005c1a <_strtod_l+0x382>
 8005c66:	4b6f      	ldr	r3, [pc, #444]	@ (8005e24 <_strtod_l+0x58c>)
 8005c68:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c6c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005c70:	f7fa fc32 	bl	80004d8 <__aeabi_dmul>
 8005c74:	4682      	mov	sl, r0
 8005c76:	9808      	ldr	r0, [sp, #32]
 8005c78:	468b      	mov	fp, r1
 8005c7a:	f7fa fbb3 	bl	80003e4 <__aeabi_ui2d>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	460b      	mov	r3, r1
 8005c82:	4650      	mov	r0, sl
 8005c84:	4659      	mov	r1, fp
 8005c86:	f7fa fa71 	bl	800016c <__adddf3>
 8005c8a:	2d0f      	cmp	r5, #15
 8005c8c:	4682      	mov	sl, r0
 8005c8e:	468b      	mov	fp, r1
 8005c90:	ddd7      	ble.n	8005c42 <_strtod_l+0x3aa>
 8005c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c94:	1b2c      	subs	r4, r5, r4
 8005c96:	441c      	add	r4, r3
 8005c98:	2c00      	cmp	r4, #0
 8005c9a:	f340 8096 	ble.w	8005dca <_strtod_l+0x532>
 8005c9e:	f014 030f 	ands.w	r3, r4, #15
 8005ca2:	d00a      	beq.n	8005cba <_strtod_l+0x422>
 8005ca4:	495f      	ldr	r1, [pc, #380]	@ (8005e24 <_strtod_l+0x58c>)
 8005ca6:	4652      	mov	r2, sl
 8005ca8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005cac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cb0:	465b      	mov	r3, fp
 8005cb2:	f7fa fc11 	bl	80004d8 <__aeabi_dmul>
 8005cb6:	4682      	mov	sl, r0
 8005cb8:	468b      	mov	fp, r1
 8005cba:	f034 040f 	bics.w	r4, r4, #15
 8005cbe:	d073      	beq.n	8005da8 <_strtod_l+0x510>
 8005cc0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005cc4:	dd48      	ble.n	8005d58 <_strtod_l+0x4c0>
 8005cc6:	2400      	movs	r4, #0
 8005cc8:	46a0      	mov	r8, r4
 8005cca:	46a1      	mov	r9, r4
 8005ccc:	940a      	str	r4, [sp, #40]	@ 0x28
 8005cce:	2322      	movs	r3, #34	@ 0x22
 8005cd0:	f04f 0a00 	mov.w	sl, #0
 8005cd4:	9a05      	ldr	r2, [sp, #20]
 8005cd6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8005e1c <_strtod_l+0x584>
 8005cda:	6013      	str	r3, [r2, #0]
 8005cdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f43f ae13 	beq.w	800590a <_strtod_l+0x72>
 8005ce4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005ce6:	9805      	ldr	r0, [sp, #20]
 8005ce8:	f002 ff6c 	bl	8008bc4 <_Bfree>
 8005cec:	4649      	mov	r1, r9
 8005cee:	9805      	ldr	r0, [sp, #20]
 8005cf0:	f002 ff68 	bl	8008bc4 <_Bfree>
 8005cf4:	4641      	mov	r1, r8
 8005cf6:	9805      	ldr	r0, [sp, #20]
 8005cf8:	f002 ff64 	bl	8008bc4 <_Bfree>
 8005cfc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005cfe:	9805      	ldr	r0, [sp, #20]
 8005d00:	f002 ff60 	bl	8008bc4 <_Bfree>
 8005d04:	4621      	mov	r1, r4
 8005d06:	9805      	ldr	r0, [sp, #20]
 8005d08:	f002 ff5c 	bl	8008bc4 <_Bfree>
 8005d0c:	e5fd      	b.n	800590a <_strtod_l+0x72>
 8005d0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d10:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005d14:	4293      	cmp	r3, r2
 8005d16:	dbbc      	blt.n	8005c92 <_strtod_l+0x3fa>
 8005d18:	4c42      	ldr	r4, [pc, #264]	@ (8005e24 <_strtod_l+0x58c>)
 8005d1a:	f1c5 050f 	rsb	r5, r5, #15
 8005d1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005d22:	4652      	mov	r2, sl
 8005d24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d28:	465b      	mov	r3, fp
 8005d2a:	f7fa fbd5 	bl	80004d8 <__aeabi_dmul>
 8005d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d30:	1b5d      	subs	r5, r3, r5
 8005d32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005d36:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005d3a:	e791      	b.n	8005c60 <_strtod_l+0x3c8>
 8005d3c:	3316      	adds	r3, #22
 8005d3e:	dba8      	blt.n	8005c92 <_strtod_l+0x3fa>
 8005d40:	4b38      	ldr	r3, [pc, #224]	@ (8005e24 <_strtod_l+0x58c>)
 8005d42:	eba9 0808 	sub.w	r8, r9, r8
 8005d46:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005d4a:	4650      	mov	r0, sl
 8005d4c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005d50:	4659      	mov	r1, fp
 8005d52:	f7fa fceb 	bl	800072c <__aeabi_ddiv>
 8005d56:	e760      	b.n	8005c1a <_strtod_l+0x382>
 8005d58:	4b33      	ldr	r3, [pc, #204]	@ (8005e28 <_strtod_l+0x590>)
 8005d5a:	4650      	mov	r0, sl
 8005d5c:	9308      	str	r3, [sp, #32]
 8005d5e:	2300      	movs	r3, #0
 8005d60:	4659      	mov	r1, fp
 8005d62:	461e      	mov	r6, r3
 8005d64:	1124      	asrs	r4, r4, #4
 8005d66:	2c01      	cmp	r4, #1
 8005d68:	dc21      	bgt.n	8005dae <_strtod_l+0x516>
 8005d6a:	b10b      	cbz	r3, 8005d70 <_strtod_l+0x4d8>
 8005d6c:	4682      	mov	sl, r0
 8005d6e:	468b      	mov	fp, r1
 8005d70:	492d      	ldr	r1, [pc, #180]	@ (8005e28 <_strtod_l+0x590>)
 8005d72:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005d76:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005d7a:	4652      	mov	r2, sl
 8005d7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d80:	465b      	mov	r3, fp
 8005d82:	f7fa fba9 	bl	80004d8 <__aeabi_dmul>
 8005d86:	4b25      	ldr	r3, [pc, #148]	@ (8005e1c <_strtod_l+0x584>)
 8005d88:	460a      	mov	r2, r1
 8005d8a:	400b      	ands	r3, r1
 8005d8c:	4927      	ldr	r1, [pc, #156]	@ (8005e2c <_strtod_l+0x594>)
 8005d8e:	4682      	mov	sl, r0
 8005d90:	428b      	cmp	r3, r1
 8005d92:	d898      	bhi.n	8005cc6 <_strtod_l+0x42e>
 8005d94:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005d98:	428b      	cmp	r3, r1
 8005d9a:	bf86      	itte	hi
 8005d9c:	f04f 3aff 	movhi.w	sl, #4294967295
 8005da0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8005e30 <_strtod_l+0x598>
 8005da4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005da8:	2300      	movs	r3, #0
 8005daa:	9308      	str	r3, [sp, #32]
 8005dac:	e07a      	b.n	8005ea4 <_strtod_l+0x60c>
 8005dae:	07e2      	lsls	r2, r4, #31
 8005db0:	d505      	bpl.n	8005dbe <_strtod_l+0x526>
 8005db2:	9b08      	ldr	r3, [sp, #32]
 8005db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db8:	f7fa fb8e 	bl	80004d8 <__aeabi_dmul>
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	9a08      	ldr	r2, [sp, #32]
 8005dc0:	3601      	adds	r6, #1
 8005dc2:	3208      	adds	r2, #8
 8005dc4:	1064      	asrs	r4, r4, #1
 8005dc6:	9208      	str	r2, [sp, #32]
 8005dc8:	e7cd      	b.n	8005d66 <_strtod_l+0x4ce>
 8005dca:	d0ed      	beq.n	8005da8 <_strtod_l+0x510>
 8005dcc:	4264      	negs	r4, r4
 8005dce:	f014 020f 	ands.w	r2, r4, #15
 8005dd2:	d00a      	beq.n	8005dea <_strtod_l+0x552>
 8005dd4:	4b13      	ldr	r3, [pc, #76]	@ (8005e24 <_strtod_l+0x58c>)
 8005dd6:	4650      	mov	r0, sl
 8005dd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ddc:	4659      	mov	r1, fp
 8005dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de2:	f7fa fca3 	bl	800072c <__aeabi_ddiv>
 8005de6:	4682      	mov	sl, r0
 8005de8:	468b      	mov	fp, r1
 8005dea:	1124      	asrs	r4, r4, #4
 8005dec:	d0dc      	beq.n	8005da8 <_strtod_l+0x510>
 8005dee:	2c1f      	cmp	r4, #31
 8005df0:	dd20      	ble.n	8005e34 <_strtod_l+0x59c>
 8005df2:	2400      	movs	r4, #0
 8005df4:	46a0      	mov	r8, r4
 8005df6:	46a1      	mov	r9, r4
 8005df8:	940a      	str	r4, [sp, #40]	@ 0x28
 8005dfa:	2322      	movs	r3, #34	@ 0x22
 8005dfc:	9a05      	ldr	r2, [sp, #20]
 8005dfe:	f04f 0a00 	mov.w	sl, #0
 8005e02:	f04f 0b00 	mov.w	fp, #0
 8005e06:	6013      	str	r3, [r2, #0]
 8005e08:	e768      	b.n	8005cdc <_strtod_l+0x444>
 8005e0a:	bf00      	nop
 8005e0c:	0800c436 	.word	0x0800c436
 8005e10:	0800c2d4 	.word	0x0800c2d4
 8005e14:	0800c42e 	.word	0x0800c42e
 8005e18:	0800c46d 	.word	0x0800c46d
 8005e1c:	7ff00000 	.word	0x7ff00000
 8005e20:	0800c6fc 	.word	0x0800c6fc
 8005e24:	0800c5e8 	.word	0x0800c5e8
 8005e28:	0800c5c0 	.word	0x0800c5c0
 8005e2c:	7ca00000 	.word	0x7ca00000
 8005e30:	7fefffff 	.word	0x7fefffff
 8005e34:	f014 0310 	ands.w	r3, r4, #16
 8005e38:	bf18      	it	ne
 8005e3a:	236a      	movne	r3, #106	@ 0x6a
 8005e3c:	4650      	mov	r0, sl
 8005e3e:	9308      	str	r3, [sp, #32]
 8005e40:	4659      	mov	r1, fp
 8005e42:	2300      	movs	r3, #0
 8005e44:	4ea9      	ldr	r6, [pc, #676]	@ (80060ec <_strtod_l+0x854>)
 8005e46:	07e2      	lsls	r2, r4, #31
 8005e48:	d504      	bpl.n	8005e54 <_strtod_l+0x5bc>
 8005e4a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e4e:	f7fa fb43 	bl	80004d8 <__aeabi_dmul>
 8005e52:	2301      	movs	r3, #1
 8005e54:	1064      	asrs	r4, r4, #1
 8005e56:	f106 0608 	add.w	r6, r6, #8
 8005e5a:	d1f4      	bne.n	8005e46 <_strtod_l+0x5ae>
 8005e5c:	b10b      	cbz	r3, 8005e62 <_strtod_l+0x5ca>
 8005e5e:	4682      	mov	sl, r0
 8005e60:	468b      	mov	fp, r1
 8005e62:	9b08      	ldr	r3, [sp, #32]
 8005e64:	b1b3      	cbz	r3, 8005e94 <_strtod_l+0x5fc>
 8005e66:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005e6a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	4659      	mov	r1, fp
 8005e72:	dd0f      	ble.n	8005e94 <_strtod_l+0x5fc>
 8005e74:	2b1f      	cmp	r3, #31
 8005e76:	dd57      	ble.n	8005f28 <_strtod_l+0x690>
 8005e78:	2b34      	cmp	r3, #52	@ 0x34
 8005e7a:	bfd8      	it	le
 8005e7c:	f04f 33ff 	movle.w	r3, #4294967295
 8005e80:	f04f 0a00 	mov.w	sl, #0
 8005e84:	bfcf      	iteee	gt
 8005e86:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005e8a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8005e8e:	4093      	lslle	r3, r2
 8005e90:	ea03 0b01 	andle.w	fp, r3, r1
 8005e94:	2200      	movs	r2, #0
 8005e96:	2300      	movs	r3, #0
 8005e98:	4650      	mov	r0, sl
 8005e9a:	4659      	mov	r1, fp
 8005e9c:	f7fa fd84 	bl	80009a8 <__aeabi_dcmpeq>
 8005ea0:	2800      	cmp	r0, #0
 8005ea2:	d1a6      	bne.n	8005df2 <_strtod_l+0x55a>
 8005ea4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ea6:	463a      	mov	r2, r7
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005eac:	462b      	mov	r3, r5
 8005eae:	9805      	ldr	r0, [sp, #20]
 8005eb0:	f002 fef0 	bl	8008c94 <__s2b>
 8005eb4:	900a      	str	r0, [sp, #40]	@ 0x28
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	f43f af05 	beq.w	8005cc6 <_strtod_l+0x42e>
 8005ebc:	2400      	movs	r4, #0
 8005ebe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ec0:	eba9 0308 	sub.w	r3, r9, r8
 8005ec4:	2a00      	cmp	r2, #0
 8005ec6:	bfa8      	it	ge
 8005ec8:	2300      	movge	r3, #0
 8005eca:	46a0      	mov	r8, r4
 8005ecc:	9312      	str	r3, [sp, #72]	@ 0x48
 8005ece:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005ed2:	9316      	str	r3, [sp, #88]	@ 0x58
 8005ed4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ed6:	9805      	ldr	r0, [sp, #20]
 8005ed8:	6859      	ldr	r1, [r3, #4]
 8005eda:	f002 fe33 	bl	8008b44 <_Balloc>
 8005ede:	4681      	mov	r9, r0
 8005ee0:	2800      	cmp	r0, #0
 8005ee2:	f43f aef4 	beq.w	8005cce <_strtod_l+0x436>
 8005ee6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ee8:	300c      	adds	r0, #12
 8005eea:	691a      	ldr	r2, [r3, #16]
 8005eec:	f103 010c 	add.w	r1, r3, #12
 8005ef0:	3202      	adds	r2, #2
 8005ef2:	0092      	lsls	r2, r2, #2
 8005ef4:	f001 fb71 	bl	80075da <memcpy>
 8005ef8:	ab1c      	add	r3, sp, #112	@ 0x70
 8005efa:	9301      	str	r3, [sp, #4]
 8005efc:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	4652      	mov	r2, sl
 8005f02:	465b      	mov	r3, fp
 8005f04:	9805      	ldr	r0, [sp, #20]
 8005f06:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8005f0a:	f003 f9f5 	bl	80092f8 <__d2b>
 8005f0e:	901a      	str	r0, [sp, #104]	@ 0x68
 8005f10:	2800      	cmp	r0, #0
 8005f12:	f43f aedc 	beq.w	8005cce <_strtod_l+0x436>
 8005f16:	2101      	movs	r1, #1
 8005f18:	9805      	ldr	r0, [sp, #20]
 8005f1a:	f002 ff51 	bl	8008dc0 <__i2b>
 8005f1e:	4680      	mov	r8, r0
 8005f20:	b948      	cbnz	r0, 8005f36 <_strtod_l+0x69e>
 8005f22:	f04f 0800 	mov.w	r8, #0
 8005f26:	e6d2      	b.n	8005cce <_strtod_l+0x436>
 8005f28:	f04f 32ff 	mov.w	r2, #4294967295
 8005f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f30:	ea03 0a0a 	and.w	sl, r3, sl
 8005f34:	e7ae      	b.n	8005e94 <_strtod_l+0x5fc>
 8005f36:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8005f38:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8005f3a:	2d00      	cmp	r5, #0
 8005f3c:	bfab      	itete	ge
 8005f3e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005f40:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005f42:	18ef      	addge	r7, r5, r3
 8005f44:	1b5e      	sublt	r6, r3, r5
 8005f46:	9b08      	ldr	r3, [sp, #32]
 8005f48:	bfa8      	it	ge
 8005f4a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005f4c:	eba5 0503 	sub.w	r5, r5, r3
 8005f50:	4415      	add	r5, r2
 8005f52:	4b67      	ldr	r3, [pc, #412]	@ (80060f0 <_strtod_l+0x858>)
 8005f54:	f105 35ff 	add.w	r5, r5, #4294967295
 8005f58:	bfb8      	it	lt
 8005f5a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8005f5c:	429d      	cmp	r5, r3
 8005f5e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005f62:	da50      	bge.n	8006006 <_strtod_l+0x76e>
 8005f64:	1b5b      	subs	r3, r3, r5
 8005f66:	2b1f      	cmp	r3, #31
 8005f68:	f04f 0101 	mov.w	r1, #1
 8005f6c:	eba2 0203 	sub.w	r2, r2, r3
 8005f70:	dc3d      	bgt.n	8005fee <_strtod_l+0x756>
 8005f72:	fa01 f303 	lsl.w	r3, r1, r3
 8005f76:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005f78:	2300      	movs	r3, #0
 8005f7a:	9310      	str	r3, [sp, #64]	@ 0x40
 8005f7c:	18bd      	adds	r5, r7, r2
 8005f7e:	9b08      	ldr	r3, [sp, #32]
 8005f80:	42af      	cmp	r7, r5
 8005f82:	4416      	add	r6, r2
 8005f84:	441e      	add	r6, r3
 8005f86:	463b      	mov	r3, r7
 8005f88:	bfa8      	it	ge
 8005f8a:	462b      	movge	r3, r5
 8005f8c:	42b3      	cmp	r3, r6
 8005f8e:	bfa8      	it	ge
 8005f90:	4633      	movge	r3, r6
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	bfc2      	ittt	gt
 8005f96:	1aed      	subgt	r5, r5, r3
 8005f98:	1af6      	subgt	r6, r6, r3
 8005f9a:	1aff      	subgt	r7, r7, r3
 8005f9c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	dd16      	ble.n	8005fd0 <_strtod_l+0x738>
 8005fa2:	4641      	mov	r1, r8
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	9805      	ldr	r0, [sp, #20]
 8005fa8:	f002 ffc8 	bl	8008f3c <__pow5mult>
 8005fac:	4680      	mov	r8, r0
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	d0b7      	beq.n	8005f22 <_strtod_l+0x68a>
 8005fb2:	4601      	mov	r1, r0
 8005fb4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005fb6:	9805      	ldr	r0, [sp, #20]
 8005fb8:	f002 ff18 	bl	8008dec <__multiply>
 8005fbc:	900e      	str	r0, [sp, #56]	@ 0x38
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	f43f ae85 	beq.w	8005cce <_strtod_l+0x436>
 8005fc4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005fc6:	9805      	ldr	r0, [sp, #20]
 8005fc8:	f002 fdfc 	bl	8008bc4 <_Bfree>
 8005fcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005fce:	931a      	str	r3, [sp, #104]	@ 0x68
 8005fd0:	2d00      	cmp	r5, #0
 8005fd2:	dc1d      	bgt.n	8006010 <_strtod_l+0x778>
 8005fd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	dd23      	ble.n	8006022 <_strtod_l+0x78a>
 8005fda:	4649      	mov	r1, r9
 8005fdc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8005fde:	9805      	ldr	r0, [sp, #20]
 8005fe0:	f002 ffac 	bl	8008f3c <__pow5mult>
 8005fe4:	4681      	mov	r9, r0
 8005fe6:	b9e0      	cbnz	r0, 8006022 <_strtod_l+0x78a>
 8005fe8:	f04f 0900 	mov.w	r9, #0
 8005fec:	e66f      	b.n	8005cce <_strtod_l+0x436>
 8005fee:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8005ff2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8005ff6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8005ffa:	35e2      	adds	r5, #226	@ 0xe2
 8005ffc:	fa01 f305 	lsl.w	r3, r1, r5
 8006000:	9310      	str	r3, [sp, #64]	@ 0x40
 8006002:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006004:	e7ba      	b.n	8005f7c <_strtod_l+0x6e4>
 8006006:	2300      	movs	r3, #0
 8006008:	9310      	str	r3, [sp, #64]	@ 0x40
 800600a:	2301      	movs	r3, #1
 800600c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800600e:	e7b5      	b.n	8005f7c <_strtod_l+0x6e4>
 8006010:	462a      	mov	r2, r5
 8006012:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006014:	9805      	ldr	r0, [sp, #20]
 8006016:	f002 ffeb 	bl	8008ff0 <__lshift>
 800601a:	901a      	str	r0, [sp, #104]	@ 0x68
 800601c:	2800      	cmp	r0, #0
 800601e:	d1d9      	bne.n	8005fd4 <_strtod_l+0x73c>
 8006020:	e655      	b.n	8005cce <_strtod_l+0x436>
 8006022:	2e00      	cmp	r6, #0
 8006024:	dd07      	ble.n	8006036 <_strtod_l+0x79e>
 8006026:	4649      	mov	r1, r9
 8006028:	4632      	mov	r2, r6
 800602a:	9805      	ldr	r0, [sp, #20]
 800602c:	f002 ffe0 	bl	8008ff0 <__lshift>
 8006030:	4681      	mov	r9, r0
 8006032:	2800      	cmp	r0, #0
 8006034:	d0d8      	beq.n	8005fe8 <_strtod_l+0x750>
 8006036:	2f00      	cmp	r7, #0
 8006038:	dd08      	ble.n	800604c <_strtod_l+0x7b4>
 800603a:	4641      	mov	r1, r8
 800603c:	463a      	mov	r2, r7
 800603e:	9805      	ldr	r0, [sp, #20]
 8006040:	f002 ffd6 	bl	8008ff0 <__lshift>
 8006044:	4680      	mov	r8, r0
 8006046:	2800      	cmp	r0, #0
 8006048:	f43f ae41 	beq.w	8005cce <_strtod_l+0x436>
 800604c:	464a      	mov	r2, r9
 800604e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006050:	9805      	ldr	r0, [sp, #20]
 8006052:	f003 f855 	bl	8009100 <__mdiff>
 8006056:	4604      	mov	r4, r0
 8006058:	2800      	cmp	r0, #0
 800605a:	f43f ae38 	beq.w	8005cce <_strtod_l+0x436>
 800605e:	68c3      	ldr	r3, [r0, #12]
 8006060:	4641      	mov	r1, r8
 8006062:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006064:	2300      	movs	r3, #0
 8006066:	60c3      	str	r3, [r0, #12]
 8006068:	f003 f82e 	bl	80090c8 <__mcmp>
 800606c:	2800      	cmp	r0, #0
 800606e:	da45      	bge.n	80060fc <_strtod_l+0x864>
 8006070:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006072:	ea53 030a 	orrs.w	r3, r3, sl
 8006076:	d16b      	bne.n	8006150 <_strtod_l+0x8b8>
 8006078:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800607c:	2b00      	cmp	r3, #0
 800607e:	d167      	bne.n	8006150 <_strtod_l+0x8b8>
 8006080:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006084:	0d1b      	lsrs	r3, r3, #20
 8006086:	051b      	lsls	r3, r3, #20
 8006088:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800608c:	d960      	bls.n	8006150 <_strtod_l+0x8b8>
 800608e:	6963      	ldr	r3, [r4, #20]
 8006090:	b913      	cbnz	r3, 8006098 <_strtod_l+0x800>
 8006092:	6923      	ldr	r3, [r4, #16]
 8006094:	2b01      	cmp	r3, #1
 8006096:	dd5b      	ble.n	8006150 <_strtod_l+0x8b8>
 8006098:	4621      	mov	r1, r4
 800609a:	2201      	movs	r2, #1
 800609c:	9805      	ldr	r0, [sp, #20]
 800609e:	f002 ffa7 	bl	8008ff0 <__lshift>
 80060a2:	4641      	mov	r1, r8
 80060a4:	4604      	mov	r4, r0
 80060a6:	f003 f80f 	bl	80090c8 <__mcmp>
 80060aa:	2800      	cmp	r0, #0
 80060ac:	dd50      	ble.n	8006150 <_strtod_l+0x8b8>
 80060ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80060b2:	9a08      	ldr	r2, [sp, #32]
 80060b4:	0d1b      	lsrs	r3, r3, #20
 80060b6:	051b      	lsls	r3, r3, #20
 80060b8:	2a00      	cmp	r2, #0
 80060ba:	d06a      	beq.n	8006192 <_strtod_l+0x8fa>
 80060bc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80060c0:	d867      	bhi.n	8006192 <_strtod_l+0x8fa>
 80060c2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80060c6:	f67f ae98 	bls.w	8005dfa <_strtod_l+0x562>
 80060ca:	4650      	mov	r0, sl
 80060cc:	4659      	mov	r1, fp
 80060ce:	4b09      	ldr	r3, [pc, #36]	@ (80060f4 <_strtod_l+0x85c>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	f7fa fa01 	bl	80004d8 <__aeabi_dmul>
 80060d6:	4b08      	ldr	r3, [pc, #32]	@ (80060f8 <_strtod_l+0x860>)
 80060d8:	4682      	mov	sl, r0
 80060da:	400b      	ands	r3, r1
 80060dc:	468b      	mov	fp, r1
 80060de:	2b00      	cmp	r3, #0
 80060e0:	f47f ae00 	bne.w	8005ce4 <_strtod_l+0x44c>
 80060e4:	2322      	movs	r3, #34	@ 0x22
 80060e6:	9a05      	ldr	r2, [sp, #20]
 80060e8:	6013      	str	r3, [r2, #0]
 80060ea:	e5fb      	b.n	8005ce4 <_strtod_l+0x44c>
 80060ec:	0800c300 	.word	0x0800c300
 80060f0:	fffffc02 	.word	0xfffffc02
 80060f4:	39500000 	.word	0x39500000
 80060f8:	7ff00000 	.word	0x7ff00000
 80060fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006100:	d165      	bne.n	80061ce <_strtod_l+0x936>
 8006102:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006104:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006108:	b35a      	cbz	r2, 8006162 <_strtod_l+0x8ca>
 800610a:	4a99      	ldr	r2, [pc, #612]	@ (8006370 <_strtod_l+0xad8>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d12b      	bne.n	8006168 <_strtod_l+0x8d0>
 8006110:	9b08      	ldr	r3, [sp, #32]
 8006112:	4651      	mov	r1, sl
 8006114:	b303      	cbz	r3, 8006158 <_strtod_l+0x8c0>
 8006116:	465a      	mov	r2, fp
 8006118:	4b96      	ldr	r3, [pc, #600]	@ (8006374 <_strtod_l+0xadc>)
 800611a:	4013      	ands	r3, r2
 800611c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006120:	f04f 32ff 	mov.w	r2, #4294967295
 8006124:	d81b      	bhi.n	800615e <_strtod_l+0x8c6>
 8006126:	0d1b      	lsrs	r3, r3, #20
 8006128:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800612c:	fa02 f303 	lsl.w	r3, r2, r3
 8006130:	4299      	cmp	r1, r3
 8006132:	d119      	bne.n	8006168 <_strtod_l+0x8d0>
 8006134:	4b90      	ldr	r3, [pc, #576]	@ (8006378 <_strtod_l+0xae0>)
 8006136:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006138:	429a      	cmp	r2, r3
 800613a:	d102      	bne.n	8006142 <_strtod_l+0x8aa>
 800613c:	3101      	adds	r1, #1
 800613e:	f43f adc6 	beq.w	8005cce <_strtod_l+0x436>
 8006142:	f04f 0a00 	mov.w	sl, #0
 8006146:	4b8b      	ldr	r3, [pc, #556]	@ (8006374 <_strtod_l+0xadc>)
 8006148:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800614a:	401a      	ands	r2, r3
 800614c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006150:	9b08      	ldr	r3, [sp, #32]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1b9      	bne.n	80060ca <_strtod_l+0x832>
 8006156:	e5c5      	b.n	8005ce4 <_strtod_l+0x44c>
 8006158:	f04f 33ff 	mov.w	r3, #4294967295
 800615c:	e7e8      	b.n	8006130 <_strtod_l+0x898>
 800615e:	4613      	mov	r3, r2
 8006160:	e7e6      	b.n	8006130 <_strtod_l+0x898>
 8006162:	ea53 030a 	orrs.w	r3, r3, sl
 8006166:	d0a2      	beq.n	80060ae <_strtod_l+0x816>
 8006168:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800616a:	b1db      	cbz	r3, 80061a4 <_strtod_l+0x90c>
 800616c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800616e:	4213      	tst	r3, r2
 8006170:	d0ee      	beq.n	8006150 <_strtod_l+0x8b8>
 8006172:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006174:	4650      	mov	r0, sl
 8006176:	4659      	mov	r1, fp
 8006178:	9a08      	ldr	r2, [sp, #32]
 800617a:	b1bb      	cbz	r3, 80061ac <_strtod_l+0x914>
 800617c:	f7ff fb6b 	bl	8005856 <sulp>
 8006180:	4602      	mov	r2, r0
 8006182:	460b      	mov	r3, r1
 8006184:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006188:	f7f9 fff0 	bl	800016c <__adddf3>
 800618c:	4682      	mov	sl, r0
 800618e:	468b      	mov	fp, r1
 8006190:	e7de      	b.n	8006150 <_strtod_l+0x8b8>
 8006192:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006196:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800619a:	f04f 3aff 	mov.w	sl, #4294967295
 800619e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80061a2:	e7d5      	b.n	8006150 <_strtod_l+0x8b8>
 80061a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80061a6:	ea13 0f0a 	tst.w	r3, sl
 80061aa:	e7e1      	b.n	8006170 <_strtod_l+0x8d8>
 80061ac:	f7ff fb53 	bl	8005856 <sulp>
 80061b0:	4602      	mov	r2, r0
 80061b2:	460b      	mov	r3, r1
 80061b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061b8:	f7f9 ffd6 	bl	8000168 <__aeabi_dsub>
 80061bc:	2200      	movs	r2, #0
 80061be:	2300      	movs	r3, #0
 80061c0:	4682      	mov	sl, r0
 80061c2:	468b      	mov	fp, r1
 80061c4:	f7fa fbf0 	bl	80009a8 <__aeabi_dcmpeq>
 80061c8:	2800      	cmp	r0, #0
 80061ca:	d0c1      	beq.n	8006150 <_strtod_l+0x8b8>
 80061cc:	e615      	b.n	8005dfa <_strtod_l+0x562>
 80061ce:	4641      	mov	r1, r8
 80061d0:	4620      	mov	r0, r4
 80061d2:	f003 f8e9 	bl	80093a8 <__ratio>
 80061d6:	2200      	movs	r2, #0
 80061d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80061dc:	4606      	mov	r6, r0
 80061de:	460f      	mov	r7, r1
 80061e0:	f7fa fbf6 	bl	80009d0 <__aeabi_dcmple>
 80061e4:	2800      	cmp	r0, #0
 80061e6:	d06d      	beq.n	80062c4 <_strtod_l+0xa2c>
 80061e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d178      	bne.n	80062e0 <_strtod_l+0xa48>
 80061ee:	f1ba 0f00 	cmp.w	sl, #0
 80061f2:	d156      	bne.n	80062a2 <_strtod_l+0xa0a>
 80061f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80061f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d158      	bne.n	80062b0 <_strtod_l+0xa18>
 80061fe:	2200      	movs	r2, #0
 8006200:	4630      	mov	r0, r6
 8006202:	4639      	mov	r1, r7
 8006204:	4b5d      	ldr	r3, [pc, #372]	@ (800637c <_strtod_l+0xae4>)
 8006206:	f7fa fbd9 	bl	80009bc <__aeabi_dcmplt>
 800620a:	2800      	cmp	r0, #0
 800620c:	d157      	bne.n	80062be <_strtod_l+0xa26>
 800620e:	4630      	mov	r0, r6
 8006210:	4639      	mov	r1, r7
 8006212:	2200      	movs	r2, #0
 8006214:	4b5a      	ldr	r3, [pc, #360]	@ (8006380 <_strtod_l+0xae8>)
 8006216:	f7fa f95f 	bl	80004d8 <__aeabi_dmul>
 800621a:	4606      	mov	r6, r0
 800621c:	460f      	mov	r7, r1
 800621e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006222:	9606      	str	r6, [sp, #24]
 8006224:	9307      	str	r3, [sp, #28]
 8006226:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800622a:	4d52      	ldr	r5, [pc, #328]	@ (8006374 <_strtod_l+0xadc>)
 800622c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006230:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006232:	401d      	ands	r5, r3
 8006234:	4b53      	ldr	r3, [pc, #332]	@ (8006384 <_strtod_l+0xaec>)
 8006236:	429d      	cmp	r5, r3
 8006238:	f040 80aa 	bne.w	8006390 <_strtod_l+0xaf8>
 800623c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800623e:	4650      	mov	r0, sl
 8006240:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006244:	4659      	mov	r1, fp
 8006246:	f002 ffef 	bl	8009228 <__ulp>
 800624a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800624e:	f7fa f943 	bl	80004d8 <__aeabi_dmul>
 8006252:	4652      	mov	r2, sl
 8006254:	465b      	mov	r3, fp
 8006256:	f7f9 ff89 	bl	800016c <__adddf3>
 800625a:	460b      	mov	r3, r1
 800625c:	4945      	ldr	r1, [pc, #276]	@ (8006374 <_strtod_l+0xadc>)
 800625e:	4a4a      	ldr	r2, [pc, #296]	@ (8006388 <_strtod_l+0xaf0>)
 8006260:	4019      	ands	r1, r3
 8006262:	4291      	cmp	r1, r2
 8006264:	4682      	mov	sl, r0
 8006266:	d942      	bls.n	80062ee <_strtod_l+0xa56>
 8006268:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800626a:	4b43      	ldr	r3, [pc, #268]	@ (8006378 <_strtod_l+0xae0>)
 800626c:	429a      	cmp	r2, r3
 800626e:	d103      	bne.n	8006278 <_strtod_l+0x9e0>
 8006270:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006272:	3301      	adds	r3, #1
 8006274:	f43f ad2b 	beq.w	8005cce <_strtod_l+0x436>
 8006278:	f04f 3aff 	mov.w	sl, #4294967295
 800627c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8006378 <_strtod_l+0xae0>
 8006280:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006282:	9805      	ldr	r0, [sp, #20]
 8006284:	f002 fc9e 	bl	8008bc4 <_Bfree>
 8006288:	4649      	mov	r1, r9
 800628a:	9805      	ldr	r0, [sp, #20]
 800628c:	f002 fc9a 	bl	8008bc4 <_Bfree>
 8006290:	4641      	mov	r1, r8
 8006292:	9805      	ldr	r0, [sp, #20]
 8006294:	f002 fc96 	bl	8008bc4 <_Bfree>
 8006298:	4621      	mov	r1, r4
 800629a:	9805      	ldr	r0, [sp, #20]
 800629c:	f002 fc92 	bl	8008bc4 <_Bfree>
 80062a0:	e618      	b.n	8005ed4 <_strtod_l+0x63c>
 80062a2:	f1ba 0f01 	cmp.w	sl, #1
 80062a6:	d103      	bne.n	80062b0 <_strtod_l+0xa18>
 80062a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f43f ada5 	beq.w	8005dfa <_strtod_l+0x562>
 80062b0:	2200      	movs	r2, #0
 80062b2:	4b36      	ldr	r3, [pc, #216]	@ (800638c <_strtod_l+0xaf4>)
 80062b4:	2600      	movs	r6, #0
 80062b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80062ba:	4f30      	ldr	r7, [pc, #192]	@ (800637c <_strtod_l+0xae4>)
 80062bc:	e7b3      	b.n	8006226 <_strtod_l+0x98e>
 80062be:	2600      	movs	r6, #0
 80062c0:	4f2f      	ldr	r7, [pc, #188]	@ (8006380 <_strtod_l+0xae8>)
 80062c2:	e7ac      	b.n	800621e <_strtod_l+0x986>
 80062c4:	4630      	mov	r0, r6
 80062c6:	4639      	mov	r1, r7
 80062c8:	4b2d      	ldr	r3, [pc, #180]	@ (8006380 <_strtod_l+0xae8>)
 80062ca:	2200      	movs	r2, #0
 80062cc:	f7fa f904 	bl	80004d8 <__aeabi_dmul>
 80062d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80062d2:	4606      	mov	r6, r0
 80062d4:	460f      	mov	r7, r1
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d0a1      	beq.n	800621e <_strtod_l+0x986>
 80062da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80062de:	e7a2      	b.n	8006226 <_strtod_l+0x98e>
 80062e0:	2200      	movs	r2, #0
 80062e2:	4b26      	ldr	r3, [pc, #152]	@ (800637c <_strtod_l+0xae4>)
 80062e4:	4616      	mov	r6, r2
 80062e6:	461f      	mov	r7, r3
 80062e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80062ec:	e79b      	b.n	8006226 <_strtod_l+0x98e>
 80062ee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80062f2:	9b08      	ldr	r3, [sp, #32]
 80062f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1c1      	bne.n	8006280 <_strtod_l+0x9e8>
 80062fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006300:	0d1b      	lsrs	r3, r3, #20
 8006302:	051b      	lsls	r3, r3, #20
 8006304:	429d      	cmp	r5, r3
 8006306:	d1bb      	bne.n	8006280 <_strtod_l+0x9e8>
 8006308:	4630      	mov	r0, r6
 800630a:	4639      	mov	r1, r7
 800630c:	f7fa fca2 	bl	8000c54 <__aeabi_d2lz>
 8006310:	f7fa f8b4 	bl	800047c <__aeabi_l2d>
 8006314:	4602      	mov	r2, r0
 8006316:	460b      	mov	r3, r1
 8006318:	4630      	mov	r0, r6
 800631a:	4639      	mov	r1, r7
 800631c:	f7f9 ff24 	bl	8000168 <__aeabi_dsub>
 8006320:	460b      	mov	r3, r1
 8006322:	4602      	mov	r2, r0
 8006324:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006328:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800632c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800632e:	ea46 060a 	orr.w	r6, r6, sl
 8006332:	431e      	orrs	r6, r3
 8006334:	d069      	beq.n	800640a <_strtod_l+0xb72>
 8006336:	a30a      	add	r3, pc, #40	@ (adr r3, 8006360 <_strtod_l+0xac8>)
 8006338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633c:	f7fa fb3e 	bl	80009bc <__aeabi_dcmplt>
 8006340:	2800      	cmp	r0, #0
 8006342:	f47f accf 	bne.w	8005ce4 <_strtod_l+0x44c>
 8006346:	a308      	add	r3, pc, #32	@ (adr r3, 8006368 <_strtod_l+0xad0>)
 8006348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006350:	f7fa fb52 	bl	80009f8 <__aeabi_dcmpgt>
 8006354:	2800      	cmp	r0, #0
 8006356:	d093      	beq.n	8006280 <_strtod_l+0x9e8>
 8006358:	e4c4      	b.n	8005ce4 <_strtod_l+0x44c>
 800635a:	bf00      	nop
 800635c:	f3af 8000 	nop.w
 8006360:	94a03595 	.word	0x94a03595
 8006364:	3fdfffff 	.word	0x3fdfffff
 8006368:	35afe535 	.word	0x35afe535
 800636c:	3fe00000 	.word	0x3fe00000
 8006370:	000fffff 	.word	0x000fffff
 8006374:	7ff00000 	.word	0x7ff00000
 8006378:	7fefffff 	.word	0x7fefffff
 800637c:	3ff00000 	.word	0x3ff00000
 8006380:	3fe00000 	.word	0x3fe00000
 8006384:	7fe00000 	.word	0x7fe00000
 8006388:	7c9fffff 	.word	0x7c9fffff
 800638c:	bff00000 	.word	0xbff00000
 8006390:	9b08      	ldr	r3, [sp, #32]
 8006392:	b323      	cbz	r3, 80063de <_strtod_l+0xb46>
 8006394:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006398:	d821      	bhi.n	80063de <_strtod_l+0xb46>
 800639a:	a327      	add	r3, pc, #156	@ (adr r3, 8006438 <_strtod_l+0xba0>)
 800639c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a0:	4630      	mov	r0, r6
 80063a2:	4639      	mov	r1, r7
 80063a4:	f7fa fb14 	bl	80009d0 <__aeabi_dcmple>
 80063a8:	b1a0      	cbz	r0, 80063d4 <_strtod_l+0xb3c>
 80063aa:	4639      	mov	r1, r7
 80063ac:	4630      	mov	r0, r6
 80063ae:	f7fa fb6b 	bl	8000a88 <__aeabi_d2uiz>
 80063b2:	2801      	cmp	r0, #1
 80063b4:	bf38      	it	cc
 80063b6:	2001      	movcc	r0, #1
 80063b8:	f7fa f814 	bl	80003e4 <__aeabi_ui2d>
 80063bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063be:	4606      	mov	r6, r0
 80063c0:	460f      	mov	r7, r1
 80063c2:	b9fb      	cbnz	r3, 8006404 <_strtod_l+0xb6c>
 80063c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80063c8:	9014      	str	r0, [sp, #80]	@ 0x50
 80063ca:	9315      	str	r3, [sp, #84]	@ 0x54
 80063cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80063d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80063d4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80063d6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80063da:	1b5b      	subs	r3, r3, r5
 80063dc:	9311      	str	r3, [sp, #68]	@ 0x44
 80063de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80063e2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80063e6:	f002 ff1f 	bl	8009228 <__ulp>
 80063ea:	4602      	mov	r2, r0
 80063ec:	460b      	mov	r3, r1
 80063ee:	4650      	mov	r0, sl
 80063f0:	4659      	mov	r1, fp
 80063f2:	f7fa f871 	bl	80004d8 <__aeabi_dmul>
 80063f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80063fa:	f7f9 feb7 	bl	800016c <__adddf3>
 80063fe:	4682      	mov	sl, r0
 8006400:	468b      	mov	fp, r1
 8006402:	e776      	b.n	80062f2 <_strtod_l+0xa5a>
 8006404:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006408:	e7e0      	b.n	80063cc <_strtod_l+0xb34>
 800640a:	a30d      	add	r3, pc, #52	@ (adr r3, 8006440 <_strtod_l+0xba8>)
 800640c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006410:	f7fa fad4 	bl	80009bc <__aeabi_dcmplt>
 8006414:	e79e      	b.n	8006354 <_strtod_l+0xabc>
 8006416:	2300      	movs	r3, #0
 8006418:	930b      	str	r3, [sp, #44]	@ 0x2c
 800641a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800641c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800641e:	6013      	str	r3, [r2, #0]
 8006420:	f7ff ba77 	b.w	8005912 <_strtod_l+0x7a>
 8006424:	2a65      	cmp	r2, #101	@ 0x65
 8006426:	f43f ab6e 	beq.w	8005b06 <_strtod_l+0x26e>
 800642a:	2a45      	cmp	r2, #69	@ 0x45
 800642c:	f43f ab6b 	beq.w	8005b06 <_strtod_l+0x26e>
 8006430:	2301      	movs	r3, #1
 8006432:	f7ff bba6 	b.w	8005b82 <_strtod_l+0x2ea>
 8006436:	bf00      	nop
 8006438:	ffc00000 	.word	0xffc00000
 800643c:	41dfffff 	.word	0x41dfffff
 8006440:	94a03595 	.word	0x94a03595
 8006444:	3fcfffff 	.word	0x3fcfffff

08006448 <_strtod_r>:
 8006448:	4b01      	ldr	r3, [pc, #4]	@ (8006450 <_strtod_r+0x8>)
 800644a:	f7ff ba25 	b.w	8005898 <_strtod_l>
 800644e:	bf00      	nop
 8006450:	20000030 	.word	0x20000030

08006454 <strtod>:
 8006454:	460a      	mov	r2, r1
 8006456:	4601      	mov	r1, r0
 8006458:	4802      	ldr	r0, [pc, #8]	@ (8006464 <strtod+0x10>)
 800645a:	4b03      	ldr	r3, [pc, #12]	@ (8006468 <strtod+0x14>)
 800645c:	6800      	ldr	r0, [r0, #0]
 800645e:	f7ff ba1b 	b.w	8005898 <_strtod_l>
 8006462:	bf00      	nop
 8006464:	2000019c 	.word	0x2000019c
 8006468:	20000030 	.word	0x20000030

0800646c <_strtol_l.constprop.0>:
 800646c:	2b24      	cmp	r3, #36	@ 0x24
 800646e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006472:	4686      	mov	lr, r0
 8006474:	4690      	mov	r8, r2
 8006476:	d801      	bhi.n	800647c <_strtol_l.constprop.0+0x10>
 8006478:	2b01      	cmp	r3, #1
 800647a:	d106      	bne.n	800648a <_strtol_l.constprop.0+0x1e>
 800647c:	f001 f872 	bl	8007564 <__errno>
 8006480:	2316      	movs	r3, #22
 8006482:	6003      	str	r3, [r0, #0]
 8006484:	2000      	movs	r0, #0
 8006486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800648a:	460d      	mov	r5, r1
 800648c:	4833      	ldr	r0, [pc, #204]	@ (800655c <_strtol_l.constprop.0+0xf0>)
 800648e:	462a      	mov	r2, r5
 8006490:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006494:	5d06      	ldrb	r6, [r0, r4]
 8006496:	f016 0608 	ands.w	r6, r6, #8
 800649a:	d1f8      	bne.n	800648e <_strtol_l.constprop.0+0x22>
 800649c:	2c2d      	cmp	r4, #45	@ 0x2d
 800649e:	d12d      	bne.n	80064fc <_strtol_l.constprop.0+0x90>
 80064a0:	2601      	movs	r6, #1
 80064a2:	782c      	ldrb	r4, [r5, #0]
 80064a4:	1c95      	adds	r5, r2, #2
 80064a6:	f033 0210 	bics.w	r2, r3, #16
 80064aa:	d109      	bne.n	80064c0 <_strtol_l.constprop.0+0x54>
 80064ac:	2c30      	cmp	r4, #48	@ 0x30
 80064ae:	d12a      	bne.n	8006506 <_strtol_l.constprop.0+0x9a>
 80064b0:	782a      	ldrb	r2, [r5, #0]
 80064b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80064b6:	2a58      	cmp	r2, #88	@ 0x58
 80064b8:	d125      	bne.n	8006506 <_strtol_l.constprop.0+0x9a>
 80064ba:	2310      	movs	r3, #16
 80064bc:	786c      	ldrb	r4, [r5, #1]
 80064be:	3502      	adds	r5, #2
 80064c0:	2200      	movs	r2, #0
 80064c2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80064c6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80064ca:	fbbc f9f3 	udiv	r9, ip, r3
 80064ce:	4610      	mov	r0, r2
 80064d0:	fb03 ca19 	mls	sl, r3, r9, ip
 80064d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80064d8:	2f09      	cmp	r7, #9
 80064da:	d81b      	bhi.n	8006514 <_strtol_l.constprop.0+0xa8>
 80064dc:	463c      	mov	r4, r7
 80064de:	42a3      	cmp	r3, r4
 80064e0:	dd27      	ble.n	8006532 <_strtol_l.constprop.0+0xc6>
 80064e2:	1c57      	adds	r7, r2, #1
 80064e4:	d007      	beq.n	80064f6 <_strtol_l.constprop.0+0x8a>
 80064e6:	4581      	cmp	r9, r0
 80064e8:	d320      	bcc.n	800652c <_strtol_l.constprop.0+0xc0>
 80064ea:	d101      	bne.n	80064f0 <_strtol_l.constprop.0+0x84>
 80064ec:	45a2      	cmp	sl, r4
 80064ee:	db1d      	blt.n	800652c <_strtol_l.constprop.0+0xc0>
 80064f0:	2201      	movs	r2, #1
 80064f2:	fb00 4003 	mla	r0, r0, r3, r4
 80064f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80064fa:	e7eb      	b.n	80064d4 <_strtol_l.constprop.0+0x68>
 80064fc:	2c2b      	cmp	r4, #43	@ 0x2b
 80064fe:	bf04      	itt	eq
 8006500:	782c      	ldrbeq	r4, [r5, #0]
 8006502:	1c95      	addeq	r5, r2, #2
 8006504:	e7cf      	b.n	80064a6 <_strtol_l.constprop.0+0x3a>
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1da      	bne.n	80064c0 <_strtol_l.constprop.0+0x54>
 800650a:	2c30      	cmp	r4, #48	@ 0x30
 800650c:	bf0c      	ite	eq
 800650e:	2308      	moveq	r3, #8
 8006510:	230a      	movne	r3, #10
 8006512:	e7d5      	b.n	80064c0 <_strtol_l.constprop.0+0x54>
 8006514:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006518:	2f19      	cmp	r7, #25
 800651a:	d801      	bhi.n	8006520 <_strtol_l.constprop.0+0xb4>
 800651c:	3c37      	subs	r4, #55	@ 0x37
 800651e:	e7de      	b.n	80064de <_strtol_l.constprop.0+0x72>
 8006520:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006524:	2f19      	cmp	r7, #25
 8006526:	d804      	bhi.n	8006532 <_strtol_l.constprop.0+0xc6>
 8006528:	3c57      	subs	r4, #87	@ 0x57
 800652a:	e7d8      	b.n	80064de <_strtol_l.constprop.0+0x72>
 800652c:	f04f 32ff 	mov.w	r2, #4294967295
 8006530:	e7e1      	b.n	80064f6 <_strtol_l.constprop.0+0x8a>
 8006532:	1c53      	adds	r3, r2, #1
 8006534:	d108      	bne.n	8006548 <_strtol_l.constprop.0+0xdc>
 8006536:	2322      	movs	r3, #34	@ 0x22
 8006538:	4660      	mov	r0, ip
 800653a:	f8ce 3000 	str.w	r3, [lr]
 800653e:	f1b8 0f00 	cmp.w	r8, #0
 8006542:	d0a0      	beq.n	8006486 <_strtol_l.constprop.0+0x1a>
 8006544:	1e69      	subs	r1, r5, #1
 8006546:	e006      	b.n	8006556 <_strtol_l.constprop.0+0xea>
 8006548:	b106      	cbz	r6, 800654c <_strtol_l.constprop.0+0xe0>
 800654a:	4240      	negs	r0, r0
 800654c:	f1b8 0f00 	cmp.w	r8, #0
 8006550:	d099      	beq.n	8006486 <_strtol_l.constprop.0+0x1a>
 8006552:	2a00      	cmp	r2, #0
 8006554:	d1f6      	bne.n	8006544 <_strtol_l.constprop.0+0xd8>
 8006556:	f8c8 1000 	str.w	r1, [r8]
 800655a:	e794      	b.n	8006486 <_strtol_l.constprop.0+0x1a>
 800655c:	0800c329 	.word	0x0800c329

08006560 <_strtol_r>:
 8006560:	f7ff bf84 	b.w	800646c <_strtol_l.constprop.0>

08006564 <strtol>:
 8006564:	4613      	mov	r3, r2
 8006566:	460a      	mov	r2, r1
 8006568:	4601      	mov	r1, r0
 800656a:	4802      	ldr	r0, [pc, #8]	@ (8006574 <strtol+0x10>)
 800656c:	6800      	ldr	r0, [r0, #0]
 800656e:	f7ff bf7d 	b.w	800646c <_strtol_l.constprop.0>
 8006572:	bf00      	nop
 8006574:	2000019c 	.word	0x2000019c

08006578 <__cvt>:
 8006578:	2b00      	cmp	r3, #0
 800657a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800657e:	461d      	mov	r5, r3
 8006580:	bfbb      	ittet	lt
 8006582:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006586:	461d      	movlt	r5, r3
 8006588:	2300      	movge	r3, #0
 800658a:	232d      	movlt	r3, #45	@ 0x2d
 800658c:	b088      	sub	sp, #32
 800658e:	4614      	mov	r4, r2
 8006590:	bfb8      	it	lt
 8006592:	4614      	movlt	r4, r2
 8006594:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006596:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006598:	7013      	strb	r3, [r2, #0]
 800659a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800659c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80065a0:	f023 0820 	bic.w	r8, r3, #32
 80065a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80065a8:	d005      	beq.n	80065b6 <__cvt+0x3e>
 80065aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80065ae:	d100      	bne.n	80065b2 <__cvt+0x3a>
 80065b0:	3601      	adds	r6, #1
 80065b2:	2302      	movs	r3, #2
 80065b4:	e000      	b.n	80065b8 <__cvt+0x40>
 80065b6:	2303      	movs	r3, #3
 80065b8:	aa07      	add	r2, sp, #28
 80065ba:	9204      	str	r2, [sp, #16]
 80065bc:	aa06      	add	r2, sp, #24
 80065be:	e9cd a202 	strd	sl, r2, [sp, #8]
 80065c2:	e9cd 3600 	strd	r3, r6, [sp]
 80065c6:	4622      	mov	r2, r4
 80065c8:	462b      	mov	r3, r5
 80065ca:	f001 f8a9 	bl	8007720 <_dtoa_r>
 80065ce:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80065d2:	4607      	mov	r7, r0
 80065d4:	d119      	bne.n	800660a <__cvt+0x92>
 80065d6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80065d8:	07db      	lsls	r3, r3, #31
 80065da:	d50e      	bpl.n	80065fa <__cvt+0x82>
 80065dc:	eb00 0906 	add.w	r9, r0, r6
 80065e0:	2200      	movs	r2, #0
 80065e2:	2300      	movs	r3, #0
 80065e4:	4620      	mov	r0, r4
 80065e6:	4629      	mov	r1, r5
 80065e8:	f7fa f9de 	bl	80009a8 <__aeabi_dcmpeq>
 80065ec:	b108      	cbz	r0, 80065f2 <__cvt+0x7a>
 80065ee:	f8cd 901c 	str.w	r9, [sp, #28]
 80065f2:	2230      	movs	r2, #48	@ 0x30
 80065f4:	9b07      	ldr	r3, [sp, #28]
 80065f6:	454b      	cmp	r3, r9
 80065f8:	d31e      	bcc.n	8006638 <__cvt+0xc0>
 80065fa:	4638      	mov	r0, r7
 80065fc:	9b07      	ldr	r3, [sp, #28]
 80065fe:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006600:	1bdb      	subs	r3, r3, r7
 8006602:	6013      	str	r3, [r2, #0]
 8006604:	b008      	add	sp, #32
 8006606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800660a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800660e:	eb00 0906 	add.w	r9, r0, r6
 8006612:	d1e5      	bne.n	80065e0 <__cvt+0x68>
 8006614:	7803      	ldrb	r3, [r0, #0]
 8006616:	2b30      	cmp	r3, #48	@ 0x30
 8006618:	d10a      	bne.n	8006630 <__cvt+0xb8>
 800661a:	2200      	movs	r2, #0
 800661c:	2300      	movs	r3, #0
 800661e:	4620      	mov	r0, r4
 8006620:	4629      	mov	r1, r5
 8006622:	f7fa f9c1 	bl	80009a8 <__aeabi_dcmpeq>
 8006626:	b918      	cbnz	r0, 8006630 <__cvt+0xb8>
 8006628:	f1c6 0601 	rsb	r6, r6, #1
 800662c:	f8ca 6000 	str.w	r6, [sl]
 8006630:	f8da 3000 	ldr.w	r3, [sl]
 8006634:	4499      	add	r9, r3
 8006636:	e7d3      	b.n	80065e0 <__cvt+0x68>
 8006638:	1c59      	adds	r1, r3, #1
 800663a:	9107      	str	r1, [sp, #28]
 800663c:	701a      	strb	r2, [r3, #0]
 800663e:	e7d9      	b.n	80065f4 <__cvt+0x7c>

08006640 <__exponent>:
 8006640:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006642:	2900      	cmp	r1, #0
 8006644:	bfb6      	itet	lt
 8006646:	232d      	movlt	r3, #45	@ 0x2d
 8006648:	232b      	movge	r3, #43	@ 0x2b
 800664a:	4249      	neglt	r1, r1
 800664c:	2909      	cmp	r1, #9
 800664e:	7002      	strb	r2, [r0, #0]
 8006650:	7043      	strb	r3, [r0, #1]
 8006652:	dd29      	ble.n	80066a8 <__exponent+0x68>
 8006654:	f10d 0307 	add.w	r3, sp, #7
 8006658:	461d      	mov	r5, r3
 800665a:	270a      	movs	r7, #10
 800665c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006660:	461a      	mov	r2, r3
 8006662:	fb07 1416 	mls	r4, r7, r6, r1
 8006666:	3430      	adds	r4, #48	@ 0x30
 8006668:	f802 4c01 	strb.w	r4, [r2, #-1]
 800666c:	460c      	mov	r4, r1
 800666e:	2c63      	cmp	r4, #99	@ 0x63
 8006670:	4631      	mov	r1, r6
 8006672:	f103 33ff 	add.w	r3, r3, #4294967295
 8006676:	dcf1      	bgt.n	800665c <__exponent+0x1c>
 8006678:	3130      	adds	r1, #48	@ 0x30
 800667a:	1e94      	subs	r4, r2, #2
 800667c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006680:	4623      	mov	r3, r4
 8006682:	1c41      	adds	r1, r0, #1
 8006684:	42ab      	cmp	r3, r5
 8006686:	d30a      	bcc.n	800669e <__exponent+0x5e>
 8006688:	f10d 0309 	add.w	r3, sp, #9
 800668c:	1a9b      	subs	r3, r3, r2
 800668e:	42ac      	cmp	r4, r5
 8006690:	bf88      	it	hi
 8006692:	2300      	movhi	r3, #0
 8006694:	3302      	adds	r3, #2
 8006696:	4403      	add	r3, r0
 8006698:	1a18      	subs	r0, r3, r0
 800669a:	b003      	add	sp, #12
 800669c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800669e:	f813 6b01 	ldrb.w	r6, [r3], #1
 80066a2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80066a6:	e7ed      	b.n	8006684 <__exponent+0x44>
 80066a8:	2330      	movs	r3, #48	@ 0x30
 80066aa:	3130      	adds	r1, #48	@ 0x30
 80066ac:	7083      	strb	r3, [r0, #2]
 80066ae:	70c1      	strb	r1, [r0, #3]
 80066b0:	1d03      	adds	r3, r0, #4
 80066b2:	e7f1      	b.n	8006698 <__exponent+0x58>

080066b4 <_printf_float>:
 80066b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b8:	b091      	sub	sp, #68	@ 0x44
 80066ba:	460c      	mov	r4, r1
 80066bc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80066c0:	4616      	mov	r6, r2
 80066c2:	461f      	mov	r7, r3
 80066c4:	4605      	mov	r5, r0
 80066c6:	f000 ff03 	bl	80074d0 <_localeconv_r>
 80066ca:	6803      	ldr	r3, [r0, #0]
 80066cc:	4618      	mov	r0, r3
 80066ce:	9308      	str	r3, [sp, #32]
 80066d0:	f7f9 fd3e 	bl	8000150 <strlen>
 80066d4:	2300      	movs	r3, #0
 80066d6:	930e      	str	r3, [sp, #56]	@ 0x38
 80066d8:	f8d8 3000 	ldr.w	r3, [r8]
 80066dc:	9009      	str	r0, [sp, #36]	@ 0x24
 80066de:	3307      	adds	r3, #7
 80066e0:	f023 0307 	bic.w	r3, r3, #7
 80066e4:	f103 0208 	add.w	r2, r3, #8
 80066e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80066ec:	f8d4 b000 	ldr.w	fp, [r4]
 80066f0:	f8c8 2000 	str.w	r2, [r8]
 80066f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80066fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066fe:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006702:	f04f 32ff 	mov.w	r2, #4294967295
 8006706:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800670a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800670e:	4b9c      	ldr	r3, [pc, #624]	@ (8006980 <_printf_float+0x2cc>)
 8006710:	f7fa f97c 	bl	8000a0c <__aeabi_dcmpun>
 8006714:	bb70      	cbnz	r0, 8006774 <_printf_float+0xc0>
 8006716:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800671a:	f04f 32ff 	mov.w	r2, #4294967295
 800671e:	4b98      	ldr	r3, [pc, #608]	@ (8006980 <_printf_float+0x2cc>)
 8006720:	f7fa f956 	bl	80009d0 <__aeabi_dcmple>
 8006724:	bb30      	cbnz	r0, 8006774 <_printf_float+0xc0>
 8006726:	2200      	movs	r2, #0
 8006728:	2300      	movs	r3, #0
 800672a:	4640      	mov	r0, r8
 800672c:	4649      	mov	r1, r9
 800672e:	f7fa f945 	bl	80009bc <__aeabi_dcmplt>
 8006732:	b110      	cbz	r0, 800673a <_printf_float+0x86>
 8006734:	232d      	movs	r3, #45	@ 0x2d
 8006736:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800673a:	4a92      	ldr	r2, [pc, #584]	@ (8006984 <_printf_float+0x2d0>)
 800673c:	4b92      	ldr	r3, [pc, #584]	@ (8006988 <_printf_float+0x2d4>)
 800673e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006742:	bf94      	ite	ls
 8006744:	4690      	movls	r8, r2
 8006746:	4698      	movhi	r8, r3
 8006748:	2303      	movs	r3, #3
 800674a:	f04f 0900 	mov.w	r9, #0
 800674e:	6123      	str	r3, [r4, #16]
 8006750:	f02b 0304 	bic.w	r3, fp, #4
 8006754:	6023      	str	r3, [r4, #0]
 8006756:	4633      	mov	r3, r6
 8006758:	4621      	mov	r1, r4
 800675a:	4628      	mov	r0, r5
 800675c:	9700      	str	r7, [sp, #0]
 800675e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006760:	f000 f9d4 	bl	8006b0c <_printf_common>
 8006764:	3001      	adds	r0, #1
 8006766:	f040 8090 	bne.w	800688a <_printf_float+0x1d6>
 800676a:	f04f 30ff 	mov.w	r0, #4294967295
 800676e:	b011      	add	sp, #68	@ 0x44
 8006770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006774:	4642      	mov	r2, r8
 8006776:	464b      	mov	r3, r9
 8006778:	4640      	mov	r0, r8
 800677a:	4649      	mov	r1, r9
 800677c:	f7fa f946 	bl	8000a0c <__aeabi_dcmpun>
 8006780:	b148      	cbz	r0, 8006796 <_printf_float+0xe2>
 8006782:	464b      	mov	r3, r9
 8006784:	2b00      	cmp	r3, #0
 8006786:	bfb8      	it	lt
 8006788:	232d      	movlt	r3, #45	@ 0x2d
 800678a:	4a80      	ldr	r2, [pc, #512]	@ (800698c <_printf_float+0x2d8>)
 800678c:	bfb8      	it	lt
 800678e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006792:	4b7f      	ldr	r3, [pc, #508]	@ (8006990 <_printf_float+0x2dc>)
 8006794:	e7d3      	b.n	800673e <_printf_float+0x8a>
 8006796:	6863      	ldr	r3, [r4, #4]
 8006798:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	d13f      	bne.n	8006820 <_printf_float+0x16c>
 80067a0:	2306      	movs	r3, #6
 80067a2:	6063      	str	r3, [r4, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80067aa:	6023      	str	r3, [r4, #0]
 80067ac:	9206      	str	r2, [sp, #24]
 80067ae:	aa0e      	add	r2, sp, #56	@ 0x38
 80067b0:	e9cd a204 	strd	sl, r2, [sp, #16]
 80067b4:	aa0d      	add	r2, sp, #52	@ 0x34
 80067b6:	9203      	str	r2, [sp, #12]
 80067b8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80067bc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80067c0:	6863      	ldr	r3, [r4, #4]
 80067c2:	4642      	mov	r2, r8
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	4628      	mov	r0, r5
 80067c8:	464b      	mov	r3, r9
 80067ca:	910a      	str	r1, [sp, #40]	@ 0x28
 80067cc:	f7ff fed4 	bl	8006578 <__cvt>
 80067d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80067d2:	4680      	mov	r8, r0
 80067d4:	2947      	cmp	r1, #71	@ 0x47
 80067d6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80067d8:	d128      	bne.n	800682c <_printf_float+0x178>
 80067da:	1cc8      	adds	r0, r1, #3
 80067dc:	db02      	blt.n	80067e4 <_printf_float+0x130>
 80067de:	6863      	ldr	r3, [r4, #4]
 80067e0:	4299      	cmp	r1, r3
 80067e2:	dd40      	ble.n	8006866 <_printf_float+0x1b2>
 80067e4:	f1aa 0a02 	sub.w	sl, sl, #2
 80067e8:	fa5f fa8a 	uxtb.w	sl, sl
 80067ec:	4652      	mov	r2, sl
 80067ee:	3901      	subs	r1, #1
 80067f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80067f4:	910d      	str	r1, [sp, #52]	@ 0x34
 80067f6:	f7ff ff23 	bl	8006640 <__exponent>
 80067fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80067fc:	4681      	mov	r9, r0
 80067fe:	1813      	adds	r3, r2, r0
 8006800:	2a01      	cmp	r2, #1
 8006802:	6123      	str	r3, [r4, #16]
 8006804:	dc02      	bgt.n	800680c <_printf_float+0x158>
 8006806:	6822      	ldr	r2, [r4, #0]
 8006808:	07d2      	lsls	r2, r2, #31
 800680a:	d501      	bpl.n	8006810 <_printf_float+0x15c>
 800680c:	3301      	adds	r3, #1
 800680e:	6123      	str	r3, [r4, #16]
 8006810:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006814:	2b00      	cmp	r3, #0
 8006816:	d09e      	beq.n	8006756 <_printf_float+0xa2>
 8006818:	232d      	movs	r3, #45	@ 0x2d
 800681a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800681e:	e79a      	b.n	8006756 <_printf_float+0xa2>
 8006820:	2947      	cmp	r1, #71	@ 0x47
 8006822:	d1bf      	bne.n	80067a4 <_printf_float+0xf0>
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1bd      	bne.n	80067a4 <_printf_float+0xf0>
 8006828:	2301      	movs	r3, #1
 800682a:	e7ba      	b.n	80067a2 <_printf_float+0xee>
 800682c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006830:	d9dc      	bls.n	80067ec <_printf_float+0x138>
 8006832:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006836:	d118      	bne.n	800686a <_printf_float+0x1b6>
 8006838:	2900      	cmp	r1, #0
 800683a:	6863      	ldr	r3, [r4, #4]
 800683c:	dd0b      	ble.n	8006856 <_printf_float+0x1a2>
 800683e:	6121      	str	r1, [r4, #16]
 8006840:	b913      	cbnz	r3, 8006848 <_printf_float+0x194>
 8006842:	6822      	ldr	r2, [r4, #0]
 8006844:	07d0      	lsls	r0, r2, #31
 8006846:	d502      	bpl.n	800684e <_printf_float+0x19a>
 8006848:	3301      	adds	r3, #1
 800684a:	440b      	add	r3, r1
 800684c:	6123      	str	r3, [r4, #16]
 800684e:	f04f 0900 	mov.w	r9, #0
 8006852:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006854:	e7dc      	b.n	8006810 <_printf_float+0x15c>
 8006856:	b913      	cbnz	r3, 800685e <_printf_float+0x1aa>
 8006858:	6822      	ldr	r2, [r4, #0]
 800685a:	07d2      	lsls	r2, r2, #31
 800685c:	d501      	bpl.n	8006862 <_printf_float+0x1ae>
 800685e:	3302      	adds	r3, #2
 8006860:	e7f4      	b.n	800684c <_printf_float+0x198>
 8006862:	2301      	movs	r3, #1
 8006864:	e7f2      	b.n	800684c <_printf_float+0x198>
 8006866:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800686a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800686c:	4299      	cmp	r1, r3
 800686e:	db05      	blt.n	800687c <_printf_float+0x1c8>
 8006870:	6823      	ldr	r3, [r4, #0]
 8006872:	6121      	str	r1, [r4, #16]
 8006874:	07d8      	lsls	r0, r3, #31
 8006876:	d5ea      	bpl.n	800684e <_printf_float+0x19a>
 8006878:	1c4b      	adds	r3, r1, #1
 800687a:	e7e7      	b.n	800684c <_printf_float+0x198>
 800687c:	2900      	cmp	r1, #0
 800687e:	bfcc      	ite	gt
 8006880:	2201      	movgt	r2, #1
 8006882:	f1c1 0202 	rsble	r2, r1, #2
 8006886:	4413      	add	r3, r2
 8006888:	e7e0      	b.n	800684c <_printf_float+0x198>
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	055a      	lsls	r2, r3, #21
 800688e:	d407      	bmi.n	80068a0 <_printf_float+0x1ec>
 8006890:	6923      	ldr	r3, [r4, #16]
 8006892:	4642      	mov	r2, r8
 8006894:	4631      	mov	r1, r6
 8006896:	4628      	mov	r0, r5
 8006898:	47b8      	blx	r7
 800689a:	3001      	adds	r0, #1
 800689c:	d12b      	bne.n	80068f6 <_printf_float+0x242>
 800689e:	e764      	b.n	800676a <_printf_float+0xb6>
 80068a0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80068a4:	f240 80dc 	bls.w	8006a60 <_printf_float+0x3ac>
 80068a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80068ac:	2200      	movs	r2, #0
 80068ae:	2300      	movs	r3, #0
 80068b0:	f7fa f87a 	bl	80009a8 <__aeabi_dcmpeq>
 80068b4:	2800      	cmp	r0, #0
 80068b6:	d033      	beq.n	8006920 <_printf_float+0x26c>
 80068b8:	2301      	movs	r3, #1
 80068ba:	4631      	mov	r1, r6
 80068bc:	4628      	mov	r0, r5
 80068be:	4a35      	ldr	r2, [pc, #212]	@ (8006994 <_printf_float+0x2e0>)
 80068c0:	47b8      	blx	r7
 80068c2:	3001      	adds	r0, #1
 80068c4:	f43f af51 	beq.w	800676a <_printf_float+0xb6>
 80068c8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80068cc:	4543      	cmp	r3, r8
 80068ce:	db02      	blt.n	80068d6 <_printf_float+0x222>
 80068d0:	6823      	ldr	r3, [r4, #0]
 80068d2:	07d8      	lsls	r0, r3, #31
 80068d4:	d50f      	bpl.n	80068f6 <_printf_float+0x242>
 80068d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80068da:	4631      	mov	r1, r6
 80068dc:	4628      	mov	r0, r5
 80068de:	47b8      	blx	r7
 80068e0:	3001      	adds	r0, #1
 80068e2:	f43f af42 	beq.w	800676a <_printf_float+0xb6>
 80068e6:	f04f 0900 	mov.w	r9, #0
 80068ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80068ee:	f104 0a1a 	add.w	sl, r4, #26
 80068f2:	45c8      	cmp	r8, r9
 80068f4:	dc09      	bgt.n	800690a <_printf_float+0x256>
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	079b      	lsls	r3, r3, #30
 80068fa:	f100 8102 	bmi.w	8006b02 <_printf_float+0x44e>
 80068fe:	68e0      	ldr	r0, [r4, #12]
 8006900:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006902:	4298      	cmp	r0, r3
 8006904:	bfb8      	it	lt
 8006906:	4618      	movlt	r0, r3
 8006908:	e731      	b.n	800676e <_printf_float+0xba>
 800690a:	2301      	movs	r3, #1
 800690c:	4652      	mov	r2, sl
 800690e:	4631      	mov	r1, r6
 8006910:	4628      	mov	r0, r5
 8006912:	47b8      	blx	r7
 8006914:	3001      	adds	r0, #1
 8006916:	f43f af28 	beq.w	800676a <_printf_float+0xb6>
 800691a:	f109 0901 	add.w	r9, r9, #1
 800691e:	e7e8      	b.n	80068f2 <_printf_float+0x23e>
 8006920:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006922:	2b00      	cmp	r3, #0
 8006924:	dc38      	bgt.n	8006998 <_printf_float+0x2e4>
 8006926:	2301      	movs	r3, #1
 8006928:	4631      	mov	r1, r6
 800692a:	4628      	mov	r0, r5
 800692c:	4a19      	ldr	r2, [pc, #100]	@ (8006994 <_printf_float+0x2e0>)
 800692e:	47b8      	blx	r7
 8006930:	3001      	adds	r0, #1
 8006932:	f43f af1a 	beq.w	800676a <_printf_float+0xb6>
 8006936:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800693a:	ea59 0303 	orrs.w	r3, r9, r3
 800693e:	d102      	bne.n	8006946 <_printf_float+0x292>
 8006940:	6823      	ldr	r3, [r4, #0]
 8006942:	07d9      	lsls	r1, r3, #31
 8006944:	d5d7      	bpl.n	80068f6 <_printf_float+0x242>
 8006946:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800694a:	4631      	mov	r1, r6
 800694c:	4628      	mov	r0, r5
 800694e:	47b8      	blx	r7
 8006950:	3001      	adds	r0, #1
 8006952:	f43f af0a 	beq.w	800676a <_printf_float+0xb6>
 8006956:	f04f 0a00 	mov.w	sl, #0
 800695a:	f104 0b1a 	add.w	fp, r4, #26
 800695e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006960:	425b      	negs	r3, r3
 8006962:	4553      	cmp	r3, sl
 8006964:	dc01      	bgt.n	800696a <_printf_float+0x2b6>
 8006966:	464b      	mov	r3, r9
 8006968:	e793      	b.n	8006892 <_printf_float+0x1de>
 800696a:	2301      	movs	r3, #1
 800696c:	465a      	mov	r2, fp
 800696e:	4631      	mov	r1, r6
 8006970:	4628      	mov	r0, r5
 8006972:	47b8      	blx	r7
 8006974:	3001      	adds	r0, #1
 8006976:	f43f aef8 	beq.w	800676a <_printf_float+0xb6>
 800697a:	f10a 0a01 	add.w	sl, sl, #1
 800697e:	e7ee      	b.n	800695e <_printf_float+0x2aa>
 8006980:	7fefffff 	.word	0x7fefffff
 8006984:	0800c429 	.word	0x0800c429
 8006988:	0800c42d 	.word	0x0800c42d
 800698c:	0800c431 	.word	0x0800c431
 8006990:	0800c435 	.word	0x0800c435
 8006994:	0800c439 	.word	0x0800c439
 8006998:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800699a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800699e:	4553      	cmp	r3, sl
 80069a0:	bfa8      	it	ge
 80069a2:	4653      	movge	r3, sl
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	4699      	mov	r9, r3
 80069a8:	dc36      	bgt.n	8006a18 <_printf_float+0x364>
 80069aa:	f04f 0b00 	mov.w	fp, #0
 80069ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069b2:	f104 021a 	add.w	r2, r4, #26
 80069b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80069b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80069ba:	eba3 0309 	sub.w	r3, r3, r9
 80069be:	455b      	cmp	r3, fp
 80069c0:	dc31      	bgt.n	8006a26 <_printf_float+0x372>
 80069c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069c4:	459a      	cmp	sl, r3
 80069c6:	dc3a      	bgt.n	8006a3e <_printf_float+0x38a>
 80069c8:	6823      	ldr	r3, [r4, #0]
 80069ca:	07da      	lsls	r2, r3, #31
 80069cc:	d437      	bmi.n	8006a3e <_printf_float+0x38a>
 80069ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069d0:	ebaa 0903 	sub.w	r9, sl, r3
 80069d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069d6:	ebaa 0303 	sub.w	r3, sl, r3
 80069da:	4599      	cmp	r9, r3
 80069dc:	bfa8      	it	ge
 80069de:	4699      	movge	r9, r3
 80069e0:	f1b9 0f00 	cmp.w	r9, #0
 80069e4:	dc33      	bgt.n	8006a4e <_printf_float+0x39a>
 80069e6:	f04f 0800 	mov.w	r8, #0
 80069ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069ee:	f104 0b1a 	add.w	fp, r4, #26
 80069f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069f4:	ebaa 0303 	sub.w	r3, sl, r3
 80069f8:	eba3 0309 	sub.w	r3, r3, r9
 80069fc:	4543      	cmp	r3, r8
 80069fe:	f77f af7a 	ble.w	80068f6 <_printf_float+0x242>
 8006a02:	2301      	movs	r3, #1
 8006a04:	465a      	mov	r2, fp
 8006a06:	4631      	mov	r1, r6
 8006a08:	4628      	mov	r0, r5
 8006a0a:	47b8      	blx	r7
 8006a0c:	3001      	adds	r0, #1
 8006a0e:	f43f aeac 	beq.w	800676a <_printf_float+0xb6>
 8006a12:	f108 0801 	add.w	r8, r8, #1
 8006a16:	e7ec      	b.n	80069f2 <_printf_float+0x33e>
 8006a18:	4642      	mov	r2, r8
 8006a1a:	4631      	mov	r1, r6
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	47b8      	blx	r7
 8006a20:	3001      	adds	r0, #1
 8006a22:	d1c2      	bne.n	80069aa <_printf_float+0x2f6>
 8006a24:	e6a1      	b.n	800676a <_printf_float+0xb6>
 8006a26:	2301      	movs	r3, #1
 8006a28:	4631      	mov	r1, r6
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	920a      	str	r2, [sp, #40]	@ 0x28
 8006a2e:	47b8      	blx	r7
 8006a30:	3001      	adds	r0, #1
 8006a32:	f43f ae9a 	beq.w	800676a <_printf_float+0xb6>
 8006a36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a38:	f10b 0b01 	add.w	fp, fp, #1
 8006a3c:	e7bb      	b.n	80069b6 <_printf_float+0x302>
 8006a3e:	4631      	mov	r1, r6
 8006a40:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006a44:	4628      	mov	r0, r5
 8006a46:	47b8      	blx	r7
 8006a48:	3001      	adds	r0, #1
 8006a4a:	d1c0      	bne.n	80069ce <_printf_float+0x31a>
 8006a4c:	e68d      	b.n	800676a <_printf_float+0xb6>
 8006a4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a50:	464b      	mov	r3, r9
 8006a52:	4631      	mov	r1, r6
 8006a54:	4628      	mov	r0, r5
 8006a56:	4442      	add	r2, r8
 8006a58:	47b8      	blx	r7
 8006a5a:	3001      	adds	r0, #1
 8006a5c:	d1c3      	bne.n	80069e6 <_printf_float+0x332>
 8006a5e:	e684      	b.n	800676a <_printf_float+0xb6>
 8006a60:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006a64:	f1ba 0f01 	cmp.w	sl, #1
 8006a68:	dc01      	bgt.n	8006a6e <_printf_float+0x3ba>
 8006a6a:	07db      	lsls	r3, r3, #31
 8006a6c:	d536      	bpl.n	8006adc <_printf_float+0x428>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	4642      	mov	r2, r8
 8006a72:	4631      	mov	r1, r6
 8006a74:	4628      	mov	r0, r5
 8006a76:	47b8      	blx	r7
 8006a78:	3001      	adds	r0, #1
 8006a7a:	f43f ae76 	beq.w	800676a <_printf_float+0xb6>
 8006a7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006a82:	4631      	mov	r1, r6
 8006a84:	4628      	mov	r0, r5
 8006a86:	47b8      	blx	r7
 8006a88:	3001      	adds	r0, #1
 8006a8a:	f43f ae6e 	beq.w	800676a <_printf_float+0xb6>
 8006a8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a92:	2200      	movs	r2, #0
 8006a94:	2300      	movs	r3, #0
 8006a96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a9a:	f7f9 ff85 	bl	80009a8 <__aeabi_dcmpeq>
 8006a9e:	b9c0      	cbnz	r0, 8006ad2 <_printf_float+0x41e>
 8006aa0:	4653      	mov	r3, sl
 8006aa2:	f108 0201 	add.w	r2, r8, #1
 8006aa6:	4631      	mov	r1, r6
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	47b8      	blx	r7
 8006aac:	3001      	adds	r0, #1
 8006aae:	d10c      	bne.n	8006aca <_printf_float+0x416>
 8006ab0:	e65b      	b.n	800676a <_printf_float+0xb6>
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	465a      	mov	r2, fp
 8006ab6:	4631      	mov	r1, r6
 8006ab8:	4628      	mov	r0, r5
 8006aba:	47b8      	blx	r7
 8006abc:	3001      	adds	r0, #1
 8006abe:	f43f ae54 	beq.w	800676a <_printf_float+0xb6>
 8006ac2:	f108 0801 	add.w	r8, r8, #1
 8006ac6:	45d0      	cmp	r8, sl
 8006ac8:	dbf3      	blt.n	8006ab2 <_printf_float+0x3fe>
 8006aca:	464b      	mov	r3, r9
 8006acc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006ad0:	e6e0      	b.n	8006894 <_printf_float+0x1e0>
 8006ad2:	f04f 0800 	mov.w	r8, #0
 8006ad6:	f104 0b1a 	add.w	fp, r4, #26
 8006ada:	e7f4      	b.n	8006ac6 <_printf_float+0x412>
 8006adc:	2301      	movs	r3, #1
 8006ade:	4642      	mov	r2, r8
 8006ae0:	e7e1      	b.n	8006aa6 <_printf_float+0x3f2>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	464a      	mov	r2, r9
 8006ae6:	4631      	mov	r1, r6
 8006ae8:	4628      	mov	r0, r5
 8006aea:	47b8      	blx	r7
 8006aec:	3001      	adds	r0, #1
 8006aee:	f43f ae3c 	beq.w	800676a <_printf_float+0xb6>
 8006af2:	f108 0801 	add.w	r8, r8, #1
 8006af6:	68e3      	ldr	r3, [r4, #12]
 8006af8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006afa:	1a5b      	subs	r3, r3, r1
 8006afc:	4543      	cmp	r3, r8
 8006afe:	dcf0      	bgt.n	8006ae2 <_printf_float+0x42e>
 8006b00:	e6fd      	b.n	80068fe <_printf_float+0x24a>
 8006b02:	f04f 0800 	mov.w	r8, #0
 8006b06:	f104 0919 	add.w	r9, r4, #25
 8006b0a:	e7f4      	b.n	8006af6 <_printf_float+0x442>

08006b0c <_printf_common>:
 8006b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b10:	4616      	mov	r6, r2
 8006b12:	4698      	mov	r8, r3
 8006b14:	688a      	ldr	r2, [r1, #8]
 8006b16:	690b      	ldr	r3, [r1, #16]
 8006b18:	4607      	mov	r7, r0
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	bfb8      	it	lt
 8006b1e:	4613      	movlt	r3, r2
 8006b20:	6033      	str	r3, [r6, #0]
 8006b22:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b26:	460c      	mov	r4, r1
 8006b28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b2c:	b10a      	cbz	r2, 8006b32 <_printf_common+0x26>
 8006b2e:	3301      	adds	r3, #1
 8006b30:	6033      	str	r3, [r6, #0]
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	0699      	lsls	r1, r3, #26
 8006b36:	bf42      	ittt	mi
 8006b38:	6833      	ldrmi	r3, [r6, #0]
 8006b3a:	3302      	addmi	r3, #2
 8006b3c:	6033      	strmi	r3, [r6, #0]
 8006b3e:	6825      	ldr	r5, [r4, #0]
 8006b40:	f015 0506 	ands.w	r5, r5, #6
 8006b44:	d106      	bne.n	8006b54 <_printf_common+0x48>
 8006b46:	f104 0a19 	add.w	sl, r4, #25
 8006b4a:	68e3      	ldr	r3, [r4, #12]
 8006b4c:	6832      	ldr	r2, [r6, #0]
 8006b4e:	1a9b      	subs	r3, r3, r2
 8006b50:	42ab      	cmp	r3, r5
 8006b52:	dc2b      	bgt.n	8006bac <_printf_common+0xa0>
 8006b54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b58:	6822      	ldr	r2, [r4, #0]
 8006b5a:	3b00      	subs	r3, #0
 8006b5c:	bf18      	it	ne
 8006b5e:	2301      	movne	r3, #1
 8006b60:	0692      	lsls	r2, r2, #26
 8006b62:	d430      	bmi.n	8006bc6 <_printf_common+0xba>
 8006b64:	4641      	mov	r1, r8
 8006b66:	4638      	mov	r0, r7
 8006b68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b6c:	47c8      	blx	r9
 8006b6e:	3001      	adds	r0, #1
 8006b70:	d023      	beq.n	8006bba <_printf_common+0xae>
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	6922      	ldr	r2, [r4, #16]
 8006b76:	f003 0306 	and.w	r3, r3, #6
 8006b7a:	2b04      	cmp	r3, #4
 8006b7c:	bf14      	ite	ne
 8006b7e:	2500      	movne	r5, #0
 8006b80:	6833      	ldreq	r3, [r6, #0]
 8006b82:	f04f 0600 	mov.w	r6, #0
 8006b86:	bf08      	it	eq
 8006b88:	68e5      	ldreq	r5, [r4, #12]
 8006b8a:	f104 041a 	add.w	r4, r4, #26
 8006b8e:	bf08      	it	eq
 8006b90:	1aed      	subeq	r5, r5, r3
 8006b92:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006b96:	bf08      	it	eq
 8006b98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	bfc4      	itt	gt
 8006ba0:	1a9b      	subgt	r3, r3, r2
 8006ba2:	18ed      	addgt	r5, r5, r3
 8006ba4:	42b5      	cmp	r5, r6
 8006ba6:	d11a      	bne.n	8006bde <_printf_common+0xd2>
 8006ba8:	2000      	movs	r0, #0
 8006baa:	e008      	b.n	8006bbe <_printf_common+0xb2>
 8006bac:	2301      	movs	r3, #1
 8006bae:	4652      	mov	r2, sl
 8006bb0:	4641      	mov	r1, r8
 8006bb2:	4638      	mov	r0, r7
 8006bb4:	47c8      	blx	r9
 8006bb6:	3001      	adds	r0, #1
 8006bb8:	d103      	bne.n	8006bc2 <_printf_common+0xb6>
 8006bba:	f04f 30ff 	mov.w	r0, #4294967295
 8006bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bc2:	3501      	adds	r5, #1
 8006bc4:	e7c1      	b.n	8006b4a <_printf_common+0x3e>
 8006bc6:	2030      	movs	r0, #48	@ 0x30
 8006bc8:	18e1      	adds	r1, r4, r3
 8006bca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006bce:	1c5a      	adds	r2, r3, #1
 8006bd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006bd4:	4422      	add	r2, r4
 8006bd6:	3302      	adds	r3, #2
 8006bd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006bdc:	e7c2      	b.n	8006b64 <_printf_common+0x58>
 8006bde:	2301      	movs	r3, #1
 8006be0:	4622      	mov	r2, r4
 8006be2:	4641      	mov	r1, r8
 8006be4:	4638      	mov	r0, r7
 8006be6:	47c8      	blx	r9
 8006be8:	3001      	adds	r0, #1
 8006bea:	d0e6      	beq.n	8006bba <_printf_common+0xae>
 8006bec:	3601      	adds	r6, #1
 8006bee:	e7d9      	b.n	8006ba4 <_printf_common+0x98>

08006bf0 <_printf_i>:
 8006bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bf4:	7e0f      	ldrb	r7, [r1, #24]
 8006bf6:	4691      	mov	r9, r2
 8006bf8:	2f78      	cmp	r7, #120	@ 0x78
 8006bfa:	4680      	mov	r8, r0
 8006bfc:	460c      	mov	r4, r1
 8006bfe:	469a      	mov	sl, r3
 8006c00:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c06:	d807      	bhi.n	8006c18 <_printf_i+0x28>
 8006c08:	2f62      	cmp	r7, #98	@ 0x62
 8006c0a:	d80a      	bhi.n	8006c22 <_printf_i+0x32>
 8006c0c:	2f00      	cmp	r7, #0
 8006c0e:	f000 80d3 	beq.w	8006db8 <_printf_i+0x1c8>
 8006c12:	2f58      	cmp	r7, #88	@ 0x58
 8006c14:	f000 80ba 	beq.w	8006d8c <_printf_i+0x19c>
 8006c18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c20:	e03a      	b.n	8006c98 <_printf_i+0xa8>
 8006c22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c26:	2b15      	cmp	r3, #21
 8006c28:	d8f6      	bhi.n	8006c18 <_printf_i+0x28>
 8006c2a:	a101      	add	r1, pc, #4	@ (adr r1, 8006c30 <_printf_i+0x40>)
 8006c2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c30:	08006c89 	.word	0x08006c89
 8006c34:	08006c9d 	.word	0x08006c9d
 8006c38:	08006c19 	.word	0x08006c19
 8006c3c:	08006c19 	.word	0x08006c19
 8006c40:	08006c19 	.word	0x08006c19
 8006c44:	08006c19 	.word	0x08006c19
 8006c48:	08006c9d 	.word	0x08006c9d
 8006c4c:	08006c19 	.word	0x08006c19
 8006c50:	08006c19 	.word	0x08006c19
 8006c54:	08006c19 	.word	0x08006c19
 8006c58:	08006c19 	.word	0x08006c19
 8006c5c:	08006d9f 	.word	0x08006d9f
 8006c60:	08006cc7 	.word	0x08006cc7
 8006c64:	08006d59 	.word	0x08006d59
 8006c68:	08006c19 	.word	0x08006c19
 8006c6c:	08006c19 	.word	0x08006c19
 8006c70:	08006dc1 	.word	0x08006dc1
 8006c74:	08006c19 	.word	0x08006c19
 8006c78:	08006cc7 	.word	0x08006cc7
 8006c7c:	08006c19 	.word	0x08006c19
 8006c80:	08006c19 	.word	0x08006c19
 8006c84:	08006d61 	.word	0x08006d61
 8006c88:	6833      	ldr	r3, [r6, #0]
 8006c8a:	1d1a      	adds	r2, r3, #4
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	6032      	str	r2, [r6, #0]
 8006c90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e09e      	b.n	8006dda <_printf_i+0x1ea>
 8006c9c:	6833      	ldr	r3, [r6, #0]
 8006c9e:	6820      	ldr	r0, [r4, #0]
 8006ca0:	1d19      	adds	r1, r3, #4
 8006ca2:	6031      	str	r1, [r6, #0]
 8006ca4:	0606      	lsls	r6, r0, #24
 8006ca6:	d501      	bpl.n	8006cac <_printf_i+0xbc>
 8006ca8:	681d      	ldr	r5, [r3, #0]
 8006caa:	e003      	b.n	8006cb4 <_printf_i+0xc4>
 8006cac:	0645      	lsls	r5, r0, #25
 8006cae:	d5fb      	bpl.n	8006ca8 <_printf_i+0xb8>
 8006cb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006cb4:	2d00      	cmp	r5, #0
 8006cb6:	da03      	bge.n	8006cc0 <_printf_i+0xd0>
 8006cb8:	232d      	movs	r3, #45	@ 0x2d
 8006cba:	426d      	negs	r5, r5
 8006cbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cc0:	230a      	movs	r3, #10
 8006cc2:	4859      	ldr	r0, [pc, #356]	@ (8006e28 <_printf_i+0x238>)
 8006cc4:	e011      	b.n	8006cea <_printf_i+0xfa>
 8006cc6:	6821      	ldr	r1, [r4, #0]
 8006cc8:	6833      	ldr	r3, [r6, #0]
 8006cca:	0608      	lsls	r0, r1, #24
 8006ccc:	f853 5b04 	ldr.w	r5, [r3], #4
 8006cd0:	d402      	bmi.n	8006cd8 <_printf_i+0xe8>
 8006cd2:	0649      	lsls	r1, r1, #25
 8006cd4:	bf48      	it	mi
 8006cd6:	b2ad      	uxthmi	r5, r5
 8006cd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006cda:	6033      	str	r3, [r6, #0]
 8006cdc:	bf14      	ite	ne
 8006cde:	230a      	movne	r3, #10
 8006ce0:	2308      	moveq	r3, #8
 8006ce2:	4851      	ldr	r0, [pc, #324]	@ (8006e28 <_printf_i+0x238>)
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006cea:	6866      	ldr	r6, [r4, #4]
 8006cec:	2e00      	cmp	r6, #0
 8006cee:	bfa8      	it	ge
 8006cf0:	6821      	ldrge	r1, [r4, #0]
 8006cf2:	60a6      	str	r6, [r4, #8]
 8006cf4:	bfa4      	itt	ge
 8006cf6:	f021 0104 	bicge.w	r1, r1, #4
 8006cfa:	6021      	strge	r1, [r4, #0]
 8006cfc:	b90d      	cbnz	r5, 8006d02 <_printf_i+0x112>
 8006cfe:	2e00      	cmp	r6, #0
 8006d00:	d04b      	beq.n	8006d9a <_printf_i+0x1aa>
 8006d02:	4616      	mov	r6, r2
 8006d04:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d08:	fb03 5711 	mls	r7, r3, r1, r5
 8006d0c:	5dc7      	ldrb	r7, [r0, r7]
 8006d0e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d12:	462f      	mov	r7, r5
 8006d14:	42bb      	cmp	r3, r7
 8006d16:	460d      	mov	r5, r1
 8006d18:	d9f4      	bls.n	8006d04 <_printf_i+0x114>
 8006d1a:	2b08      	cmp	r3, #8
 8006d1c:	d10b      	bne.n	8006d36 <_printf_i+0x146>
 8006d1e:	6823      	ldr	r3, [r4, #0]
 8006d20:	07df      	lsls	r7, r3, #31
 8006d22:	d508      	bpl.n	8006d36 <_printf_i+0x146>
 8006d24:	6923      	ldr	r3, [r4, #16]
 8006d26:	6861      	ldr	r1, [r4, #4]
 8006d28:	4299      	cmp	r1, r3
 8006d2a:	bfde      	ittt	le
 8006d2c:	2330      	movle	r3, #48	@ 0x30
 8006d2e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d32:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d36:	1b92      	subs	r2, r2, r6
 8006d38:	6122      	str	r2, [r4, #16]
 8006d3a:	464b      	mov	r3, r9
 8006d3c:	4621      	mov	r1, r4
 8006d3e:	4640      	mov	r0, r8
 8006d40:	f8cd a000 	str.w	sl, [sp]
 8006d44:	aa03      	add	r2, sp, #12
 8006d46:	f7ff fee1 	bl	8006b0c <_printf_common>
 8006d4a:	3001      	adds	r0, #1
 8006d4c:	d14a      	bne.n	8006de4 <_printf_i+0x1f4>
 8006d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d52:	b004      	add	sp, #16
 8006d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d58:	6823      	ldr	r3, [r4, #0]
 8006d5a:	f043 0320 	orr.w	r3, r3, #32
 8006d5e:	6023      	str	r3, [r4, #0]
 8006d60:	2778      	movs	r7, #120	@ 0x78
 8006d62:	4832      	ldr	r0, [pc, #200]	@ (8006e2c <_printf_i+0x23c>)
 8006d64:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	6831      	ldr	r1, [r6, #0]
 8006d6c:	061f      	lsls	r7, r3, #24
 8006d6e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d72:	d402      	bmi.n	8006d7a <_printf_i+0x18a>
 8006d74:	065f      	lsls	r7, r3, #25
 8006d76:	bf48      	it	mi
 8006d78:	b2ad      	uxthmi	r5, r5
 8006d7a:	6031      	str	r1, [r6, #0]
 8006d7c:	07d9      	lsls	r1, r3, #31
 8006d7e:	bf44      	itt	mi
 8006d80:	f043 0320 	orrmi.w	r3, r3, #32
 8006d84:	6023      	strmi	r3, [r4, #0]
 8006d86:	b11d      	cbz	r5, 8006d90 <_printf_i+0x1a0>
 8006d88:	2310      	movs	r3, #16
 8006d8a:	e7ab      	b.n	8006ce4 <_printf_i+0xf4>
 8006d8c:	4826      	ldr	r0, [pc, #152]	@ (8006e28 <_printf_i+0x238>)
 8006d8e:	e7e9      	b.n	8006d64 <_printf_i+0x174>
 8006d90:	6823      	ldr	r3, [r4, #0]
 8006d92:	f023 0320 	bic.w	r3, r3, #32
 8006d96:	6023      	str	r3, [r4, #0]
 8006d98:	e7f6      	b.n	8006d88 <_printf_i+0x198>
 8006d9a:	4616      	mov	r6, r2
 8006d9c:	e7bd      	b.n	8006d1a <_printf_i+0x12a>
 8006d9e:	6833      	ldr	r3, [r6, #0]
 8006da0:	6825      	ldr	r5, [r4, #0]
 8006da2:	1d18      	adds	r0, r3, #4
 8006da4:	6961      	ldr	r1, [r4, #20]
 8006da6:	6030      	str	r0, [r6, #0]
 8006da8:	062e      	lsls	r6, r5, #24
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	d501      	bpl.n	8006db2 <_printf_i+0x1c2>
 8006dae:	6019      	str	r1, [r3, #0]
 8006db0:	e002      	b.n	8006db8 <_printf_i+0x1c8>
 8006db2:	0668      	lsls	r0, r5, #25
 8006db4:	d5fb      	bpl.n	8006dae <_printf_i+0x1be>
 8006db6:	8019      	strh	r1, [r3, #0]
 8006db8:	2300      	movs	r3, #0
 8006dba:	4616      	mov	r6, r2
 8006dbc:	6123      	str	r3, [r4, #16]
 8006dbe:	e7bc      	b.n	8006d3a <_printf_i+0x14a>
 8006dc0:	6833      	ldr	r3, [r6, #0]
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	1d1a      	adds	r2, r3, #4
 8006dc6:	6032      	str	r2, [r6, #0]
 8006dc8:	681e      	ldr	r6, [r3, #0]
 8006dca:	6862      	ldr	r2, [r4, #4]
 8006dcc:	4630      	mov	r0, r6
 8006dce:	f000 fbf6 	bl	80075be <memchr>
 8006dd2:	b108      	cbz	r0, 8006dd8 <_printf_i+0x1e8>
 8006dd4:	1b80      	subs	r0, r0, r6
 8006dd6:	6060      	str	r0, [r4, #4]
 8006dd8:	6863      	ldr	r3, [r4, #4]
 8006dda:	6123      	str	r3, [r4, #16]
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006de2:	e7aa      	b.n	8006d3a <_printf_i+0x14a>
 8006de4:	4632      	mov	r2, r6
 8006de6:	4649      	mov	r1, r9
 8006de8:	4640      	mov	r0, r8
 8006dea:	6923      	ldr	r3, [r4, #16]
 8006dec:	47d0      	blx	sl
 8006dee:	3001      	adds	r0, #1
 8006df0:	d0ad      	beq.n	8006d4e <_printf_i+0x15e>
 8006df2:	6823      	ldr	r3, [r4, #0]
 8006df4:	079b      	lsls	r3, r3, #30
 8006df6:	d413      	bmi.n	8006e20 <_printf_i+0x230>
 8006df8:	68e0      	ldr	r0, [r4, #12]
 8006dfa:	9b03      	ldr	r3, [sp, #12]
 8006dfc:	4298      	cmp	r0, r3
 8006dfe:	bfb8      	it	lt
 8006e00:	4618      	movlt	r0, r3
 8006e02:	e7a6      	b.n	8006d52 <_printf_i+0x162>
 8006e04:	2301      	movs	r3, #1
 8006e06:	4632      	mov	r2, r6
 8006e08:	4649      	mov	r1, r9
 8006e0a:	4640      	mov	r0, r8
 8006e0c:	47d0      	blx	sl
 8006e0e:	3001      	adds	r0, #1
 8006e10:	d09d      	beq.n	8006d4e <_printf_i+0x15e>
 8006e12:	3501      	adds	r5, #1
 8006e14:	68e3      	ldr	r3, [r4, #12]
 8006e16:	9903      	ldr	r1, [sp, #12]
 8006e18:	1a5b      	subs	r3, r3, r1
 8006e1a:	42ab      	cmp	r3, r5
 8006e1c:	dcf2      	bgt.n	8006e04 <_printf_i+0x214>
 8006e1e:	e7eb      	b.n	8006df8 <_printf_i+0x208>
 8006e20:	2500      	movs	r5, #0
 8006e22:	f104 0619 	add.w	r6, r4, #25
 8006e26:	e7f5      	b.n	8006e14 <_printf_i+0x224>
 8006e28:	0800c43b 	.word	0x0800c43b
 8006e2c:	0800c44c 	.word	0x0800c44c

08006e30 <_scanf_float>:
 8006e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e34:	b087      	sub	sp, #28
 8006e36:	9303      	str	r3, [sp, #12]
 8006e38:	688b      	ldr	r3, [r1, #8]
 8006e3a:	4617      	mov	r7, r2
 8006e3c:	1e5a      	subs	r2, r3, #1
 8006e3e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006e42:	bf82      	ittt	hi
 8006e44:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006e48:	eb03 0b05 	addhi.w	fp, r3, r5
 8006e4c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006e50:	460a      	mov	r2, r1
 8006e52:	f04f 0500 	mov.w	r5, #0
 8006e56:	bf88      	it	hi
 8006e58:	608b      	strhi	r3, [r1, #8]
 8006e5a:	680b      	ldr	r3, [r1, #0]
 8006e5c:	4680      	mov	r8, r0
 8006e5e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006e62:	f842 3b1c 	str.w	r3, [r2], #28
 8006e66:	460c      	mov	r4, r1
 8006e68:	bf98      	it	ls
 8006e6a:	f04f 0b00 	movls.w	fp, #0
 8006e6e:	4616      	mov	r6, r2
 8006e70:	46aa      	mov	sl, r5
 8006e72:	46a9      	mov	r9, r5
 8006e74:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006e78:	9201      	str	r2, [sp, #4]
 8006e7a:	9502      	str	r5, [sp, #8]
 8006e7c:	68a2      	ldr	r2, [r4, #8]
 8006e7e:	b152      	cbz	r2, 8006e96 <_scanf_float+0x66>
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	2b4e      	cmp	r3, #78	@ 0x4e
 8006e86:	d865      	bhi.n	8006f54 <_scanf_float+0x124>
 8006e88:	2b40      	cmp	r3, #64	@ 0x40
 8006e8a:	d83d      	bhi.n	8006f08 <_scanf_float+0xd8>
 8006e8c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006e90:	b2c8      	uxtb	r0, r1
 8006e92:	280e      	cmp	r0, #14
 8006e94:	d93b      	bls.n	8006f0e <_scanf_float+0xde>
 8006e96:	f1b9 0f00 	cmp.w	r9, #0
 8006e9a:	d003      	beq.n	8006ea4 <_scanf_float+0x74>
 8006e9c:	6823      	ldr	r3, [r4, #0]
 8006e9e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ea2:	6023      	str	r3, [r4, #0]
 8006ea4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ea8:	f1ba 0f01 	cmp.w	sl, #1
 8006eac:	f200 8118 	bhi.w	80070e0 <_scanf_float+0x2b0>
 8006eb0:	9b01      	ldr	r3, [sp, #4]
 8006eb2:	429e      	cmp	r6, r3
 8006eb4:	f200 8109 	bhi.w	80070ca <_scanf_float+0x29a>
 8006eb8:	2001      	movs	r0, #1
 8006eba:	b007      	add	sp, #28
 8006ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ec0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006ec4:	2a0d      	cmp	r2, #13
 8006ec6:	d8e6      	bhi.n	8006e96 <_scanf_float+0x66>
 8006ec8:	a101      	add	r1, pc, #4	@ (adr r1, 8006ed0 <_scanf_float+0xa0>)
 8006eca:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006ece:	bf00      	nop
 8006ed0:	08007017 	.word	0x08007017
 8006ed4:	08006e97 	.word	0x08006e97
 8006ed8:	08006e97 	.word	0x08006e97
 8006edc:	08006e97 	.word	0x08006e97
 8006ee0:	08007077 	.word	0x08007077
 8006ee4:	0800704f 	.word	0x0800704f
 8006ee8:	08006e97 	.word	0x08006e97
 8006eec:	08006e97 	.word	0x08006e97
 8006ef0:	08007025 	.word	0x08007025
 8006ef4:	08006e97 	.word	0x08006e97
 8006ef8:	08006e97 	.word	0x08006e97
 8006efc:	08006e97 	.word	0x08006e97
 8006f00:	08006e97 	.word	0x08006e97
 8006f04:	08006fdd 	.word	0x08006fdd
 8006f08:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006f0c:	e7da      	b.n	8006ec4 <_scanf_float+0x94>
 8006f0e:	290e      	cmp	r1, #14
 8006f10:	d8c1      	bhi.n	8006e96 <_scanf_float+0x66>
 8006f12:	a001      	add	r0, pc, #4	@ (adr r0, 8006f18 <_scanf_float+0xe8>)
 8006f14:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006f18:	08006fcd 	.word	0x08006fcd
 8006f1c:	08006e97 	.word	0x08006e97
 8006f20:	08006fcd 	.word	0x08006fcd
 8006f24:	08007063 	.word	0x08007063
 8006f28:	08006e97 	.word	0x08006e97
 8006f2c:	08006f75 	.word	0x08006f75
 8006f30:	08006fb3 	.word	0x08006fb3
 8006f34:	08006fb3 	.word	0x08006fb3
 8006f38:	08006fb3 	.word	0x08006fb3
 8006f3c:	08006fb3 	.word	0x08006fb3
 8006f40:	08006fb3 	.word	0x08006fb3
 8006f44:	08006fb3 	.word	0x08006fb3
 8006f48:	08006fb3 	.word	0x08006fb3
 8006f4c:	08006fb3 	.word	0x08006fb3
 8006f50:	08006fb3 	.word	0x08006fb3
 8006f54:	2b6e      	cmp	r3, #110	@ 0x6e
 8006f56:	d809      	bhi.n	8006f6c <_scanf_float+0x13c>
 8006f58:	2b60      	cmp	r3, #96	@ 0x60
 8006f5a:	d8b1      	bhi.n	8006ec0 <_scanf_float+0x90>
 8006f5c:	2b54      	cmp	r3, #84	@ 0x54
 8006f5e:	d07b      	beq.n	8007058 <_scanf_float+0x228>
 8006f60:	2b59      	cmp	r3, #89	@ 0x59
 8006f62:	d198      	bne.n	8006e96 <_scanf_float+0x66>
 8006f64:	2d07      	cmp	r5, #7
 8006f66:	d196      	bne.n	8006e96 <_scanf_float+0x66>
 8006f68:	2508      	movs	r5, #8
 8006f6a:	e02c      	b.n	8006fc6 <_scanf_float+0x196>
 8006f6c:	2b74      	cmp	r3, #116	@ 0x74
 8006f6e:	d073      	beq.n	8007058 <_scanf_float+0x228>
 8006f70:	2b79      	cmp	r3, #121	@ 0x79
 8006f72:	e7f6      	b.n	8006f62 <_scanf_float+0x132>
 8006f74:	6821      	ldr	r1, [r4, #0]
 8006f76:	05c8      	lsls	r0, r1, #23
 8006f78:	d51b      	bpl.n	8006fb2 <_scanf_float+0x182>
 8006f7a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006f7e:	6021      	str	r1, [r4, #0]
 8006f80:	f109 0901 	add.w	r9, r9, #1
 8006f84:	f1bb 0f00 	cmp.w	fp, #0
 8006f88:	d003      	beq.n	8006f92 <_scanf_float+0x162>
 8006f8a:	3201      	adds	r2, #1
 8006f8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006f90:	60a2      	str	r2, [r4, #8]
 8006f92:	68a3      	ldr	r3, [r4, #8]
 8006f94:	3b01      	subs	r3, #1
 8006f96:	60a3      	str	r3, [r4, #8]
 8006f98:	6923      	ldr	r3, [r4, #16]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	6123      	str	r3, [r4, #16]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	607b      	str	r3, [r7, #4]
 8006fa6:	f340 8087 	ble.w	80070b8 <_scanf_float+0x288>
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	3301      	adds	r3, #1
 8006fae:	603b      	str	r3, [r7, #0]
 8006fb0:	e764      	b.n	8006e7c <_scanf_float+0x4c>
 8006fb2:	eb1a 0105 	adds.w	r1, sl, r5
 8006fb6:	f47f af6e 	bne.w	8006e96 <_scanf_float+0x66>
 8006fba:	460d      	mov	r5, r1
 8006fbc:	468a      	mov	sl, r1
 8006fbe:	6822      	ldr	r2, [r4, #0]
 8006fc0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006fc4:	6022      	str	r2, [r4, #0]
 8006fc6:	f806 3b01 	strb.w	r3, [r6], #1
 8006fca:	e7e2      	b.n	8006f92 <_scanf_float+0x162>
 8006fcc:	6822      	ldr	r2, [r4, #0]
 8006fce:	0610      	lsls	r0, r2, #24
 8006fd0:	f57f af61 	bpl.w	8006e96 <_scanf_float+0x66>
 8006fd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006fd8:	6022      	str	r2, [r4, #0]
 8006fda:	e7f4      	b.n	8006fc6 <_scanf_float+0x196>
 8006fdc:	f1ba 0f00 	cmp.w	sl, #0
 8006fe0:	d10e      	bne.n	8007000 <_scanf_float+0x1d0>
 8006fe2:	f1b9 0f00 	cmp.w	r9, #0
 8006fe6:	d10e      	bne.n	8007006 <_scanf_float+0x1d6>
 8006fe8:	6822      	ldr	r2, [r4, #0]
 8006fea:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006fee:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006ff2:	d108      	bne.n	8007006 <_scanf_float+0x1d6>
 8006ff4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006ff8:	f04f 0a01 	mov.w	sl, #1
 8006ffc:	6022      	str	r2, [r4, #0]
 8006ffe:	e7e2      	b.n	8006fc6 <_scanf_float+0x196>
 8007000:	f1ba 0f02 	cmp.w	sl, #2
 8007004:	d055      	beq.n	80070b2 <_scanf_float+0x282>
 8007006:	2d01      	cmp	r5, #1
 8007008:	d002      	beq.n	8007010 <_scanf_float+0x1e0>
 800700a:	2d04      	cmp	r5, #4
 800700c:	f47f af43 	bne.w	8006e96 <_scanf_float+0x66>
 8007010:	3501      	adds	r5, #1
 8007012:	b2ed      	uxtb	r5, r5
 8007014:	e7d7      	b.n	8006fc6 <_scanf_float+0x196>
 8007016:	f1ba 0f01 	cmp.w	sl, #1
 800701a:	f47f af3c 	bne.w	8006e96 <_scanf_float+0x66>
 800701e:	f04f 0a02 	mov.w	sl, #2
 8007022:	e7d0      	b.n	8006fc6 <_scanf_float+0x196>
 8007024:	b97d      	cbnz	r5, 8007046 <_scanf_float+0x216>
 8007026:	f1b9 0f00 	cmp.w	r9, #0
 800702a:	f47f af37 	bne.w	8006e9c <_scanf_float+0x6c>
 800702e:	6822      	ldr	r2, [r4, #0]
 8007030:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007034:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007038:	f040 8103 	bne.w	8007242 <_scanf_float+0x412>
 800703c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007040:	2501      	movs	r5, #1
 8007042:	6022      	str	r2, [r4, #0]
 8007044:	e7bf      	b.n	8006fc6 <_scanf_float+0x196>
 8007046:	2d03      	cmp	r5, #3
 8007048:	d0e2      	beq.n	8007010 <_scanf_float+0x1e0>
 800704a:	2d05      	cmp	r5, #5
 800704c:	e7de      	b.n	800700c <_scanf_float+0x1dc>
 800704e:	2d02      	cmp	r5, #2
 8007050:	f47f af21 	bne.w	8006e96 <_scanf_float+0x66>
 8007054:	2503      	movs	r5, #3
 8007056:	e7b6      	b.n	8006fc6 <_scanf_float+0x196>
 8007058:	2d06      	cmp	r5, #6
 800705a:	f47f af1c 	bne.w	8006e96 <_scanf_float+0x66>
 800705e:	2507      	movs	r5, #7
 8007060:	e7b1      	b.n	8006fc6 <_scanf_float+0x196>
 8007062:	6822      	ldr	r2, [r4, #0]
 8007064:	0591      	lsls	r1, r2, #22
 8007066:	f57f af16 	bpl.w	8006e96 <_scanf_float+0x66>
 800706a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800706e:	6022      	str	r2, [r4, #0]
 8007070:	f8cd 9008 	str.w	r9, [sp, #8]
 8007074:	e7a7      	b.n	8006fc6 <_scanf_float+0x196>
 8007076:	6822      	ldr	r2, [r4, #0]
 8007078:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800707c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007080:	d006      	beq.n	8007090 <_scanf_float+0x260>
 8007082:	0550      	lsls	r0, r2, #21
 8007084:	f57f af07 	bpl.w	8006e96 <_scanf_float+0x66>
 8007088:	f1b9 0f00 	cmp.w	r9, #0
 800708c:	f000 80d9 	beq.w	8007242 <_scanf_float+0x412>
 8007090:	0591      	lsls	r1, r2, #22
 8007092:	bf58      	it	pl
 8007094:	9902      	ldrpl	r1, [sp, #8]
 8007096:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800709a:	bf58      	it	pl
 800709c:	eba9 0101 	subpl.w	r1, r9, r1
 80070a0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80070a4:	f04f 0900 	mov.w	r9, #0
 80070a8:	bf58      	it	pl
 80070aa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80070ae:	6022      	str	r2, [r4, #0]
 80070b0:	e789      	b.n	8006fc6 <_scanf_float+0x196>
 80070b2:	f04f 0a03 	mov.w	sl, #3
 80070b6:	e786      	b.n	8006fc6 <_scanf_float+0x196>
 80070b8:	4639      	mov	r1, r7
 80070ba:	4640      	mov	r0, r8
 80070bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80070c0:	4798      	blx	r3
 80070c2:	2800      	cmp	r0, #0
 80070c4:	f43f aeda 	beq.w	8006e7c <_scanf_float+0x4c>
 80070c8:	e6e5      	b.n	8006e96 <_scanf_float+0x66>
 80070ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80070ce:	463a      	mov	r2, r7
 80070d0:	4640      	mov	r0, r8
 80070d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80070d6:	4798      	blx	r3
 80070d8:	6923      	ldr	r3, [r4, #16]
 80070da:	3b01      	subs	r3, #1
 80070dc:	6123      	str	r3, [r4, #16]
 80070de:	e6e7      	b.n	8006eb0 <_scanf_float+0x80>
 80070e0:	1e6b      	subs	r3, r5, #1
 80070e2:	2b06      	cmp	r3, #6
 80070e4:	d824      	bhi.n	8007130 <_scanf_float+0x300>
 80070e6:	2d02      	cmp	r5, #2
 80070e8:	d836      	bhi.n	8007158 <_scanf_float+0x328>
 80070ea:	9b01      	ldr	r3, [sp, #4]
 80070ec:	429e      	cmp	r6, r3
 80070ee:	f67f aee3 	bls.w	8006eb8 <_scanf_float+0x88>
 80070f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80070f6:	463a      	mov	r2, r7
 80070f8:	4640      	mov	r0, r8
 80070fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80070fe:	4798      	blx	r3
 8007100:	6923      	ldr	r3, [r4, #16]
 8007102:	3b01      	subs	r3, #1
 8007104:	6123      	str	r3, [r4, #16]
 8007106:	e7f0      	b.n	80070ea <_scanf_float+0x2ba>
 8007108:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800710c:	463a      	mov	r2, r7
 800710e:	4640      	mov	r0, r8
 8007110:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007114:	4798      	blx	r3
 8007116:	6923      	ldr	r3, [r4, #16]
 8007118:	3b01      	subs	r3, #1
 800711a:	6123      	str	r3, [r4, #16]
 800711c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007120:	fa5f fa8a 	uxtb.w	sl, sl
 8007124:	f1ba 0f02 	cmp.w	sl, #2
 8007128:	d1ee      	bne.n	8007108 <_scanf_float+0x2d8>
 800712a:	3d03      	subs	r5, #3
 800712c:	b2ed      	uxtb	r5, r5
 800712e:	1b76      	subs	r6, r6, r5
 8007130:	6823      	ldr	r3, [r4, #0]
 8007132:	05da      	lsls	r2, r3, #23
 8007134:	d530      	bpl.n	8007198 <_scanf_float+0x368>
 8007136:	055b      	lsls	r3, r3, #21
 8007138:	d511      	bpl.n	800715e <_scanf_float+0x32e>
 800713a:	9b01      	ldr	r3, [sp, #4]
 800713c:	429e      	cmp	r6, r3
 800713e:	f67f aebb 	bls.w	8006eb8 <_scanf_float+0x88>
 8007142:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007146:	463a      	mov	r2, r7
 8007148:	4640      	mov	r0, r8
 800714a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800714e:	4798      	blx	r3
 8007150:	6923      	ldr	r3, [r4, #16]
 8007152:	3b01      	subs	r3, #1
 8007154:	6123      	str	r3, [r4, #16]
 8007156:	e7f0      	b.n	800713a <_scanf_float+0x30a>
 8007158:	46aa      	mov	sl, r5
 800715a:	46b3      	mov	fp, r6
 800715c:	e7de      	b.n	800711c <_scanf_float+0x2ec>
 800715e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007162:	6923      	ldr	r3, [r4, #16]
 8007164:	2965      	cmp	r1, #101	@ 0x65
 8007166:	f103 33ff 	add.w	r3, r3, #4294967295
 800716a:	f106 35ff 	add.w	r5, r6, #4294967295
 800716e:	6123      	str	r3, [r4, #16]
 8007170:	d00c      	beq.n	800718c <_scanf_float+0x35c>
 8007172:	2945      	cmp	r1, #69	@ 0x45
 8007174:	d00a      	beq.n	800718c <_scanf_float+0x35c>
 8007176:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800717a:	463a      	mov	r2, r7
 800717c:	4640      	mov	r0, r8
 800717e:	4798      	blx	r3
 8007180:	6923      	ldr	r3, [r4, #16]
 8007182:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007186:	3b01      	subs	r3, #1
 8007188:	1eb5      	subs	r5, r6, #2
 800718a:	6123      	str	r3, [r4, #16]
 800718c:	463a      	mov	r2, r7
 800718e:	4640      	mov	r0, r8
 8007190:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007194:	4798      	blx	r3
 8007196:	462e      	mov	r6, r5
 8007198:	6822      	ldr	r2, [r4, #0]
 800719a:	f012 0210 	ands.w	r2, r2, #16
 800719e:	d001      	beq.n	80071a4 <_scanf_float+0x374>
 80071a0:	2000      	movs	r0, #0
 80071a2:	e68a      	b.n	8006eba <_scanf_float+0x8a>
 80071a4:	7032      	strb	r2, [r6, #0]
 80071a6:	6823      	ldr	r3, [r4, #0]
 80071a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80071ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071b0:	d11c      	bne.n	80071ec <_scanf_float+0x3bc>
 80071b2:	9b02      	ldr	r3, [sp, #8]
 80071b4:	454b      	cmp	r3, r9
 80071b6:	eba3 0209 	sub.w	r2, r3, r9
 80071ba:	d123      	bne.n	8007204 <_scanf_float+0x3d4>
 80071bc:	2200      	movs	r2, #0
 80071be:	4640      	mov	r0, r8
 80071c0:	9901      	ldr	r1, [sp, #4]
 80071c2:	f7ff f941 	bl	8006448 <_strtod_r>
 80071c6:	9b03      	ldr	r3, [sp, #12]
 80071c8:	6825      	ldr	r5, [r4, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f015 0f02 	tst.w	r5, #2
 80071d0:	4606      	mov	r6, r0
 80071d2:	460f      	mov	r7, r1
 80071d4:	f103 0204 	add.w	r2, r3, #4
 80071d8:	d01f      	beq.n	800721a <_scanf_float+0x3ea>
 80071da:	9903      	ldr	r1, [sp, #12]
 80071dc:	600a      	str	r2, [r1, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	e9c3 6700 	strd	r6, r7, [r3]
 80071e4:	68e3      	ldr	r3, [r4, #12]
 80071e6:	3301      	adds	r3, #1
 80071e8:	60e3      	str	r3, [r4, #12]
 80071ea:	e7d9      	b.n	80071a0 <_scanf_float+0x370>
 80071ec:	9b04      	ldr	r3, [sp, #16]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d0e4      	beq.n	80071bc <_scanf_float+0x38c>
 80071f2:	9905      	ldr	r1, [sp, #20]
 80071f4:	230a      	movs	r3, #10
 80071f6:	4640      	mov	r0, r8
 80071f8:	3101      	adds	r1, #1
 80071fa:	f7ff f9b1 	bl	8006560 <_strtol_r>
 80071fe:	9b04      	ldr	r3, [sp, #16]
 8007200:	9e05      	ldr	r6, [sp, #20]
 8007202:	1ac2      	subs	r2, r0, r3
 8007204:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007208:	429e      	cmp	r6, r3
 800720a:	bf28      	it	cs
 800720c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007210:	4630      	mov	r0, r6
 8007212:	490d      	ldr	r1, [pc, #52]	@ (8007248 <_scanf_float+0x418>)
 8007214:	f000 f8de 	bl	80073d4 <siprintf>
 8007218:	e7d0      	b.n	80071bc <_scanf_float+0x38c>
 800721a:	076d      	lsls	r5, r5, #29
 800721c:	d4dd      	bmi.n	80071da <_scanf_float+0x3aa>
 800721e:	9d03      	ldr	r5, [sp, #12]
 8007220:	602a      	str	r2, [r5, #0]
 8007222:	681d      	ldr	r5, [r3, #0]
 8007224:	4602      	mov	r2, r0
 8007226:	460b      	mov	r3, r1
 8007228:	f7f9 fbf0 	bl	8000a0c <__aeabi_dcmpun>
 800722c:	b120      	cbz	r0, 8007238 <_scanf_float+0x408>
 800722e:	4807      	ldr	r0, [pc, #28]	@ (800724c <_scanf_float+0x41c>)
 8007230:	f000 f9e8 	bl	8007604 <nanf>
 8007234:	6028      	str	r0, [r5, #0]
 8007236:	e7d5      	b.n	80071e4 <_scanf_float+0x3b4>
 8007238:	4630      	mov	r0, r6
 800723a:	4639      	mov	r1, r7
 800723c:	f7f9 fc44 	bl	8000ac8 <__aeabi_d2f>
 8007240:	e7f8      	b.n	8007234 <_scanf_float+0x404>
 8007242:	f04f 0900 	mov.w	r9, #0
 8007246:	e62d      	b.n	8006ea4 <_scanf_float+0x74>
 8007248:	0800c45d 	.word	0x0800c45d
 800724c:	0800c6fc 	.word	0x0800c6fc

08007250 <std>:
 8007250:	2300      	movs	r3, #0
 8007252:	b510      	push	{r4, lr}
 8007254:	4604      	mov	r4, r0
 8007256:	e9c0 3300 	strd	r3, r3, [r0]
 800725a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800725e:	6083      	str	r3, [r0, #8]
 8007260:	8181      	strh	r1, [r0, #12]
 8007262:	6643      	str	r3, [r0, #100]	@ 0x64
 8007264:	81c2      	strh	r2, [r0, #14]
 8007266:	6183      	str	r3, [r0, #24]
 8007268:	4619      	mov	r1, r3
 800726a:	2208      	movs	r2, #8
 800726c:	305c      	adds	r0, #92	@ 0x5c
 800726e:	f000 f914 	bl	800749a <memset>
 8007272:	4b0d      	ldr	r3, [pc, #52]	@ (80072a8 <std+0x58>)
 8007274:	6224      	str	r4, [r4, #32]
 8007276:	6263      	str	r3, [r4, #36]	@ 0x24
 8007278:	4b0c      	ldr	r3, [pc, #48]	@ (80072ac <std+0x5c>)
 800727a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800727c:	4b0c      	ldr	r3, [pc, #48]	@ (80072b0 <std+0x60>)
 800727e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007280:	4b0c      	ldr	r3, [pc, #48]	@ (80072b4 <std+0x64>)
 8007282:	6323      	str	r3, [r4, #48]	@ 0x30
 8007284:	4b0c      	ldr	r3, [pc, #48]	@ (80072b8 <std+0x68>)
 8007286:	429c      	cmp	r4, r3
 8007288:	d006      	beq.n	8007298 <std+0x48>
 800728a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800728e:	4294      	cmp	r4, r2
 8007290:	d002      	beq.n	8007298 <std+0x48>
 8007292:	33d0      	adds	r3, #208	@ 0xd0
 8007294:	429c      	cmp	r4, r3
 8007296:	d105      	bne.n	80072a4 <std+0x54>
 8007298:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800729c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072a0:	f000 b98a 	b.w	80075b8 <__retarget_lock_init_recursive>
 80072a4:	bd10      	pop	{r4, pc}
 80072a6:	bf00      	nop
 80072a8:	08007415 	.word	0x08007415
 80072ac:	08007437 	.word	0x08007437
 80072b0:	0800746f 	.word	0x0800746f
 80072b4:	08007493 	.word	0x08007493
 80072b8:	20000a70 	.word	0x20000a70

080072bc <stdio_exit_handler>:
 80072bc:	4a02      	ldr	r2, [pc, #8]	@ (80072c8 <stdio_exit_handler+0xc>)
 80072be:	4903      	ldr	r1, [pc, #12]	@ (80072cc <stdio_exit_handler+0x10>)
 80072c0:	4803      	ldr	r0, [pc, #12]	@ (80072d0 <stdio_exit_handler+0x14>)
 80072c2:	f000 b869 	b.w	8007398 <_fwalk_sglue>
 80072c6:	bf00      	nop
 80072c8:	20000024 	.word	0x20000024
 80072cc:	08009859 	.word	0x08009859
 80072d0:	200001a0 	.word	0x200001a0

080072d4 <cleanup_stdio>:
 80072d4:	6841      	ldr	r1, [r0, #4]
 80072d6:	4b0c      	ldr	r3, [pc, #48]	@ (8007308 <cleanup_stdio+0x34>)
 80072d8:	b510      	push	{r4, lr}
 80072da:	4299      	cmp	r1, r3
 80072dc:	4604      	mov	r4, r0
 80072de:	d001      	beq.n	80072e4 <cleanup_stdio+0x10>
 80072e0:	f002 faba 	bl	8009858 <_fflush_r>
 80072e4:	68a1      	ldr	r1, [r4, #8]
 80072e6:	4b09      	ldr	r3, [pc, #36]	@ (800730c <cleanup_stdio+0x38>)
 80072e8:	4299      	cmp	r1, r3
 80072ea:	d002      	beq.n	80072f2 <cleanup_stdio+0x1e>
 80072ec:	4620      	mov	r0, r4
 80072ee:	f002 fab3 	bl	8009858 <_fflush_r>
 80072f2:	68e1      	ldr	r1, [r4, #12]
 80072f4:	4b06      	ldr	r3, [pc, #24]	@ (8007310 <cleanup_stdio+0x3c>)
 80072f6:	4299      	cmp	r1, r3
 80072f8:	d004      	beq.n	8007304 <cleanup_stdio+0x30>
 80072fa:	4620      	mov	r0, r4
 80072fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007300:	f002 baaa 	b.w	8009858 <_fflush_r>
 8007304:	bd10      	pop	{r4, pc}
 8007306:	bf00      	nop
 8007308:	20000a70 	.word	0x20000a70
 800730c:	20000ad8 	.word	0x20000ad8
 8007310:	20000b40 	.word	0x20000b40

08007314 <global_stdio_init.part.0>:
 8007314:	b510      	push	{r4, lr}
 8007316:	4b0b      	ldr	r3, [pc, #44]	@ (8007344 <global_stdio_init.part.0+0x30>)
 8007318:	4c0b      	ldr	r4, [pc, #44]	@ (8007348 <global_stdio_init.part.0+0x34>)
 800731a:	4a0c      	ldr	r2, [pc, #48]	@ (800734c <global_stdio_init.part.0+0x38>)
 800731c:	4620      	mov	r0, r4
 800731e:	601a      	str	r2, [r3, #0]
 8007320:	2104      	movs	r1, #4
 8007322:	2200      	movs	r2, #0
 8007324:	f7ff ff94 	bl	8007250 <std>
 8007328:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800732c:	2201      	movs	r2, #1
 800732e:	2109      	movs	r1, #9
 8007330:	f7ff ff8e 	bl	8007250 <std>
 8007334:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007338:	2202      	movs	r2, #2
 800733a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800733e:	2112      	movs	r1, #18
 8007340:	f7ff bf86 	b.w	8007250 <std>
 8007344:	20000ba8 	.word	0x20000ba8
 8007348:	20000a70 	.word	0x20000a70
 800734c:	080072bd 	.word	0x080072bd

08007350 <__sfp_lock_acquire>:
 8007350:	4801      	ldr	r0, [pc, #4]	@ (8007358 <__sfp_lock_acquire+0x8>)
 8007352:	f000 b932 	b.w	80075ba <__retarget_lock_acquire_recursive>
 8007356:	bf00      	nop
 8007358:	20000bb1 	.word	0x20000bb1

0800735c <__sfp_lock_release>:
 800735c:	4801      	ldr	r0, [pc, #4]	@ (8007364 <__sfp_lock_release+0x8>)
 800735e:	f000 b92d 	b.w	80075bc <__retarget_lock_release_recursive>
 8007362:	bf00      	nop
 8007364:	20000bb1 	.word	0x20000bb1

08007368 <__sinit>:
 8007368:	b510      	push	{r4, lr}
 800736a:	4604      	mov	r4, r0
 800736c:	f7ff fff0 	bl	8007350 <__sfp_lock_acquire>
 8007370:	6a23      	ldr	r3, [r4, #32]
 8007372:	b11b      	cbz	r3, 800737c <__sinit+0x14>
 8007374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007378:	f7ff bff0 	b.w	800735c <__sfp_lock_release>
 800737c:	4b04      	ldr	r3, [pc, #16]	@ (8007390 <__sinit+0x28>)
 800737e:	6223      	str	r3, [r4, #32]
 8007380:	4b04      	ldr	r3, [pc, #16]	@ (8007394 <__sinit+0x2c>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1f5      	bne.n	8007374 <__sinit+0xc>
 8007388:	f7ff ffc4 	bl	8007314 <global_stdio_init.part.0>
 800738c:	e7f2      	b.n	8007374 <__sinit+0xc>
 800738e:	bf00      	nop
 8007390:	080072d5 	.word	0x080072d5
 8007394:	20000ba8 	.word	0x20000ba8

08007398 <_fwalk_sglue>:
 8007398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800739c:	4607      	mov	r7, r0
 800739e:	4688      	mov	r8, r1
 80073a0:	4614      	mov	r4, r2
 80073a2:	2600      	movs	r6, #0
 80073a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073a8:	f1b9 0901 	subs.w	r9, r9, #1
 80073ac:	d505      	bpl.n	80073ba <_fwalk_sglue+0x22>
 80073ae:	6824      	ldr	r4, [r4, #0]
 80073b0:	2c00      	cmp	r4, #0
 80073b2:	d1f7      	bne.n	80073a4 <_fwalk_sglue+0xc>
 80073b4:	4630      	mov	r0, r6
 80073b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073ba:	89ab      	ldrh	r3, [r5, #12]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d907      	bls.n	80073d0 <_fwalk_sglue+0x38>
 80073c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073c4:	3301      	adds	r3, #1
 80073c6:	d003      	beq.n	80073d0 <_fwalk_sglue+0x38>
 80073c8:	4629      	mov	r1, r5
 80073ca:	4638      	mov	r0, r7
 80073cc:	47c0      	blx	r8
 80073ce:	4306      	orrs	r6, r0
 80073d0:	3568      	adds	r5, #104	@ 0x68
 80073d2:	e7e9      	b.n	80073a8 <_fwalk_sglue+0x10>

080073d4 <siprintf>:
 80073d4:	b40e      	push	{r1, r2, r3}
 80073d6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80073da:	b500      	push	{lr}
 80073dc:	b09c      	sub	sp, #112	@ 0x70
 80073de:	ab1d      	add	r3, sp, #116	@ 0x74
 80073e0:	9002      	str	r0, [sp, #8]
 80073e2:	9006      	str	r0, [sp, #24]
 80073e4:	9107      	str	r1, [sp, #28]
 80073e6:	9104      	str	r1, [sp, #16]
 80073e8:	4808      	ldr	r0, [pc, #32]	@ (800740c <siprintf+0x38>)
 80073ea:	4909      	ldr	r1, [pc, #36]	@ (8007410 <siprintf+0x3c>)
 80073ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80073f0:	9105      	str	r1, [sp, #20]
 80073f2:	6800      	ldr	r0, [r0, #0]
 80073f4:	a902      	add	r1, sp, #8
 80073f6:	9301      	str	r3, [sp, #4]
 80073f8:	f002 f8b2 	bl	8009560 <_svfiprintf_r>
 80073fc:	2200      	movs	r2, #0
 80073fe:	9b02      	ldr	r3, [sp, #8]
 8007400:	701a      	strb	r2, [r3, #0]
 8007402:	b01c      	add	sp, #112	@ 0x70
 8007404:	f85d eb04 	ldr.w	lr, [sp], #4
 8007408:	b003      	add	sp, #12
 800740a:	4770      	bx	lr
 800740c:	2000019c 	.word	0x2000019c
 8007410:	ffff0208 	.word	0xffff0208

08007414 <__sread>:
 8007414:	b510      	push	{r4, lr}
 8007416:	460c      	mov	r4, r1
 8007418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800741c:	f000 f87e 	bl	800751c <_read_r>
 8007420:	2800      	cmp	r0, #0
 8007422:	bfab      	itete	ge
 8007424:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007426:	89a3      	ldrhlt	r3, [r4, #12]
 8007428:	181b      	addge	r3, r3, r0
 800742a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800742e:	bfac      	ite	ge
 8007430:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007432:	81a3      	strhlt	r3, [r4, #12]
 8007434:	bd10      	pop	{r4, pc}

08007436 <__swrite>:
 8007436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800743a:	461f      	mov	r7, r3
 800743c:	898b      	ldrh	r3, [r1, #12]
 800743e:	4605      	mov	r5, r0
 8007440:	05db      	lsls	r3, r3, #23
 8007442:	460c      	mov	r4, r1
 8007444:	4616      	mov	r6, r2
 8007446:	d505      	bpl.n	8007454 <__swrite+0x1e>
 8007448:	2302      	movs	r3, #2
 800744a:	2200      	movs	r2, #0
 800744c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007450:	f000 f852 	bl	80074f8 <_lseek_r>
 8007454:	89a3      	ldrh	r3, [r4, #12]
 8007456:	4632      	mov	r2, r6
 8007458:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800745c:	81a3      	strh	r3, [r4, #12]
 800745e:	4628      	mov	r0, r5
 8007460:	463b      	mov	r3, r7
 8007462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800746a:	f000 b869 	b.w	8007540 <_write_r>

0800746e <__sseek>:
 800746e:	b510      	push	{r4, lr}
 8007470:	460c      	mov	r4, r1
 8007472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007476:	f000 f83f 	bl	80074f8 <_lseek_r>
 800747a:	1c43      	adds	r3, r0, #1
 800747c:	89a3      	ldrh	r3, [r4, #12]
 800747e:	bf15      	itete	ne
 8007480:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007482:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007486:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800748a:	81a3      	strheq	r3, [r4, #12]
 800748c:	bf18      	it	ne
 800748e:	81a3      	strhne	r3, [r4, #12]
 8007490:	bd10      	pop	{r4, pc}

08007492 <__sclose>:
 8007492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007496:	f000 b81f 	b.w	80074d8 <_close_r>

0800749a <memset>:
 800749a:	4603      	mov	r3, r0
 800749c:	4402      	add	r2, r0
 800749e:	4293      	cmp	r3, r2
 80074a0:	d100      	bne.n	80074a4 <memset+0xa>
 80074a2:	4770      	bx	lr
 80074a4:	f803 1b01 	strb.w	r1, [r3], #1
 80074a8:	e7f9      	b.n	800749e <memset+0x4>

080074aa <strncmp>:
 80074aa:	b510      	push	{r4, lr}
 80074ac:	b16a      	cbz	r2, 80074ca <strncmp+0x20>
 80074ae:	3901      	subs	r1, #1
 80074b0:	1884      	adds	r4, r0, r2
 80074b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074b6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d103      	bne.n	80074c6 <strncmp+0x1c>
 80074be:	42a0      	cmp	r0, r4
 80074c0:	d001      	beq.n	80074c6 <strncmp+0x1c>
 80074c2:	2a00      	cmp	r2, #0
 80074c4:	d1f5      	bne.n	80074b2 <strncmp+0x8>
 80074c6:	1ad0      	subs	r0, r2, r3
 80074c8:	bd10      	pop	{r4, pc}
 80074ca:	4610      	mov	r0, r2
 80074cc:	e7fc      	b.n	80074c8 <strncmp+0x1e>
	...

080074d0 <_localeconv_r>:
 80074d0:	4800      	ldr	r0, [pc, #0]	@ (80074d4 <_localeconv_r+0x4>)
 80074d2:	4770      	bx	lr
 80074d4:	20000120 	.word	0x20000120

080074d8 <_close_r>:
 80074d8:	b538      	push	{r3, r4, r5, lr}
 80074da:	2300      	movs	r3, #0
 80074dc:	4d05      	ldr	r5, [pc, #20]	@ (80074f4 <_close_r+0x1c>)
 80074de:	4604      	mov	r4, r0
 80074e0:	4608      	mov	r0, r1
 80074e2:	602b      	str	r3, [r5, #0]
 80074e4:	f7fb fb45 	bl	8002b72 <_close>
 80074e8:	1c43      	adds	r3, r0, #1
 80074ea:	d102      	bne.n	80074f2 <_close_r+0x1a>
 80074ec:	682b      	ldr	r3, [r5, #0]
 80074ee:	b103      	cbz	r3, 80074f2 <_close_r+0x1a>
 80074f0:	6023      	str	r3, [r4, #0]
 80074f2:	bd38      	pop	{r3, r4, r5, pc}
 80074f4:	20000bac 	.word	0x20000bac

080074f8 <_lseek_r>:
 80074f8:	b538      	push	{r3, r4, r5, lr}
 80074fa:	4604      	mov	r4, r0
 80074fc:	4608      	mov	r0, r1
 80074fe:	4611      	mov	r1, r2
 8007500:	2200      	movs	r2, #0
 8007502:	4d05      	ldr	r5, [pc, #20]	@ (8007518 <_lseek_r+0x20>)
 8007504:	602a      	str	r2, [r5, #0]
 8007506:	461a      	mov	r2, r3
 8007508:	f7fb fb57 	bl	8002bba <_lseek>
 800750c:	1c43      	adds	r3, r0, #1
 800750e:	d102      	bne.n	8007516 <_lseek_r+0x1e>
 8007510:	682b      	ldr	r3, [r5, #0]
 8007512:	b103      	cbz	r3, 8007516 <_lseek_r+0x1e>
 8007514:	6023      	str	r3, [r4, #0]
 8007516:	bd38      	pop	{r3, r4, r5, pc}
 8007518:	20000bac 	.word	0x20000bac

0800751c <_read_r>:
 800751c:	b538      	push	{r3, r4, r5, lr}
 800751e:	4604      	mov	r4, r0
 8007520:	4608      	mov	r0, r1
 8007522:	4611      	mov	r1, r2
 8007524:	2200      	movs	r2, #0
 8007526:	4d05      	ldr	r5, [pc, #20]	@ (800753c <_read_r+0x20>)
 8007528:	602a      	str	r2, [r5, #0]
 800752a:	461a      	mov	r2, r3
 800752c:	f7fb fae8 	bl	8002b00 <_read>
 8007530:	1c43      	adds	r3, r0, #1
 8007532:	d102      	bne.n	800753a <_read_r+0x1e>
 8007534:	682b      	ldr	r3, [r5, #0]
 8007536:	b103      	cbz	r3, 800753a <_read_r+0x1e>
 8007538:	6023      	str	r3, [r4, #0]
 800753a:	bd38      	pop	{r3, r4, r5, pc}
 800753c:	20000bac 	.word	0x20000bac

08007540 <_write_r>:
 8007540:	b538      	push	{r3, r4, r5, lr}
 8007542:	4604      	mov	r4, r0
 8007544:	4608      	mov	r0, r1
 8007546:	4611      	mov	r1, r2
 8007548:	2200      	movs	r2, #0
 800754a:	4d05      	ldr	r5, [pc, #20]	@ (8007560 <_write_r+0x20>)
 800754c:	602a      	str	r2, [r5, #0]
 800754e:	461a      	mov	r2, r3
 8007550:	f7fb faf3 	bl	8002b3a <_write>
 8007554:	1c43      	adds	r3, r0, #1
 8007556:	d102      	bne.n	800755e <_write_r+0x1e>
 8007558:	682b      	ldr	r3, [r5, #0]
 800755a:	b103      	cbz	r3, 800755e <_write_r+0x1e>
 800755c:	6023      	str	r3, [r4, #0]
 800755e:	bd38      	pop	{r3, r4, r5, pc}
 8007560:	20000bac 	.word	0x20000bac

08007564 <__errno>:
 8007564:	4b01      	ldr	r3, [pc, #4]	@ (800756c <__errno+0x8>)
 8007566:	6818      	ldr	r0, [r3, #0]
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	2000019c 	.word	0x2000019c

08007570 <__libc_init_array>:
 8007570:	b570      	push	{r4, r5, r6, lr}
 8007572:	2600      	movs	r6, #0
 8007574:	4d0c      	ldr	r5, [pc, #48]	@ (80075a8 <__libc_init_array+0x38>)
 8007576:	4c0d      	ldr	r4, [pc, #52]	@ (80075ac <__libc_init_array+0x3c>)
 8007578:	1b64      	subs	r4, r4, r5
 800757a:	10a4      	asrs	r4, r4, #2
 800757c:	42a6      	cmp	r6, r4
 800757e:	d109      	bne.n	8007594 <__libc_init_array+0x24>
 8007580:	f003 fbe6 	bl	800ad50 <_init>
 8007584:	2600      	movs	r6, #0
 8007586:	4d0a      	ldr	r5, [pc, #40]	@ (80075b0 <__libc_init_array+0x40>)
 8007588:	4c0a      	ldr	r4, [pc, #40]	@ (80075b4 <__libc_init_array+0x44>)
 800758a:	1b64      	subs	r4, r4, r5
 800758c:	10a4      	asrs	r4, r4, #2
 800758e:	42a6      	cmp	r6, r4
 8007590:	d105      	bne.n	800759e <__libc_init_array+0x2e>
 8007592:	bd70      	pop	{r4, r5, r6, pc}
 8007594:	f855 3b04 	ldr.w	r3, [r5], #4
 8007598:	4798      	blx	r3
 800759a:	3601      	adds	r6, #1
 800759c:	e7ee      	b.n	800757c <__libc_init_array+0xc>
 800759e:	f855 3b04 	ldr.w	r3, [r5], #4
 80075a2:	4798      	blx	r3
 80075a4:	3601      	adds	r6, #1
 80075a6:	e7f2      	b.n	800758e <__libc_init_array+0x1e>
 80075a8:	0800c738 	.word	0x0800c738
 80075ac:	0800c738 	.word	0x0800c738
 80075b0:	0800c738 	.word	0x0800c738
 80075b4:	0800c73c 	.word	0x0800c73c

080075b8 <__retarget_lock_init_recursive>:
 80075b8:	4770      	bx	lr

080075ba <__retarget_lock_acquire_recursive>:
 80075ba:	4770      	bx	lr

080075bc <__retarget_lock_release_recursive>:
 80075bc:	4770      	bx	lr

080075be <memchr>:
 80075be:	4603      	mov	r3, r0
 80075c0:	b510      	push	{r4, lr}
 80075c2:	b2c9      	uxtb	r1, r1
 80075c4:	4402      	add	r2, r0
 80075c6:	4293      	cmp	r3, r2
 80075c8:	4618      	mov	r0, r3
 80075ca:	d101      	bne.n	80075d0 <memchr+0x12>
 80075cc:	2000      	movs	r0, #0
 80075ce:	e003      	b.n	80075d8 <memchr+0x1a>
 80075d0:	7804      	ldrb	r4, [r0, #0]
 80075d2:	3301      	adds	r3, #1
 80075d4:	428c      	cmp	r4, r1
 80075d6:	d1f6      	bne.n	80075c6 <memchr+0x8>
 80075d8:	bd10      	pop	{r4, pc}

080075da <memcpy>:
 80075da:	440a      	add	r2, r1
 80075dc:	4291      	cmp	r1, r2
 80075de:	f100 33ff 	add.w	r3, r0, #4294967295
 80075e2:	d100      	bne.n	80075e6 <memcpy+0xc>
 80075e4:	4770      	bx	lr
 80075e6:	b510      	push	{r4, lr}
 80075e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075ec:	4291      	cmp	r1, r2
 80075ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075f2:	d1f9      	bne.n	80075e8 <memcpy+0xe>
 80075f4:	bd10      	pop	{r4, pc}
	...

080075f8 <nan>:
 80075f8:	2000      	movs	r0, #0
 80075fa:	4901      	ldr	r1, [pc, #4]	@ (8007600 <nan+0x8>)
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	7ff80000 	.word	0x7ff80000

08007604 <nanf>:
 8007604:	4800      	ldr	r0, [pc, #0]	@ (8007608 <nanf+0x4>)
 8007606:	4770      	bx	lr
 8007608:	7fc00000 	.word	0x7fc00000

0800760c <quorem>:
 800760c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007610:	6903      	ldr	r3, [r0, #16]
 8007612:	690c      	ldr	r4, [r1, #16]
 8007614:	4607      	mov	r7, r0
 8007616:	42a3      	cmp	r3, r4
 8007618:	db7e      	blt.n	8007718 <quorem+0x10c>
 800761a:	3c01      	subs	r4, #1
 800761c:	00a3      	lsls	r3, r4, #2
 800761e:	f100 0514 	add.w	r5, r0, #20
 8007622:	f101 0814 	add.w	r8, r1, #20
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800762c:	9301      	str	r3, [sp, #4]
 800762e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007632:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007636:	3301      	adds	r3, #1
 8007638:	429a      	cmp	r2, r3
 800763a:	fbb2 f6f3 	udiv	r6, r2, r3
 800763e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007642:	d32e      	bcc.n	80076a2 <quorem+0x96>
 8007644:	f04f 0a00 	mov.w	sl, #0
 8007648:	46c4      	mov	ip, r8
 800764a:	46ae      	mov	lr, r5
 800764c:	46d3      	mov	fp, sl
 800764e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007652:	b298      	uxth	r0, r3
 8007654:	fb06 a000 	mla	r0, r6, r0, sl
 8007658:	0c1b      	lsrs	r3, r3, #16
 800765a:	0c02      	lsrs	r2, r0, #16
 800765c:	fb06 2303 	mla	r3, r6, r3, r2
 8007660:	f8de 2000 	ldr.w	r2, [lr]
 8007664:	b280      	uxth	r0, r0
 8007666:	b292      	uxth	r2, r2
 8007668:	1a12      	subs	r2, r2, r0
 800766a:	445a      	add	r2, fp
 800766c:	f8de 0000 	ldr.w	r0, [lr]
 8007670:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007674:	b29b      	uxth	r3, r3
 8007676:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800767a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800767e:	b292      	uxth	r2, r2
 8007680:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007684:	45e1      	cmp	r9, ip
 8007686:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800768a:	f84e 2b04 	str.w	r2, [lr], #4
 800768e:	d2de      	bcs.n	800764e <quorem+0x42>
 8007690:	9b00      	ldr	r3, [sp, #0]
 8007692:	58eb      	ldr	r3, [r5, r3]
 8007694:	b92b      	cbnz	r3, 80076a2 <quorem+0x96>
 8007696:	9b01      	ldr	r3, [sp, #4]
 8007698:	3b04      	subs	r3, #4
 800769a:	429d      	cmp	r5, r3
 800769c:	461a      	mov	r2, r3
 800769e:	d32f      	bcc.n	8007700 <quorem+0xf4>
 80076a0:	613c      	str	r4, [r7, #16]
 80076a2:	4638      	mov	r0, r7
 80076a4:	f001 fd10 	bl	80090c8 <__mcmp>
 80076a8:	2800      	cmp	r0, #0
 80076aa:	db25      	blt.n	80076f8 <quorem+0xec>
 80076ac:	4629      	mov	r1, r5
 80076ae:	2000      	movs	r0, #0
 80076b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80076b4:	f8d1 c000 	ldr.w	ip, [r1]
 80076b8:	fa1f fe82 	uxth.w	lr, r2
 80076bc:	fa1f f38c 	uxth.w	r3, ip
 80076c0:	eba3 030e 	sub.w	r3, r3, lr
 80076c4:	4403      	add	r3, r0
 80076c6:	0c12      	lsrs	r2, r2, #16
 80076c8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80076cc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076d6:	45c1      	cmp	r9, r8
 80076d8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80076dc:	f841 3b04 	str.w	r3, [r1], #4
 80076e0:	d2e6      	bcs.n	80076b0 <quorem+0xa4>
 80076e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076ea:	b922      	cbnz	r2, 80076f6 <quorem+0xea>
 80076ec:	3b04      	subs	r3, #4
 80076ee:	429d      	cmp	r5, r3
 80076f0:	461a      	mov	r2, r3
 80076f2:	d30b      	bcc.n	800770c <quorem+0x100>
 80076f4:	613c      	str	r4, [r7, #16]
 80076f6:	3601      	adds	r6, #1
 80076f8:	4630      	mov	r0, r6
 80076fa:	b003      	add	sp, #12
 80076fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007700:	6812      	ldr	r2, [r2, #0]
 8007702:	3b04      	subs	r3, #4
 8007704:	2a00      	cmp	r2, #0
 8007706:	d1cb      	bne.n	80076a0 <quorem+0x94>
 8007708:	3c01      	subs	r4, #1
 800770a:	e7c6      	b.n	800769a <quorem+0x8e>
 800770c:	6812      	ldr	r2, [r2, #0]
 800770e:	3b04      	subs	r3, #4
 8007710:	2a00      	cmp	r2, #0
 8007712:	d1ef      	bne.n	80076f4 <quorem+0xe8>
 8007714:	3c01      	subs	r4, #1
 8007716:	e7ea      	b.n	80076ee <quorem+0xe2>
 8007718:	2000      	movs	r0, #0
 800771a:	e7ee      	b.n	80076fa <quorem+0xee>
 800771c:	0000      	movs	r0, r0
	...

08007720 <_dtoa_r>:
 8007720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007724:	4614      	mov	r4, r2
 8007726:	461d      	mov	r5, r3
 8007728:	69c7      	ldr	r7, [r0, #28]
 800772a:	b097      	sub	sp, #92	@ 0x5c
 800772c:	4683      	mov	fp, r0
 800772e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007732:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007734:	b97f      	cbnz	r7, 8007756 <_dtoa_r+0x36>
 8007736:	2010      	movs	r0, #16
 8007738:	f001 f93c 	bl	80089b4 <malloc>
 800773c:	4602      	mov	r2, r0
 800773e:	f8cb 001c 	str.w	r0, [fp, #28]
 8007742:	b920      	cbnz	r0, 800774e <_dtoa_r+0x2e>
 8007744:	21ef      	movs	r1, #239	@ 0xef
 8007746:	4ba8      	ldr	r3, [pc, #672]	@ (80079e8 <_dtoa_r+0x2c8>)
 8007748:	48a8      	ldr	r0, [pc, #672]	@ (80079ec <_dtoa_r+0x2cc>)
 800774a:	f002 f8d7 	bl	80098fc <__assert_func>
 800774e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007752:	6007      	str	r7, [r0, #0]
 8007754:	60c7      	str	r7, [r0, #12]
 8007756:	f8db 301c 	ldr.w	r3, [fp, #28]
 800775a:	6819      	ldr	r1, [r3, #0]
 800775c:	b159      	cbz	r1, 8007776 <_dtoa_r+0x56>
 800775e:	685a      	ldr	r2, [r3, #4]
 8007760:	2301      	movs	r3, #1
 8007762:	4093      	lsls	r3, r2
 8007764:	604a      	str	r2, [r1, #4]
 8007766:	608b      	str	r3, [r1, #8]
 8007768:	4658      	mov	r0, fp
 800776a:	f001 fa2b 	bl	8008bc4 <_Bfree>
 800776e:	2200      	movs	r2, #0
 8007770:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007774:	601a      	str	r2, [r3, #0]
 8007776:	1e2b      	subs	r3, r5, #0
 8007778:	bfaf      	iteee	ge
 800777a:	2300      	movge	r3, #0
 800777c:	2201      	movlt	r2, #1
 800777e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007782:	9303      	strlt	r3, [sp, #12]
 8007784:	bfa8      	it	ge
 8007786:	6033      	strge	r3, [r6, #0]
 8007788:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800778c:	4b98      	ldr	r3, [pc, #608]	@ (80079f0 <_dtoa_r+0x2d0>)
 800778e:	bfb8      	it	lt
 8007790:	6032      	strlt	r2, [r6, #0]
 8007792:	ea33 0308 	bics.w	r3, r3, r8
 8007796:	d112      	bne.n	80077be <_dtoa_r+0x9e>
 8007798:	f242 730f 	movw	r3, #9999	@ 0x270f
 800779c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800779e:	6013      	str	r3, [r2, #0]
 80077a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80077a4:	4323      	orrs	r3, r4
 80077a6:	f000 8550 	beq.w	800824a <_dtoa_r+0xb2a>
 80077aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80077ac:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80079f4 <_dtoa_r+0x2d4>
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f000 8552 	beq.w	800825a <_dtoa_r+0xb3a>
 80077b6:	f10a 0303 	add.w	r3, sl, #3
 80077ba:	f000 bd4c 	b.w	8008256 <_dtoa_r+0xb36>
 80077be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077c2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80077c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077ca:	2200      	movs	r2, #0
 80077cc:	2300      	movs	r3, #0
 80077ce:	f7f9 f8eb 	bl	80009a8 <__aeabi_dcmpeq>
 80077d2:	4607      	mov	r7, r0
 80077d4:	b158      	cbz	r0, 80077ee <_dtoa_r+0xce>
 80077d6:	2301      	movs	r3, #1
 80077d8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80077da:	6013      	str	r3, [r2, #0]
 80077dc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80077de:	b113      	cbz	r3, 80077e6 <_dtoa_r+0xc6>
 80077e0:	4b85      	ldr	r3, [pc, #532]	@ (80079f8 <_dtoa_r+0x2d8>)
 80077e2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80077e4:	6013      	str	r3, [r2, #0]
 80077e6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80079fc <_dtoa_r+0x2dc>
 80077ea:	f000 bd36 	b.w	800825a <_dtoa_r+0xb3a>
 80077ee:	ab14      	add	r3, sp, #80	@ 0x50
 80077f0:	9301      	str	r3, [sp, #4]
 80077f2:	ab15      	add	r3, sp, #84	@ 0x54
 80077f4:	9300      	str	r3, [sp, #0]
 80077f6:	4658      	mov	r0, fp
 80077f8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80077fc:	f001 fd7c 	bl	80092f8 <__d2b>
 8007800:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007804:	4681      	mov	r9, r0
 8007806:	2e00      	cmp	r6, #0
 8007808:	d077      	beq.n	80078fa <_dtoa_r+0x1da>
 800780a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800780e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007810:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007814:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007818:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800781c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007820:	9712      	str	r7, [sp, #72]	@ 0x48
 8007822:	4619      	mov	r1, r3
 8007824:	2200      	movs	r2, #0
 8007826:	4b76      	ldr	r3, [pc, #472]	@ (8007a00 <_dtoa_r+0x2e0>)
 8007828:	f7f8 fc9e 	bl	8000168 <__aeabi_dsub>
 800782c:	a368      	add	r3, pc, #416	@ (adr r3, 80079d0 <_dtoa_r+0x2b0>)
 800782e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007832:	f7f8 fe51 	bl	80004d8 <__aeabi_dmul>
 8007836:	a368      	add	r3, pc, #416	@ (adr r3, 80079d8 <_dtoa_r+0x2b8>)
 8007838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783c:	f7f8 fc96 	bl	800016c <__adddf3>
 8007840:	4604      	mov	r4, r0
 8007842:	4630      	mov	r0, r6
 8007844:	460d      	mov	r5, r1
 8007846:	f7f8 fddd 	bl	8000404 <__aeabi_i2d>
 800784a:	a365      	add	r3, pc, #404	@ (adr r3, 80079e0 <_dtoa_r+0x2c0>)
 800784c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007850:	f7f8 fe42 	bl	80004d8 <__aeabi_dmul>
 8007854:	4602      	mov	r2, r0
 8007856:	460b      	mov	r3, r1
 8007858:	4620      	mov	r0, r4
 800785a:	4629      	mov	r1, r5
 800785c:	f7f8 fc86 	bl	800016c <__adddf3>
 8007860:	4604      	mov	r4, r0
 8007862:	460d      	mov	r5, r1
 8007864:	f7f9 f8e8 	bl	8000a38 <__aeabi_d2iz>
 8007868:	2200      	movs	r2, #0
 800786a:	4607      	mov	r7, r0
 800786c:	2300      	movs	r3, #0
 800786e:	4620      	mov	r0, r4
 8007870:	4629      	mov	r1, r5
 8007872:	f7f9 f8a3 	bl	80009bc <__aeabi_dcmplt>
 8007876:	b140      	cbz	r0, 800788a <_dtoa_r+0x16a>
 8007878:	4638      	mov	r0, r7
 800787a:	f7f8 fdc3 	bl	8000404 <__aeabi_i2d>
 800787e:	4622      	mov	r2, r4
 8007880:	462b      	mov	r3, r5
 8007882:	f7f9 f891 	bl	80009a8 <__aeabi_dcmpeq>
 8007886:	b900      	cbnz	r0, 800788a <_dtoa_r+0x16a>
 8007888:	3f01      	subs	r7, #1
 800788a:	2f16      	cmp	r7, #22
 800788c:	d853      	bhi.n	8007936 <_dtoa_r+0x216>
 800788e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007892:	4b5c      	ldr	r3, [pc, #368]	@ (8007a04 <_dtoa_r+0x2e4>)
 8007894:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789c:	f7f9 f88e 	bl	80009bc <__aeabi_dcmplt>
 80078a0:	2800      	cmp	r0, #0
 80078a2:	d04a      	beq.n	800793a <_dtoa_r+0x21a>
 80078a4:	2300      	movs	r3, #0
 80078a6:	3f01      	subs	r7, #1
 80078a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80078aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80078ac:	1b9b      	subs	r3, r3, r6
 80078ae:	1e5a      	subs	r2, r3, #1
 80078b0:	bf46      	itte	mi
 80078b2:	f1c3 0801 	rsbmi	r8, r3, #1
 80078b6:	2300      	movmi	r3, #0
 80078b8:	f04f 0800 	movpl.w	r8, #0
 80078bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80078be:	bf48      	it	mi
 80078c0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80078c2:	2f00      	cmp	r7, #0
 80078c4:	db3b      	blt.n	800793e <_dtoa_r+0x21e>
 80078c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078c8:	970e      	str	r7, [sp, #56]	@ 0x38
 80078ca:	443b      	add	r3, r7
 80078cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80078ce:	2300      	movs	r3, #0
 80078d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80078d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80078d4:	2b09      	cmp	r3, #9
 80078d6:	d866      	bhi.n	80079a6 <_dtoa_r+0x286>
 80078d8:	2b05      	cmp	r3, #5
 80078da:	bfc4      	itt	gt
 80078dc:	3b04      	subgt	r3, #4
 80078de:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80078e0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80078e2:	bfc8      	it	gt
 80078e4:	2400      	movgt	r4, #0
 80078e6:	f1a3 0302 	sub.w	r3, r3, #2
 80078ea:	bfd8      	it	le
 80078ec:	2401      	movle	r4, #1
 80078ee:	2b03      	cmp	r3, #3
 80078f0:	d864      	bhi.n	80079bc <_dtoa_r+0x29c>
 80078f2:	e8df f003 	tbb	[pc, r3]
 80078f6:	382b      	.short	0x382b
 80078f8:	5636      	.short	0x5636
 80078fa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80078fe:	441e      	add	r6, r3
 8007900:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007904:	2b20      	cmp	r3, #32
 8007906:	bfc1      	itttt	gt
 8007908:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800790c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007910:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007914:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007918:	bfd6      	itet	le
 800791a:	f1c3 0320 	rsble	r3, r3, #32
 800791e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007922:	fa04 f003 	lslle.w	r0, r4, r3
 8007926:	f7f8 fd5d 	bl	80003e4 <__aeabi_ui2d>
 800792a:	2201      	movs	r2, #1
 800792c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007930:	3e01      	subs	r6, #1
 8007932:	9212      	str	r2, [sp, #72]	@ 0x48
 8007934:	e775      	b.n	8007822 <_dtoa_r+0x102>
 8007936:	2301      	movs	r3, #1
 8007938:	e7b6      	b.n	80078a8 <_dtoa_r+0x188>
 800793a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800793c:	e7b5      	b.n	80078aa <_dtoa_r+0x18a>
 800793e:	427b      	negs	r3, r7
 8007940:	930a      	str	r3, [sp, #40]	@ 0x28
 8007942:	2300      	movs	r3, #0
 8007944:	eba8 0807 	sub.w	r8, r8, r7
 8007948:	930e      	str	r3, [sp, #56]	@ 0x38
 800794a:	e7c2      	b.n	80078d2 <_dtoa_r+0x1b2>
 800794c:	2300      	movs	r3, #0
 800794e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007950:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007952:	2b00      	cmp	r3, #0
 8007954:	dc35      	bgt.n	80079c2 <_dtoa_r+0x2a2>
 8007956:	2301      	movs	r3, #1
 8007958:	461a      	mov	r2, r3
 800795a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800795e:	9221      	str	r2, [sp, #132]	@ 0x84
 8007960:	e00b      	b.n	800797a <_dtoa_r+0x25a>
 8007962:	2301      	movs	r3, #1
 8007964:	e7f3      	b.n	800794e <_dtoa_r+0x22e>
 8007966:	2300      	movs	r3, #0
 8007968:	930b      	str	r3, [sp, #44]	@ 0x2c
 800796a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800796c:	18fb      	adds	r3, r7, r3
 800796e:	9308      	str	r3, [sp, #32]
 8007970:	3301      	adds	r3, #1
 8007972:	2b01      	cmp	r3, #1
 8007974:	9307      	str	r3, [sp, #28]
 8007976:	bfb8      	it	lt
 8007978:	2301      	movlt	r3, #1
 800797a:	2100      	movs	r1, #0
 800797c:	2204      	movs	r2, #4
 800797e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007982:	f102 0514 	add.w	r5, r2, #20
 8007986:	429d      	cmp	r5, r3
 8007988:	d91f      	bls.n	80079ca <_dtoa_r+0x2aa>
 800798a:	6041      	str	r1, [r0, #4]
 800798c:	4658      	mov	r0, fp
 800798e:	f001 f8d9 	bl	8008b44 <_Balloc>
 8007992:	4682      	mov	sl, r0
 8007994:	2800      	cmp	r0, #0
 8007996:	d139      	bne.n	8007a0c <_dtoa_r+0x2ec>
 8007998:	4602      	mov	r2, r0
 800799a:	f240 11af 	movw	r1, #431	@ 0x1af
 800799e:	4b1a      	ldr	r3, [pc, #104]	@ (8007a08 <_dtoa_r+0x2e8>)
 80079a0:	e6d2      	b.n	8007748 <_dtoa_r+0x28>
 80079a2:	2301      	movs	r3, #1
 80079a4:	e7e0      	b.n	8007968 <_dtoa_r+0x248>
 80079a6:	2401      	movs	r4, #1
 80079a8:	2300      	movs	r3, #0
 80079aa:	940b      	str	r4, [sp, #44]	@ 0x2c
 80079ac:	9320      	str	r3, [sp, #128]	@ 0x80
 80079ae:	f04f 33ff 	mov.w	r3, #4294967295
 80079b2:	2200      	movs	r2, #0
 80079b4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80079b8:	2312      	movs	r3, #18
 80079ba:	e7d0      	b.n	800795e <_dtoa_r+0x23e>
 80079bc:	2301      	movs	r3, #1
 80079be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079c0:	e7f5      	b.n	80079ae <_dtoa_r+0x28e>
 80079c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80079c4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80079c8:	e7d7      	b.n	800797a <_dtoa_r+0x25a>
 80079ca:	3101      	adds	r1, #1
 80079cc:	0052      	lsls	r2, r2, #1
 80079ce:	e7d8      	b.n	8007982 <_dtoa_r+0x262>
 80079d0:	636f4361 	.word	0x636f4361
 80079d4:	3fd287a7 	.word	0x3fd287a7
 80079d8:	8b60c8b3 	.word	0x8b60c8b3
 80079dc:	3fc68a28 	.word	0x3fc68a28
 80079e0:	509f79fb 	.word	0x509f79fb
 80079e4:	3fd34413 	.word	0x3fd34413
 80079e8:	0800c477 	.word	0x0800c477
 80079ec:	0800c48e 	.word	0x0800c48e
 80079f0:	7ff00000 	.word	0x7ff00000
 80079f4:	0800c473 	.word	0x0800c473
 80079f8:	0800c43a 	.word	0x0800c43a
 80079fc:	0800c439 	.word	0x0800c439
 8007a00:	3ff80000 	.word	0x3ff80000
 8007a04:	0800c5e8 	.word	0x0800c5e8
 8007a08:	0800c4e6 	.word	0x0800c4e6
 8007a0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a10:	6018      	str	r0, [r3, #0]
 8007a12:	9b07      	ldr	r3, [sp, #28]
 8007a14:	2b0e      	cmp	r3, #14
 8007a16:	f200 80a4 	bhi.w	8007b62 <_dtoa_r+0x442>
 8007a1a:	2c00      	cmp	r4, #0
 8007a1c:	f000 80a1 	beq.w	8007b62 <_dtoa_r+0x442>
 8007a20:	2f00      	cmp	r7, #0
 8007a22:	dd33      	ble.n	8007a8c <_dtoa_r+0x36c>
 8007a24:	4b86      	ldr	r3, [pc, #536]	@ (8007c40 <_dtoa_r+0x520>)
 8007a26:	f007 020f 	and.w	r2, r7, #15
 8007a2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a2e:	05f8      	lsls	r0, r7, #23
 8007a30:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007a34:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007a38:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007a3c:	d516      	bpl.n	8007a6c <_dtoa_r+0x34c>
 8007a3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a42:	4b80      	ldr	r3, [pc, #512]	@ (8007c44 <_dtoa_r+0x524>)
 8007a44:	2603      	movs	r6, #3
 8007a46:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a4a:	f7f8 fe6f 	bl	800072c <__aeabi_ddiv>
 8007a4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a52:	f004 040f 	and.w	r4, r4, #15
 8007a56:	4d7b      	ldr	r5, [pc, #492]	@ (8007c44 <_dtoa_r+0x524>)
 8007a58:	b954      	cbnz	r4, 8007a70 <_dtoa_r+0x350>
 8007a5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a62:	f7f8 fe63 	bl	800072c <__aeabi_ddiv>
 8007a66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a6a:	e028      	b.n	8007abe <_dtoa_r+0x39e>
 8007a6c:	2602      	movs	r6, #2
 8007a6e:	e7f2      	b.n	8007a56 <_dtoa_r+0x336>
 8007a70:	07e1      	lsls	r1, r4, #31
 8007a72:	d508      	bpl.n	8007a86 <_dtoa_r+0x366>
 8007a74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a7c:	f7f8 fd2c 	bl	80004d8 <__aeabi_dmul>
 8007a80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a84:	3601      	adds	r6, #1
 8007a86:	1064      	asrs	r4, r4, #1
 8007a88:	3508      	adds	r5, #8
 8007a8a:	e7e5      	b.n	8007a58 <_dtoa_r+0x338>
 8007a8c:	f000 80d2 	beq.w	8007c34 <_dtoa_r+0x514>
 8007a90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a94:	427c      	negs	r4, r7
 8007a96:	4b6a      	ldr	r3, [pc, #424]	@ (8007c40 <_dtoa_r+0x520>)
 8007a98:	f004 020f 	and.w	r2, r4, #15
 8007a9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa4:	f7f8 fd18 	bl	80004d8 <__aeabi_dmul>
 8007aa8:	2602      	movs	r6, #2
 8007aaa:	2300      	movs	r3, #0
 8007aac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ab0:	4d64      	ldr	r5, [pc, #400]	@ (8007c44 <_dtoa_r+0x524>)
 8007ab2:	1124      	asrs	r4, r4, #4
 8007ab4:	2c00      	cmp	r4, #0
 8007ab6:	f040 80b2 	bne.w	8007c1e <_dtoa_r+0x4fe>
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1d3      	bne.n	8007a66 <_dtoa_r+0x346>
 8007abe:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007ac2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f000 80b7 	beq.w	8007c38 <_dtoa_r+0x518>
 8007aca:	2200      	movs	r2, #0
 8007acc:	4620      	mov	r0, r4
 8007ace:	4629      	mov	r1, r5
 8007ad0:	4b5d      	ldr	r3, [pc, #372]	@ (8007c48 <_dtoa_r+0x528>)
 8007ad2:	f7f8 ff73 	bl	80009bc <__aeabi_dcmplt>
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	f000 80ae 	beq.w	8007c38 <_dtoa_r+0x518>
 8007adc:	9b07      	ldr	r3, [sp, #28]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f000 80aa 	beq.w	8007c38 <_dtoa_r+0x518>
 8007ae4:	9b08      	ldr	r3, [sp, #32]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	dd37      	ble.n	8007b5a <_dtoa_r+0x43a>
 8007aea:	1e7b      	subs	r3, r7, #1
 8007aec:	4620      	mov	r0, r4
 8007aee:	9304      	str	r3, [sp, #16]
 8007af0:	2200      	movs	r2, #0
 8007af2:	4629      	mov	r1, r5
 8007af4:	4b55      	ldr	r3, [pc, #340]	@ (8007c4c <_dtoa_r+0x52c>)
 8007af6:	f7f8 fcef 	bl	80004d8 <__aeabi_dmul>
 8007afa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007afe:	9c08      	ldr	r4, [sp, #32]
 8007b00:	3601      	adds	r6, #1
 8007b02:	4630      	mov	r0, r6
 8007b04:	f7f8 fc7e 	bl	8000404 <__aeabi_i2d>
 8007b08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b0c:	f7f8 fce4 	bl	80004d8 <__aeabi_dmul>
 8007b10:	2200      	movs	r2, #0
 8007b12:	4b4f      	ldr	r3, [pc, #316]	@ (8007c50 <_dtoa_r+0x530>)
 8007b14:	f7f8 fb2a 	bl	800016c <__adddf3>
 8007b18:	4605      	mov	r5, r0
 8007b1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007b1e:	2c00      	cmp	r4, #0
 8007b20:	f040 809a 	bne.w	8007c58 <_dtoa_r+0x538>
 8007b24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	4b4a      	ldr	r3, [pc, #296]	@ (8007c54 <_dtoa_r+0x534>)
 8007b2c:	f7f8 fb1c 	bl	8000168 <__aeabi_dsub>
 8007b30:	4602      	mov	r2, r0
 8007b32:	460b      	mov	r3, r1
 8007b34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b38:	462a      	mov	r2, r5
 8007b3a:	4633      	mov	r3, r6
 8007b3c:	f7f8 ff5c 	bl	80009f8 <__aeabi_dcmpgt>
 8007b40:	2800      	cmp	r0, #0
 8007b42:	f040 828e 	bne.w	8008062 <_dtoa_r+0x942>
 8007b46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b4a:	462a      	mov	r2, r5
 8007b4c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007b50:	f7f8 ff34 	bl	80009bc <__aeabi_dcmplt>
 8007b54:	2800      	cmp	r0, #0
 8007b56:	f040 8127 	bne.w	8007da8 <_dtoa_r+0x688>
 8007b5a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007b5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007b62:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f2c0 8163 	blt.w	8007e30 <_dtoa_r+0x710>
 8007b6a:	2f0e      	cmp	r7, #14
 8007b6c:	f300 8160 	bgt.w	8007e30 <_dtoa_r+0x710>
 8007b70:	4b33      	ldr	r3, [pc, #204]	@ (8007c40 <_dtoa_r+0x520>)
 8007b72:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b76:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007b7a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007b7e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	da03      	bge.n	8007b8c <_dtoa_r+0x46c>
 8007b84:	9b07      	ldr	r3, [sp, #28]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f340 8100 	ble.w	8007d8c <_dtoa_r+0x66c>
 8007b8c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007b90:	4656      	mov	r6, sl
 8007b92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b96:	4620      	mov	r0, r4
 8007b98:	4629      	mov	r1, r5
 8007b9a:	f7f8 fdc7 	bl	800072c <__aeabi_ddiv>
 8007b9e:	f7f8 ff4b 	bl	8000a38 <__aeabi_d2iz>
 8007ba2:	4680      	mov	r8, r0
 8007ba4:	f7f8 fc2e 	bl	8000404 <__aeabi_i2d>
 8007ba8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bac:	f7f8 fc94 	bl	80004d8 <__aeabi_dmul>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	4629      	mov	r1, r5
 8007bb8:	f7f8 fad6 	bl	8000168 <__aeabi_dsub>
 8007bbc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007bc0:	9d07      	ldr	r5, [sp, #28]
 8007bc2:	f806 4b01 	strb.w	r4, [r6], #1
 8007bc6:	eba6 040a 	sub.w	r4, r6, sl
 8007bca:	42a5      	cmp	r5, r4
 8007bcc:	4602      	mov	r2, r0
 8007bce:	460b      	mov	r3, r1
 8007bd0:	f040 8116 	bne.w	8007e00 <_dtoa_r+0x6e0>
 8007bd4:	f7f8 faca 	bl	800016c <__adddf3>
 8007bd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bdc:	4604      	mov	r4, r0
 8007bde:	460d      	mov	r5, r1
 8007be0:	f7f8 ff0a 	bl	80009f8 <__aeabi_dcmpgt>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	f040 80f8 	bne.w	8007dda <_dtoa_r+0x6ba>
 8007bea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bee:	4620      	mov	r0, r4
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	f7f8 fed9 	bl	80009a8 <__aeabi_dcmpeq>
 8007bf6:	b118      	cbz	r0, 8007c00 <_dtoa_r+0x4e0>
 8007bf8:	f018 0f01 	tst.w	r8, #1
 8007bfc:	f040 80ed 	bne.w	8007dda <_dtoa_r+0x6ba>
 8007c00:	4649      	mov	r1, r9
 8007c02:	4658      	mov	r0, fp
 8007c04:	f000 ffde 	bl	8008bc4 <_Bfree>
 8007c08:	2300      	movs	r3, #0
 8007c0a:	7033      	strb	r3, [r6, #0]
 8007c0c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007c0e:	3701      	adds	r7, #1
 8007c10:	601f      	str	r7, [r3, #0]
 8007c12:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f000 8320 	beq.w	800825a <_dtoa_r+0xb3a>
 8007c1a:	601e      	str	r6, [r3, #0]
 8007c1c:	e31d      	b.n	800825a <_dtoa_r+0xb3a>
 8007c1e:	07e2      	lsls	r2, r4, #31
 8007c20:	d505      	bpl.n	8007c2e <_dtoa_r+0x50e>
 8007c22:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c26:	f7f8 fc57 	bl	80004d8 <__aeabi_dmul>
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	3601      	adds	r6, #1
 8007c2e:	1064      	asrs	r4, r4, #1
 8007c30:	3508      	adds	r5, #8
 8007c32:	e73f      	b.n	8007ab4 <_dtoa_r+0x394>
 8007c34:	2602      	movs	r6, #2
 8007c36:	e742      	b.n	8007abe <_dtoa_r+0x39e>
 8007c38:	9c07      	ldr	r4, [sp, #28]
 8007c3a:	9704      	str	r7, [sp, #16]
 8007c3c:	e761      	b.n	8007b02 <_dtoa_r+0x3e2>
 8007c3e:	bf00      	nop
 8007c40:	0800c5e8 	.word	0x0800c5e8
 8007c44:	0800c5c0 	.word	0x0800c5c0
 8007c48:	3ff00000 	.word	0x3ff00000
 8007c4c:	40240000 	.word	0x40240000
 8007c50:	401c0000 	.word	0x401c0000
 8007c54:	40140000 	.word	0x40140000
 8007c58:	4b70      	ldr	r3, [pc, #448]	@ (8007e1c <_dtoa_r+0x6fc>)
 8007c5a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c64:	4454      	add	r4, sl
 8007c66:	2900      	cmp	r1, #0
 8007c68:	d045      	beq.n	8007cf6 <_dtoa_r+0x5d6>
 8007c6a:	2000      	movs	r0, #0
 8007c6c:	496c      	ldr	r1, [pc, #432]	@ (8007e20 <_dtoa_r+0x700>)
 8007c6e:	f7f8 fd5d 	bl	800072c <__aeabi_ddiv>
 8007c72:	4633      	mov	r3, r6
 8007c74:	462a      	mov	r2, r5
 8007c76:	f7f8 fa77 	bl	8000168 <__aeabi_dsub>
 8007c7a:	4656      	mov	r6, sl
 8007c7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c84:	f7f8 fed8 	bl	8000a38 <__aeabi_d2iz>
 8007c88:	4605      	mov	r5, r0
 8007c8a:	f7f8 fbbb 	bl	8000404 <__aeabi_i2d>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	460b      	mov	r3, r1
 8007c92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c96:	f7f8 fa67 	bl	8000168 <__aeabi_dsub>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	3530      	adds	r5, #48	@ 0x30
 8007ca0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ca4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007ca8:	f806 5b01 	strb.w	r5, [r6], #1
 8007cac:	f7f8 fe86 	bl	80009bc <__aeabi_dcmplt>
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	d163      	bne.n	8007d7c <_dtoa_r+0x65c>
 8007cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cb8:	2000      	movs	r0, #0
 8007cba:	495a      	ldr	r1, [pc, #360]	@ (8007e24 <_dtoa_r+0x704>)
 8007cbc:	f7f8 fa54 	bl	8000168 <__aeabi_dsub>
 8007cc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007cc4:	f7f8 fe7a 	bl	80009bc <__aeabi_dcmplt>
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	f040 8087 	bne.w	8007ddc <_dtoa_r+0x6bc>
 8007cce:	42a6      	cmp	r6, r4
 8007cd0:	f43f af43 	beq.w	8007b5a <_dtoa_r+0x43a>
 8007cd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007cd8:	2200      	movs	r2, #0
 8007cda:	4b53      	ldr	r3, [pc, #332]	@ (8007e28 <_dtoa_r+0x708>)
 8007cdc:	f7f8 fbfc 	bl	80004d8 <__aeabi_dmul>
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007ce6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cea:	4b4f      	ldr	r3, [pc, #316]	@ (8007e28 <_dtoa_r+0x708>)
 8007cec:	f7f8 fbf4 	bl	80004d8 <__aeabi_dmul>
 8007cf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cf4:	e7c4      	b.n	8007c80 <_dtoa_r+0x560>
 8007cf6:	4631      	mov	r1, r6
 8007cf8:	4628      	mov	r0, r5
 8007cfa:	f7f8 fbed 	bl	80004d8 <__aeabi_dmul>
 8007cfe:	4656      	mov	r6, sl
 8007d00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d04:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007d06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d0a:	f7f8 fe95 	bl	8000a38 <__aeabi_d2iz>
 8007d0e:	4605      	mov	r5, r0
 8007d10:	f7f8 fb78 	bl	8000404 <__aeabi_i2d>
 8007d14:	4602      	mov	r2, r0
 8007d16:	460b      	mov	r3, r1
 8007d18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d1c:	f7f8 fa24 	bl	8000168 <__aeabi_dsub>
 8007d20:	4602      	mov	r2, r0
 8007d22:	460b      	mov	r3, r1
 8007d24:	3530      	adds	r5, #48	@ 0x30
 8007d26:	f806 5b01 	strb.w	r5, [r6], #1
 8007d2a:	42a6      	cmp	r6, r4
 8007d2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d30:	f04f 0200 	mov.w	r2, #0
 8007d34:	d124      	bne.n	8007d80 <_dtoa_r+0x660>
 8007d36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007d3a:	4b39      	ldr	r3, [pc, #228]	@ (8007e20 <_dtoa_r+0x700>)
 8007d3c:	f7f8 fa16 	bl	800016c <__adddf3>
 8007d40:	4602      	mov	r2, r0
 8007d42:	460b      	mov	r3, r1
 8007d44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d48:	f7f8 fe56 	bl	80009f8 <__aeabi_dcmpgt>
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	d145      	bne.n	8007ddc <_dtoa_r+0x6bc>
 8007d50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d54:	2000      	movs	r0, #0
 8007d56:	4932      	ldr	r1, [pc, #200]	@ (8007e20 <_dtoa_r+0x700>)
 8007d58:	f7f8 fa06 	bl	8000168 <__aeabi_dsub>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	460b      	mov	r3, r1
 8007d60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d64:	f7f8 fe2a 	bl	80009bc <__aeabi_dcmplt>
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	f43f aef6 	beq.w	8007b5a <_dtoa_r+0x43a>
 8007d6e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007d70:	1e73      	subs	r3, r6, #1
 8007d72:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d74:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007d78:	2b30      	cmp	r3, #48	@ 0x30
 8007d7a:	d0f8      	beq.n	8007d6e <_dtoa_r+0x64e>
 8007d7c:	9f04      	ldr	r7, [sp, #16]
 8007d7e:	e73f      	b.n	8007c00 <_dtoa_r+0x4e0>
 8007d80:	4b29      	ldr	r3, [pc, #164]	@ (8007e28 <_dtoa_r+0x708>)
 8007d82:	f7f8 fba9 	bl	80004d8 <__aeabi_dmul>
 8007d86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d8a:	e7bc      	b.n	8007d06 <_dtoa_r+0x5e6>
 8007d8c:	d10c      	bne.n	8007da8 <_dtoa_r+0x688>
 8007d8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d92:	2200      	movs	r2, #0
 8007d94:	4b25      	ldr	r3, [pc, #148]	@ (8007e2c <_dtoa_r+0x70c>)
 8007d96:	f7f8 fb9f 	bl	80004d8 <__aeabi_dmul>
 8007d9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d9e:	f7f8 fe21 	bl	80009e4 <__aeabi_dcmpge>
 8007da2:	2800      	cmp	r0, #0
 8007da4:	f000 815b 	beq.w	800805e <_dtoa_r+0x93e>
 8007da8:	2400      	movs	r4, #0
 8007daa:	4625      	mov	r5, r4
 8007dac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007dae:	4656      	mov	r6, sl
 8007db0:	43db      	mvns	r3, r3
 8007db2:	9304      	str	r3, [sp, #16]
 8007db4:	2700      	movs	r7, #0
 8007db6:	4621      	mov	r1, r4
 8007db8:	4658      	mov	r0, fp
 8007dba:	f000 ff03 	bl	8008bc4 <_Bfree>
 8007dbe:	2d00      	cmp	r5, #0
 8007dc0:	d0dc      	beq.n	8007d7c <_dtoa_r+0x65c>
 8007dc2:	b12f      	cbz	r7, 8007dd0 <_dtoa_r+0x6b0>
 8007dc4:	42af      	cmp	r7, r5
 8007dc6:	d003      	beq.n	8007dd0 <_dtoa_r+0x6b0>
 8007dc8:	4639      	mov	r1, r7
 8007dca:	4658      	mov	r0, fp
 8007dcc:	f000 fefa 	bl	8008bc4 <_Bfree>
 8007dd0:	4629      	mov	r1, r5
 8007dd2:	4658      	mov	r0, fp
 8007dd4:	f000 fef6 	bl	8008bc4 <_Bfree>
 8007dd8:	e7d0      	b.n	8007d7c <_dtoa_r+0x65c>
 8007dda:	9704      	str	r7, [sp, #16]
 8007ddc:	4633      	mov	r3, r6
 8007dde:	461e      	mov	r6, r3
 8007de0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007de4:	2a39      	cmp	r2, #57	@ 0x39
 8007de6:	d107      	bne.n	8007df8 <_dtoa_r+0x6d8>
 8007de8:	459a      	cmp	sl, r3
 8007dea:	d1f8      	bne.n	8007dde <_dtoa_r+0x6be>
 8007dec:	9a04      	ldr	r2, [sp, #16]
 8007dee:	3201      	adds	r2, #1
 8007df0:	9204      	str	r2, [sp, #16]
 8007df2:	2230      	movs	r2, #48	@ 0x30
 8007df4:	f88a 2000 	strb.w	r2, [sl]
 8007df8:	781a      	ldrb	r2, [r3, #0]
 8007dfa:	3201      	adds	r2, #1
 8007dfc:	701a      	strb	r2, [r3, #0]
 8007dfe:	e7bd      	b.n	8007d7c <_dtoa_r+0x65c>
 8007e00:	2200      	movs	r2, #0
 8007e02:	4b09      	ldr	r3, [pc, #36]	@ (8007e28 <_dtoa_r+0x708>)
 8007e04:	f7f8 fb68 	bl	80004d8 <__aeabi_dmul>
 8007e08:	2200      	movs	r2, #0
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	4604      	mov	r4, r0
 8007e0e:	460d      	mov	r5, r1
 8007e10:	f7f8 fdca 	bl	80009a8 <__aeabi_dcmpeq>
 8007e14:	2800      	cmp	r0, #0
 8007e16:	f43f aebc 	beq.w	8007b92 <_dtoa_r+0x472>
 8007e1a:	e6f1      	b.n	8007c00 <_dtoa_r+0x4e0>
 8007e1c:	0800c5e8 	.word	0x0800c5e8
 8007e20:	3fe00000 	.word	0x3fe00000
 8007e24:	3ff00000 	.word	0x3ff00000
 8007e28:	40240000 	.word	0x40240000
 8007e2c:	40140000 	.word	0x40140000
 8007e30:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007e32:	2a00      	cmp	r2, #0
 8007e34:	f000 80db 	beq.w	8007fee <_dtoa_r+0x8ce>
 8007e38:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007e3a:	2a01      	cmp	r2, #1
 8007e3c:	f300 80bf 	bgt.w	8007fbe <_dtoa_r+0x89e>
 8007e40:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007e42:	2a00      	cmp	r2, #0
 8007e44:	f000 80b7 	beq.w	8007fb6 <_dtoa_r+0x896>
 8007e48:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007e4c:	4646      	mov	r6, r8
 8007e4e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007e50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e52:	2101      	movs	r1, #1
 8007e54:	441a      	add	r2, r3
 8007e56:	4658      	mov	r0, fp
 8007e58:	4498      	add	r8, r3
 8007e5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e5c:	f000 ffb0 	bl	8008dc0 <__i2b>
 8007e60:	4605      	mov	r5, r0
 8007e62:	b15e      	cbz	r6, 8007e7c <_dtoa_r+0x75c>
 8007e64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	dd08      	ble.n	8007e7c <_dtoa_r+0x75c>
 8007e6a:	42b3      	cmp	r3, r6
 8007e6c:	bfa8      	it	ge
 8007e6e:	4633      	movge	r3, r6
 8007e70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e72:	eba8 0803 	sub.w	r8, r8, r3
 8007e76:	1af6      	subs	r6, r6, r3
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e7e:	b1f3      	cbz	r3, 8007ebe <_dtoa_r+0x79e>
 8007e80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f000 80b7 	beq.w	8007ff6 <_dtoa_r+0x8d6>
 8007e88:	b18c      	cbz	r4, 8007eae <_dtoa_r+0x78e>
 8007e8a:	4629      	mov	r1, r5
 8007e8c:	4622      	mov	r2, r4
 8007e8e:	4658      	mov	r0, fp
 8007e90:	f001 f854 	bl	8008f3c <__pow5mult>
 8007e94:	464a      	mov	r2, r9
 8007e96:	4601      	mov	r1, r0
 8007e98:	4605      	mov	r5, r0
 8007e9a:	4658      	mov	r0, fp
 8007e9c:	f000 ffa6 	bl	8008dec <__multiply>
 8007ea0:	4649      	mov	r1, r9
 8007ea2:	9004      	str	r0, [sp, #16]
 8007ea4:	4658      	mov	r0, fp
 8007ea6:	f000 fe8d 	bl	8008bc4 <_Bfree>
 8007eaa:	9b04      	ldr	r3, [sp, #16]
 8007eac:	4699      	mov	r9, r3
 8007eae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007eb0:	1b1a      	subs	r2, r3, r4
 8007eb2:	d004      	beq.n	8007ebe <_dtoa_r+0x79e>
 8007eb4:	4649      	mov	r1, r9
 8007eb6:	4658      	mov	r0, fp
 8007eb8:	f001 f840 	bl	8008f3c <__pow5mult>
 8007ebc:	4681      	mov	r9, r0
 8007ebe:	2101      	movs	r1, #1
 8007ec0:	4658      	mov	r0, fp
 8007ec2:	f000 ff7d 	bl	8008dc0 <__i2b>
 8007ec6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ec8:	4604      	mov	r4, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f000 81c9 	beq.w	8008262 <_dtoa_r+0xb42>
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	4601      	mov	r1, r0
 8007ed4:	4658      	mov	r0, fp
 8007ed6:	f001 f831 	bl	8008f3c <__pow5mult>
 8007eda:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007edc:	4604      	mov	r4, r0
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	f300 808f 	bgt.w	8008002 <_dtoa_r+0x8e2>
 8007ee4:	9b02      	ldr	r3, [sp, #8]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f040 8087 	bne.w	8007ffa <_dtoa_r+0x8da>
 8007eec:	9b03      	ldr	r3, [sp, #12]
 8007eee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f040 8083 	bne.w	8007ffe <_dtoa_r+0x8de>
 8007ef8:	9b03      	ldr	r3, [sp, #12]
 8007efa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007efe:	0d1b      	lsrs	r3, r3, #20
 8007f00:	051b      	lsls	r3, r3, #20
 8007f02:	b12b      	cbz	r3, 8007f10 <_dtoa_r+0x7f0>
 8007f04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f06:	f108 0801 	add.w	r8, r8, #1
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f0e:	2301      	movs	r3, #1
 8007f10:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f000 81aa 	beq.w	800826e <_dtoa_r+0xb4e>
 8007f1a:	6923      	ldr	r3, [r4, #16]
 8007f1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f20:	6918      	ldr	r0, [r3, #16]
 8007f22:	f000 ff01 	bl	8008d28 <__hi0bits>
 8007f26:	f1c0 0020 	rsb	r0, r0, #32
 8007f2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f2c:	4418      	add	r0, r3
 8007f2e:	f010 001f 	ands.w	r0, r0, #31
 8007f32:	d071      	beq.n	8008018 <_dtoa_r+0x8f8>
 8007f34:	f1c0 0320 	rsb	r3, r0, #32
 8007f38:	2b04      	cmp	r3, #4
 8007f3a:	dd65      	ble.n	8008008 <_dtoa_r+0x8e8>
 8007f3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f3e:	f1c0 001c 	rsb	r0, r0, #28
 8007f42:	4403      	add	r3, r0
 8007f44:	4480      	add	r8, r0
 8007f46:	4406      	add	r6, r0
 8007f48:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f4a:	f1b8 0f00 	cmp.w	r8, #0
 8007f4e:	dd05      	ble.n	8007f5c <_dtoa_r+0x83c>
 8007f50:	4649      	mov	r1, r9
 8007f52:	4642      	mov	r2, r8
 8007f54:	4658      	mov	r0, fp
 8007f56:	f001 f84b 	bl	8008ff0 <__lshift>
 8007f5a:	4681      	mov	r9, r0
 8007f5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	dd05      	ble.n	8007f6e <_dtoa_r+0x84e>
 8007f62:	4621      	mov	r1, r4
 8007f64:	461a      	mov	r2, r3
 8007f66:	4658      	mov	r0, fp
 8007f68:	f001 f842 	bl	8008ff0 <__lshift>
 8007f6c:	4604      	mov	r4, r0
 8007f6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d053      	beq.n	800801c <_dtoa_r+0x8fc>
 8007f74:	4621      	mov	r1, r4
 8007f76:	4648      	mov	r0, r9
 8007f78:	f001 f8a6 	bl	80090c8 <__mcmp>
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	da4d      	bge.n	800801c <_dtoa_r+0x8fc>
 8007f80:	1e7b      	subs	r3, r7, #1
 8007f82:	4649      	mov	r1, r9
 8007f84:	9304      	str	r3, [sp, #16]
 8007f86:	220a      	movs	r2, #10
 8007f88:	2300      	movs	r3, #0
 8007f8a:	4658      	mov	r0, fp
 8007f8c:	f000 fe3c 	bl	8008c08 <__multadd>
 8007f90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f92:	4681      	mov	r9, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	f000 816c 	beq.w	8008272 <_dtoa_r+0xb52>
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	4629      	mov	r1, r5
 8007f9e:	220a      	movs	r2, #10
 8007fa0:	4658      	mov	r0, fp
 8007fa2:	f000 fe31 	bl	8008c08 <__multadd>
 8007fa6:	9b08      	ldr	r3, [sp, #32]
 8007fa8:	4605      	mov	r5, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	dc61      	bgt.n	8008072 <_dtoa_r+0x952>
 8007fae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	dc3b      	bgt.n	800802c <_dtoa_r+0x90c>
 8007fb4:	e05d      	b.n	8008072 <_dtoa_r+0x952>
 8007fb6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007fb8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007fbc:	e746      	b.n	8007e4c <_dtoa_r+0x72c>
 8007fbe:	9b07      	ldr	r3, [sp, #28]
 8007fc0:	1e5c      	subs	r4, r3, #1
 8007fc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fc4:	42a3      	cmp	r3, r4
 8007fc6:	bfbf      	itttt	lt
 8007fc8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007fca:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8007fcc:	1ae3      	sublt	r3, r4, r3
 8007fce:	18d2      	addlt	r2, r2, r3
 8007fd0:	bfa8      	it	ge
 8007fd2:	1b1c      	subge	r4, r3, r4
 8007fd4:	9b07      	ldr	r3, [sp, #28]
 8007fd6:	bfbe      	ittt	lt
 8007fd8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007fda:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8007fdc:	2400      	movlt	r4, #0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	bfb5      	itete	lt
 8007fe2:	eba8 0603 	sublt.w	r6, r8, r3
 8007fe6:	4646      	movge	r6, r8
 8007fe8:	2300      	movlt	r3, #0
 8007fea:	9b07      	ldrge	r3, [sp, #28]
 8007fec:	e730      	b.n	8007e50 <_dtoa_r+0x730>
 8007fee:	4646      	mov	r6, r8
 8007ff0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007ff2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007ff4:	e735      	b.n	8007e62 <_dtoa_r+0x742>
 8007ff6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ff8:	e75c      	b.n	8007eb4 <_dtoa_r+0x794>
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	e788      	b.n	8007f10 <_dtoa_r+0x7f0>
 8007ffe:	9b02      	ldr	r3, [sp, #8]
 8008000:	e786      	b.n	8007f10 <_dtoa_r+0x7f0>
 8008002:	2300      	movs	r3, #0
 8008004:	930a      	str	r3, [sp, #40]	@ 0x28
 8008006:	e788      	b.n	8007f1a <_dtoa_r+0x7fa>
 8008008:	d09f      	beq.n	8007f4a <_dtoa_r+0x82a>
 800800a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800800c:	331c      	adds	r3, #28
 800800e:	441a      	add	r2, r3
 8008010:	4498      	add	r8, r3
 8008012:	441e      	add	r6, r3
 8008014:	9209      	str	r2, [sp, #36]	@ 0x24
 8008016:	e798      	b.n	8007f4a <_dtoa_r+0x82a>
 8008018:	4603      	mov	r3, r0
 800801a:	e7f6      	b.n	800800a <_dtoa_r+0x8ea>
 800801c:	9b07      	ldr	r3, [sp, #28]
 800801e:	9704      	str	r7, [sp, #16]
 8008020:	2b00      	cmp	r3, #0
 8008022:	dc20      	bgt.n	8008066 <_dtoa_r+0x946>
 8008024:	9308      	str	r3, [sp, #32]
 8008026:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008028:	2b02      	cmp	r3, #2
 800802a:	dd1e      	ble.n	800806a <_dtoa_r+0x94a>
 800802c:	9b08      	ldr	r3, [sp, #32]
 800802e:	2b00      	cmp	r3, #0
 8008030:	f47f aebc 	bne.w	8007dac <_dtoa_r+0x68c>
 8008034:	4621      	mov	r1, r4
 8008036:	2205      	movs	r2, #5
 8008038:	4658      	mov	r0, fp
 800803a:	f000 fde5 	bl	8008c08 <__multadd>
 800803e:	4601      	mov	r1, r0
 8008040:	4604      	mov	r4, r0
 8008042:	4648      	mov	r0, r9
 8008044:	f001 f840 	bl	80090c8 <__mcmp>
 8008048:	2800      	cmp	r0, #0
 800804a:	f77f aeaf 	ble.w	8007dac <_dtoa_r+0x68c>
 800804e:	2331      	movs	r3, #49	@ 0x31
 8008050:	4656      	mov	r6, sl
 8008052:	f806 3b01 	strb.w	r3, [r6], #1
 8008056:	9b04      	ldr	r3, [sp, #16]
 8008058:	3301      	adds	r3, #1
 800805a:	9304      	str	r3, [sp, #16]
 800805c:	e6aa      	b.n	8007db4 <_dtoa_r+0x694>
 800805e:	9c07      	ldr	r4, [sp, #28]
 8008060:	9704      	str	r7, [sp, #16]
 8008062:	4625      	mov	r5, r4
 8008064:	e7f3      	b.n	800804e <_dtoa_r+0x92e>
 8008066:	9b07      	ldr	r3, [sp, #28]
 8008068:	9308      	str	r3, [sp, #32]
 800806a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800806c:	2b00      	cmp	r3, #0
 800806e:	f000 8104 	beq.w	800827a <_dtoa_r+0xb5a>
 8008072:	2e00      	cmp	r6, #0
 8008074:	dd05      	ble.n	8008082 <_dtoa_r+0x962>
 8008076:	4629      	mov	r1, r5
 8008078:	4632      	mov	r2, r6
 800807a:	4658      	mov	r0, fp
 800807c:	f000 ffb8 	bl	8008ff0 <__lshift>
 8008080:	4605      	mov	r5, r0
 8008082:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008084:	2b00      	cmp	r3, #0
 8008086:	d05a      	beq.n	800813e <_dtoa_r+0xa1e>
 8008088:	4658      	mov	r0, fp
 800808a:	6869      	ldr	r1, [r5, #4]
 800808c:	f000 fd5a 	bl	8008b44 <_Balloc>
 8008090:	4606      	mov	r6, r0
 8008092:	b928      	cbnz	r0, 80080a0 <_dtoa_r+0x980>
 8008094:	4602      	mov	r2, r0
 8008096:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800809a:	4b83      	ldr	r3, [pc, #524]	@ (80082a8 <_dtoa_r+0xb88>)
 800809c:	f7ff bb54 	b.w	8007748 <_dtoa_r+0x28>
 80080a0:	692a      	ldr	r2, [r5, #16]
 80080a2:	f105 010c 	add.w	r1, r5, #12
 80080a6:	3202      	adds	r2, #2
 80080a8:	0092      	lsls	r2, r2, #2
 80080aa:	300c      	adds	r0, #12
 80080ac:	f7ff fa95 	bl	80075da <memcpy>
 80080b0:	2201      	movs	r2, #1
 80080b2:	4631      	mov	r1, r6
 80080b4:	4658      	mov	r0, fp
 80080b6:	f000 ff9b 	bl	8008ff0 <__lshift>
 80080ba:	462f      	mov	r7, r5
 80080bc:	4605      	mov	r5, r0
 80080be:	f10a 0301 	add.w	r3, sl, #1
 80080c2:	9307      	str	r3, [sp, #28]
 80080c4:	9b08      	ldr	r3, [sp, #32]
 80080c6:	4453      	add	r3, sl
 80080c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080ca:	9b02      	ldr	r3, [sp, #8]
 80080cc:	f003 0301 	and.w	r3, r3, #1
 80080d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80080d2:	9b07      	ldr	r3, [sp, #28]
 80080d4:	4621      	mov	r1, r4
 80080d6:	3b01      	subs	r3, #1
 80080d8:	4648      	mov	r0, r9
 80080da:	9302      	str	r3, [sp, #8]
 80080dc:	f7ff fa96 	bl	800760c <quorem>
 80080e0:	4639      	mov	r1, r7
 80080e2:	9008      	str	r0, [sp, #32]
 80080e4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80080e8:	4648      	mov	r0, r9
 80080ea:	f000 ffed 	bl	80090c8 <__mcmp>
 80080ee:	462a      	mov	r2, r5
 80080f0:	9009      	str	r0, [sp, #36]	@ 0x24
 80080f2:	4621      	mov	r1, r4
 80080f4:	4658      	mov	r0, fp
 80080f6:	f001 f803 	bl	8009100 <__mdiff>
 80080fa:	68c2      	ldr	r2, [r0, #12]
 80080fc:	4606      	mov	r6, r0
 80080fe:	bb02      	cbnz	r2, 8008142 <_dtoa_r+0xa22>
 8008100:	4601      	mov	r1, r0
 8008102:	4648      	mov	r0, r9
 8008104:	f000 ffe0 	bl	80090c8 <__mcmp>
 8008108:	4602      	mov	r2, r0
 800810a:	4631      	mov	r1, r6
 800810c:	4658      	mov	r0, fp
 800810e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008110:	f000 fd58 	bl	8008bc4 <_Bfree>
 8008114:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008116:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008118:	9e07      	ldr	r6, [sp, #28]
 800811a:	ea43 0102 	orr.w	r1, r3, r2
 800811e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008120:	4319      	orrs	r1, r3
 8008122:	d110      	bne.n	8008146 <_dtoa_r+0xa26>
 8008124:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008128:	d029      	beq.n	800817e <_dtoa_r+0xa5e>
 800812a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800812c:	2b00      	cmp	r3, #0
 800812e:	dd02      	ble.n	8008136 <_dtoa_r+0xa16>
 8008130:	9b08      	ldr	r3, [sp, #32]
 8008132:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008136:	9b02      	ldr	r3, [sp, #8]
 8008138:	f883 8000 	strb.w	r8, [r3]
 800813c:	e63b      	b.n	8007db6 <_dtoa_r+0x696>
 800813e:	4628      	mov	r0, r5
 8008140:	e7bb      	b.n	80080ba <_dtoa_r+0x99a>
 8008142:	2201      	movs	r2, #1
 8008144:	e7e1      	b.n	800810a <_dtoa_r+0x9ea>
 8008146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008148:	2b00      	cmp	r3, #0
 800814a:	db04      	blt.n	8008156 <_dtoa_r+0xa36>
 800814c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800814e:	430b      	orrs	r3, r1
 8008150:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008152:	430b      	orrs	r3, r1
 8008154:	d120      	bne.n	8008198 <_dtoa_r+0xa78>
 8008156:	2a00      	cmp	r2, #0
 8008158:	dded      	ble.n	8008136 <_dtoa_r+0xa16>
 800815a:	4649      	mov	r1, r9
 800815c:	2201      	movs	r2, #1
 800815e:	4658      	mov	r0, fp
 8008160:	f000 ff46 	bl	8008ff0 <__lshift>
 8008164:	4621      	mov	r1, r4
 8008166:	4681      	mov	r9, r0
 8008168:	f000 ffae 	bl	80090c8 <__mcmp>
 800816c:	2800      	cmp	r0, #0
 800816e:	dc03      	bgt.n	8008178 <_dtoa_r+0xa58>
 8008170:	d1e1      	bne.n	8008136 <_dtoa_r+0xa16>
 8008172:	f018 0f01 	tst.w	r8, #1
 8008176:	d0de      	beq.n	8008136 <_dtoa_r+0xa16>
 8008178:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800817c:	d1d8      	bne.n	8008130 <_dtoa_r+0xa10>
 800817e:	2339      	movs	r3, #57	@ 0x39
 8008180:	9a02      	ldr	r2, [sp, #8]
 8008182:	7013      	strb	r3, [r2, #0]
 8008184:	4633      	mov	r3, r6
 8008186:	461e      	mov	r6, r3
 8008188:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800818c:	3b01      	subs	r3, #1
 800818e:	2a39      	cmp	r2, #57	@ 0x39
 8008190:	d052      	beq.n	8008238 <_dtoa_r+0xb18>
 8008192:	3201      	adds	r2, #1
 8008194:	701a      	strb	r2, [r3, #0]
 8008196:	e60e      	b.n	8007db6 <_dtoa_r+0x696>
 8008198:	2a00      	cmp	r2, #0
 800819a:	dd07      	ble.n	80081ac <_dtoa_r+0xa8c>
 800819c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80081a0:	d0ed      	beq.n	800817e <_dtoa_r+0xa5e>
 80081a2:	9a02      	ldr	r2, [sp, #8]
 80081a4:	f108 0301 	add.w	r3, r8, #1
 80081a8:	7013      	strb	r3, [r2, #0]
 80081aa:	e604      	b.n	8007db6 <_dtoa_r+0x696>
 80081ac:	9b07      	ldr	r3, [sp, #28]
 80081ae:	9a07      	ldr	r2, [sp, #28]
 80081b0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80081b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d028      	beq.n	800820c <_dtoa_r+0xaec>
 80081ba:	4649      	mov	r1, r9
 80081bc:	2300      	movs	r3, #0
 80081be:	220a      	movs	r2, #10
 80081c0:	4658      	mov	r0, fp
 80081c2:	f000 fd21 	bl	8008c08 <__multadd>
 80081c6:	42af      	cmp	r7, r5
 80081c8:	4681      	mov	r9, r0
 80081ca:	f04f 0300 	mov.w	r3, #0
 80081ce:	f04f 020a 	mov.w	r2, #10
 80081d2:	4639      	mov	r1, r7
 80081d4:	4658      	mov	r0, fp
 80081d6:	d107      	bne.n	80081e8 <_dtoa_r+0xac8>
 80081d8:	f000 fd16 	bl	8008c08 <__multadd>
 80081dc:	4607      	mov	r7, r0
 80081de:	4605      	mov	r5, r0
 80081e0:	9b07      	ldr	r3, [sp, #28]
 80081e2:	3301      	adds	r3, #1
 80081e4:	9307      	str	r3, [sp, #28]
 80081e6:	e774      	b.n	80080d2 <_dtoa_r+0x9b2>
 80081e8:	f000 fd0e 	bl	8008c08 <__multadd>
 80081ec:	4629      	mov	r1, r5
 80081ee:	4607      	mov	r7, r0
 80081f0:	2300      	movs	r3, #0
 80081f2:	220a      	movs	r2, #10
 80081f4:	4658      	mov	r0, fp
 80081f6:	f000 fd07 	bl	8008c08 <__multadd>
 80081fa:	4605      	mov	r5, r0
 80081fc:	e7f0      	b.n	80081e0 <_dtoa_r+0xac0>
 80081fe:	9b08      	ldr	r3, [sp, #32]
 8008200:	2700      	movs	r7, #0
 8008202:	2b00      	cmp	r3, #0
 8008204:	bfcc      	ite	gt
 8008206:	461e      	movgt	r6, r3
 8008208:	2601      	movle	r6, #1
 800820a:	4456      	add	r6, sl
 800820c:	4649      	mov	r1, r9
 800820e:	2201      	movs	r2, #1
 8008210:	4658      	mov	r0, fp
 8008212:	f000 feed 	bl	8008ff0 <__lshift>
 8008216:	4621      	mov	r1, r4
 8008218:	4681      	mov	r9, r0
 800821a:	f000 ff55 	bl	80090c8 <__mcmp>
 800821e:	2800      	cmp	r0, #0
 8008220:	dcb0      	bgt.n	8008184 <_dtoa_r+0xa64>
 8008222:	d102      	bne.n	800822a <_dtoa_r+0xb0a>
 8008224:	f018 0f01 	tst.w	r8, #1
 8008228:	d1ac      	bne.n	8008184 <_dtoa_r+0xa64>
 800822a:	4633      	mov	r3, r6
 800822c:	461e      	mov	r6, r3
 800822e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008232:	2a30      	cmp	r2, #48	@ 0x30
 8008234:	d0fa      	beq.n	800822c <_dtoa_r+0xb0c>
 8008236:	e5be      	b.n	8007db6 <_dtoa_r+0x696>
 8008238:	459a      	cmp	sl, r3
 800823a:	d1a4      	bne.n	8008186 <_dtoa_r+0xa66>
 800823c:	9b04      	ldr	r3, [sp, #16]
 800823e:	3301      	adds	r3, #1
 8008240:	9304      	str	r3, [sp, #16]
 8008242:	2331      	movs	r3, #49	@ 0x31
 8008244:	f88a 3000 	strb.w	r3, [sl]
 8008248:	e5b5      	b.n	8007db6 <_dtoa_r+0x696>
 800824a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800824c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80082ac <_dtoa_r+0xb8c>
 8008250:	b11b      	cbz	r3, 800825a <_dtoa_r+0xb3a>
 8008252:	f10a 0308 	add.w	r3, sl, #8
 8008256:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008258:	6013      	str	r3, [r2, #0]
 800825a:	4650      	mov	r0, sl
 800825c:	b017      	add	sp, #92	@ 0x5c
 800825e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008262:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008264:	2b01      	cmp	r3, #1
 8008266:	f77f ae3d 	ble.w	8007ee4 <_dtoa_r+0x7c4>
 800826a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800826c:	930a      	str	r3, [sp, #40]	@ 0x28
 800826e:	2001      	movs	r0, #1
 8008270:	e65b      	b.n	8007f2a <_dtoa_r+0x80a>
 8008272:	9b08      	ldr	r3, [sp, #32]
 8008274:	2b00      	cmp	r3, #0
 8008276:	f77f aed6 	ble.w	8008026 <_dtoa_r+0x906>
 800827a:	4656      	mov	r6, sl
 800827c:	4621      	mov	r1, r4
 800827e:	4648      	mov	r0, r9
 8008280:	f7ff f9c4 	bl	800760c <quorem>
 8008284:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008288:	9b08      	ldr	r3, [sp, #32]
 800828a:	f806 8b01 	strb.w	r8, [r6], #1
 800828e:	eba6 020a 	sub.w	r2, r6, sl
 8008292:	4293      	cmp	r3, r2
 8008294:	ddb3      	ble.n	80081fe <_dtoa_r+0xade>
 8008296:	4649      	mov	r1, r9
 8008298:	2300      	movs	r3, #0
 800829a:	220a      	movs	r2, #10
 800829c:	4658      	mov	r0, fp
 800829e:	f000 fcb3 	bl	8008c08 <__multadd>
 80082a2:	4681      	mov	r9, r0
 80082a4:	e7ea      	b.n	800827c <_dtoa_r+0xb5c>
 80082a6:	bf00      	nop
 80082a8:	0800c4e6 	.word	0x0800c4e6
 80082ac:	0800c46a 	.word	0x0800c46a

080082b0 <_free_r>:
 80082b0:	b538      	push	{r3, r4, r5, lr}
 80082b2:	4605      	mov	r5, r0
 80082b4:	2900      	cmp	r1, #0
 80082b6:	d040      	beq.n	800833a <_free_r+0x8a>
 80082b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082bc:	1f0c      	subs	r4, r1, #4
 80082be:	2b00      	cmp	r3, #0
 80082c0:	bfb8      	it	lt
 80082c2:	18e4      	addlt	r4, r4, r3
 80082c4:	f000 fc32 	bl	8008b2c <__malloc_lock>
 80082c8:	4a1c      	ldr	r2, [pc, #112]	@ (800833c <_free_r+0x8c>)
 80082ca:	6813      	ldr	r3, [r2, #0]
 80082cc:	b933      	cbnz	r3, 80082dc <_free_r+0x2c>
 80082ce:	6063      	str	r3, [r4, #4]
 80082d0:	6014      	str	r4, [r2, #0]
 80082d2:	4628      	mov	r0, r5
 80082d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082d8:	f000 bc2e 	b.w	8008b38 <__malloc_unlock>
 80082dc:	42a3      	cmp	r3, r4
 80082de:	d908      	bls.n	80082f2 <_free_r+0x42>
 80082e0:	6820      	ldr	r0, [r4, #0]
 80082e2:	1821      	adds	r1, r4, r0
 80082e4:	428b      	cmp	r3, r1
 80082e6:	bf01      	itttt	eq
 80082e8:	6819      	ldreq	r1, [r3, #0]
 80082ea:	685b      	ldreq	r3, [r3, #4]
 80082ec:	1809      	addeq	r1, r1, r0
 80082ee:	6021      	streq	r1, [r4, #0]
 80082f0:	e7ed      	b.n	80082ce <_free_r+0x1e>
 80082f2:	461a      	mov	r2, r3
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	b10b      	cbz	r3, 80082fc <_free_r+0x4c>
 80082f8:	42a3      	cmp	r3, r4
 80082fa:	d9fa      	bls.n	80082f2 <_free_r+0x42>
 80082fc:	6811      	ldr	r1, [r2, #0]
 80082fe:	1850      	adds	r0, r2, r1
 8008300:	42a0      	cmp	r0, r4
 8008302:	d10b      	bne.n	800831c <_free_r+0x6c>
 8008304:	6820      	ldr	r0, [r4, #0]
 8008306:	4401      	add	r1, r0
 8008308:	1850      	adds	r0, r2, r1
 800830a:	4283      	cmp	r3, r0
 800830c:	6011      	str	r1, [r2, #0]
 800830e:	d1e0      	bne.n	80082d2 <_free_r+0x22>
 8008310:	6818      	ldr	r0, [r3, #0]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	4408      	add	r0, r1
 8008316:	6010      	str	r0, [r2, #0]
 8008318:	6053      	str	r3, [r2, #4]
 800831a:	e7da      	b.n	80082d2 <_free_r+0x22>
 800831c:	d902      	bls.n	8008324 <_free_r+0x74>
 800831e:	230c      	movs	r3, #12
 8008320:	602b      	str	r3, [r5, #0]
 8008322:	e7d6      	b.n	80082d2 <_free_r+0x22>
 8008324:	6820      	ldr	r0, [r4, #0]
 8008326:	1821      	adds	r1, r4, r0
 8008328:	428b      	cmp	r3, r1
 800832a:	bf01      	itttt	eq
 800832c:	6819      	ldreq	r1, [r3, #0]
 800832e:	685b      	ldreq	r3, [r3, #4]
 8008330:	1809      	addeq	r1, r1, r0
 8008332:	6021      	streq	r1, [r4, #0]
 8008334:	6063      	str	r3, [r4, #4]
 8008336:	6054      	str	r4, [r2, #4]
 8008338:	e7cb      	b.n	80082d2 <_free_r+0x22>
 800833a:	bd38      	pop	{r3, r4, r5, pc}
 800833c:	20000bb8 	.word	0x20000bb8

08008340 <rshift>:
 8008340:	6903      	ldr	r3, [r0, #16]
 8008342:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008346:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800834a:	f100 0414 	add.w	r4, r0, #20
 800834e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008352:	dd46      	ble.n	80083e2 <rshift+0xa2>
 8008354:	f011 011f 	ands.w	r1, r1, #31
 8008358:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800835c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008360:	d10c      	bne.n	800837c <rshift+0x3c>
 8008362:	4629      	mov	r1, r5
 8008364:	f100 0710 	add.w	r7, r0, #16
 8008368:	42b1      	cmp	r1, r6
 800836a:	d335      	bcc.n	80083d8 <rshift+0x98>
 800836c:	1a9b      	subs	r3, r3, r2
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	1eea      	subs	r2, r5, #3
 8008372:	4296      	cmp	r6, r2
 8008374:	bf38      	it	cc
 8008376:	2300      	movcc	r3, #0
 8008378:	4423      	add	r3, r4
 800837a:	e015      	b.n	80083a8 <rshift+0x68>
 800837c:	46a1      	mov	r9, r4
 800837e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008382:	f1c1 0820 	rsb	r8, r1, #32
 8008386:	40cf      	lsrs	r7, r1
 8008388:	f105 0e04 	add.w	lr, r5, #4
 800838c:	4576      	cmp	r6, lr
 800838e:	46f4      	mov	ip, lr
 8008390:	d816      	bhi.n	80083c0 <rshift+0x80>
 8008392:	1a9a      	subs	r2, r3, r2
 8008394:	0092      	lsls	r2, r2, #2
 8008396:	3a04      	subs	r2, #4
 8008398:	3501      	adds	r5, #1
 800839a:	42ae      	cmp	r6, r5
 800839c:	bf38      	it	cc
 800839e:	2200      	movcc	r2, #0
 80083a0:	18a3      	adds	r3, r4, r2
 80083a2:	50a7      	str	r7, [r4, r2]
 80083a4:	b107      	cbz	r7, 80083a8 <rshift+0x68>
 80083a6:	3304      	adds	r3, #4
 80083a8:	42a3      	cmp	r3, r4
 80083aa:	eba3 0204 	sub.w	r2, r3, r4
 80083ae:	bf08      	it	eq
 80083b0:	2300      	moveq	r3, #0
 80083b2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80083b6:	6102      	str	r2, [r0, #16]
 80083b8:	bf08      	it	eq
 80083ba:	6143      	streq	r3, [r0, #20]
 80083bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083c0:	f8dc c000 	ldr.w	ip, [ip]
 80083c4:	fa0c fc08 	lsl.w	ip, ip, r8
 80083c8:	ea4c 0707 	orr.w	r7, ip, r7
 80083cc:	f849 7b04 	str.w	r7, [r9], #4
 80083d0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80083d4:	40cf      	lsrs	r7, r1
 80083d6:	e7d9      	b.n	800838c <rshift+0x4c>
 80083d8:	f851 cb04 	ldr.w	ip, [r1], #4
 80083dc:	f847 cf04 	str.w	ip, [r7, #4]!
 80083e0:	e7c2      	b.n	8008368 <rshift+0x28>
 80083e2:	4623      	mov	r3, r4
 80083e4:	e7e0      	b.n	80083a8 <rshift+0x68>

080083e6 <__hexdig_fun>:
 80083e6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80083ea:	2b09      	cmp	r3, #9
 80083ec:	d802      	bhi.n	80083f4 <__hexdig_fun+0xe>
 80083ee:	3820      	subs	r0, #32
 80083f0:	b2c0      	uxtb	r0, r0
 80083f2:	4770      	bx	lr
 80083f4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80083f8:	2b05      	cmp	r3, #5
 80083fa:	d801      	bhi.n	8008400 <__hexdig_fun+0x1a>
 80083fc:	3847      	subs	r0, #71	@ 0x47
 80083fe:	e7f7      	b.n	80083f0 <__hexdig_fun+0xa>
 8008400:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008404:	2b05      	cmp	r3, #5
 8008406:	d801      	bhi.n	800840c <__hexdig_fun+0x26>
 8008408:	3827      	subs	r0, #39	@ 0x27
 800840a:	e7f1      	b.n	80083f0 <__hexdig_fun+0xa>
 800840c:	2000      	movs	r0, #0
 800840e:	4770      	bx	lr

08008410 <__gethex>:
 8008410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008414:	468a      	mov	sl, r1
 8008416:	4690      	mov	r8, r2
 8008418:	b085      	sub	sp, #20
 800841a:	9302      	str	r3, [sp, #8]
 800841c:	680b      	ldr	r3, [r1, #0]
 800841e:	9001      	str	r0, [sp, #4]
 8008420:	1c9c      	adds	r4, r3, #2
 8008422:	46a1      	mov	r9, r4
 8008424:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008428:	2830      	cmp	r0, #48	@ 0x30
 800842a:	d0fa      	beq.n	8008422 <__gethex+0x12>
 800842c:	eba9 0303 	sub.w	r3, r9, r3
 8008430:	f1a3 0b02 	sub.w	fp, r3, #2
 8008434:	f7ff ffd7 	bl	80083e6 <__hexdig_fun>
 8008438:	4605      	mov	r5, r0
 800843a:	2800      	cmp	r0, #0
 800843c:	d168      	bne.n	8008510 <__gethex+0x100>
 800843e:	2201      	movs	r2, #1
 8008440:	4648      	mov	r0, r9
 8008442:	499f      	ldr	r1, [pc, #636]	@ (80086c0 <__gethex+0x2b0>)
 8008444:	f7ff f831 	bl	80074aa <strncmp>
 8008448:	4607      	mov	r7, r0
 800844a:	2800      	cmp	r0, #0
 800844c:	d167      	bne.n	800851e <__gethex+0x10e>
 800844e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008452:	4626      	mov	r6, r4
 8008454:	f7ff ffc7 	bl	80083e6 <__hexdig_fun>
 8008458:	2800      	cmp	r0, #0
 800845a:	d062      	beq.n	8008522 <__gethex+0x112>
 800845c:	4623      	mov	r3, r4
 800845e:	7818      	ldrb	r0, [r3, #0]
 8008460:	4699      	mov	r9, r3
 8008462:	2830      	cmp	r0, #48	@ 0x30
 8008464:	f103 0301 	add.w	r3, r3, #1
 8008468:	d0f9      	beq.n	800845e <__gethex+0x4e>
 800846a:	f7ff ffbc 	bl	80083e6 <__hexdig_fun>
 800846e:	fab0 f580 	clz	r5, r0
 8008472:	f04f 0b01 	mov.w	fp, #1
 8008476:	096d      	lsrs	r5, r5, #5
 8008478:	464a      	mov	r2, r9
 800847a:	4616      	mov	r6, r2
 800847c:	7830      	ldrb	r0, [r6, #0]
 800847e:	3201      	adds	r2, #1
 8008480:	f7ff ffb1 	bl	80083e6 <__hexdig_fun>
 8008484:	2800      	cmp	r0, #0
 8008486:	d1f8      	bne.n	800847a <__gethex+0x6a>
 8008488:	2201      	movs	r2, #1
 800848a:	4630      	mov	r0, r6
 800848c:	498c      	ldr	r1, [pc, #560]	@ (80086c0 <__gethex+0x2b0>)
 800848e:	f7ff f80c 	bl	80074aa <strncmp>
 8008492:	2800      	cmp	r0, #0
 8008494:	d13f      	bne.n	8008516 <__gethex+0x106>
 8008496:	b944      	cbnz	r4, 80084aa <__gethex+0x9a>
 8008498:	1c74      	adds	r4, r6, #1
 800849a:	4622      	mov	r2, r4
 800849c:	4616      	mov	r6, r2
 800849e:	7830      	ldrb	r0, [r6, #0]
 80084a0:	3201      	adds	r2, #1
 80084a2:	f7ff ffa0 	bl	80083e6 <__hexdig_fun>
 80084a6:	2800      	cmp	r0, #0
 80084a8:	d1f8      	bne.n	800849c <__gethex+0x8c>
 80084aa:	1ba4      	subs	r4, r4, r6
 80084ac:	00a7      	lsls	r7, r4, #2
 80084ae:	7833      	ldrb	r3, [r6, #0]
 80084b0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80084b4:	2b50      	cmp	r3, #80	@ 0x50
 80084b6:	d13e      	bne.n	8008536 <__gethex+0x126>
 80084b8:	7873      	ldrb	r3, [r6, #1]
 80084ba:	2b2b      	cmp	r3, #43	@ 0x2b
 80084bc:	d033      	beq.n	8008526 <__gethex+0x116>
 80084be:	2b2d      	cmp	r3, #45	@ 0x2d
 80084c0:	d034      	beq.n	800852c <__gethex+0x11c>
 80084c2:	2400      	movs	r4, #0
 80084c4:	1c71      	adds	r1, r6, #1
 80084c6:	7808      	ldrb	r0, [r1, #0]
 80084c8:	f7ff ff8d 	bl	80083e6 <__hexdig_fun>
 80084cc:	1e43      	subs	r3, r0, #1
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	2b18      	cmp	r3, #24
 80084d2:	d830      	bhi.n	8008536 <__gethex+0x126>
 80084d4:	f1a0 0210 	sub.w	r2, r0, #16
 80084d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80084dc:	f7ff ff83 	bl	80083e6 <__hexdig_fun>
 80084e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80084e4:	fa5f fc8c 	uxtb.w	ip, ip
 80084e8:	f1bc 0f18 	cmp.w	ip, #24
 80084ec:	f04f 030a 	mov.w	r3, #10
 80084f0:	d91e      	bls.n	8008530 <__gethex+0x120>
 80084f2:	b104      	cbz	r4, 80084f6 <__gethex+0xe6>
 80084f4:	4252      	negs	r2, r2
 80084f6:	4417      	add	r7, r2
 80084f8:	f8ca 1000 	str.w	r1, [sl]
 80084fc:	b1ed      	cbz	r5, 800853a <__gethex+0x12a>
 80084fe:	f1bb 0f00 	cmp.w	fp, #0
 8008502:	bf0c      	ite	eq
 8008504:	2506      	moveq	r5, #6
 8008506:	2500      	movne	r5, #0
 8008508:	4628      	mov	r0, r5
 800850a:	b005      	add	sp, #20
 800850c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008510:	2500      	movs	r5, #0
 8008512:	462c      	mov	r4, r5
 8008514:	e7b0      	b.n	8008478 <__gethex+0x68>
 8008516:	2c00      	cmp	r4, #0
 8008518:	d1c7      	bne.n	80084aa <__gethex+0x9a>
 800851a:	4627      	mov	r7, r4
 800851c:	e7c7      	b.n	80084ae <__gethex+0x9e>
 800851e:	464e      	mov	r6, r9
 8008520:	462f      	mov	r7, r5
 8008522:	2501      	movs	r5, #1
 8008524:	e7c3      	b.n	80084ae <__gethex+0x9e>
 8008526:	2400      	movs	r4, #0
 8008528:	1cb1      	adds	r1, r6, #2
 800852a:	e7cc      	b.n	80084c6 <__gethex+0xb6>
 800852c:	2401      	movs	r4, #1
 800852e:	e7fb      	b.n	8008528 <__gethex+0x118>
 8008530:	fb03 0002 	mla	r0, r3, r2, r0
 8008534:	e7ce      	b.n	80084d4 <__gethex+0xc4>
 8008536:	4631      	mov	r1, r6
 8008538:	e7de      	b.n	80084f8 <__gethex+0xe8>
 800853a:	4629      	mov	r1, r5
 800853c:	eba6 0309 	sub.w	r3, r6, r9
 8008540:	3b01      	subs	r3, #1
 8008542:	2b07      	cmp	r3, #7
 8008544:	dc0a      	bgt.n	800855c <__gethex+0x14c>
 8008546:	9801      	ldr	r0, [sp, #4]
 8008548:	f000 fafc 	bl	8008b44 <_Balloc>
 800854c:	4604      	mov	r4, r0
 800854e:	b940      	cbnz	r0, 8008562 <__gethex+0x152>
 8008550:	4602      	mov	r2, r0
 8008552:	21e4      	movs	r1, #228	@ 0xe4
 8008554:	4b5b      	ldr	r3, [pc, #364]	@ (80086c4 <__gethex+0x2b4>)
 8008556:	485c      	ldr	r0, [pc, #368]	@ (80086c8 <__gethex+0x2b8>)
 8008558:	f001 f9d0 	bl	80098fc <__assert_func>
 800855c:	3101      	adds	r1, #1
 800855e:	105b      	asrs	r3, r3, #1
 8008560:	e7ef      	b.n	8008542 <__gethex+0x132>
 8008562:	2300      	movs	r3, #0
 8008564:	f100 0a14 	add.w	sl, r0, #20
 8008568:	4655      	mov	r5, sl
 800856a:	469b      	mov	fp, r3
 800856c:	45b1      	cmp	r9, r6
 800856e:	d337      	bcc.n	80085e0 <__gethex+0x1d0>
 8008570:	f845 bb04 	str.w	fp, [r5], #4
 8008574:	eba5 050a 	sub.w	r5, r5, sl
 8008578:	10ad      	asrs	r5, r5, #2
 800857a:	6125      	str	r5, [r4, #16]
 800857c:	4658      	mov	r0, fp
 800857e:	f000 fbd3 	bl	8008d28 <__hi0bits>
 8008582:	016d      	lsls	r5, r5, #5
 8008584:	f8d8 6000 	ldr.w	r6, [r8]
 8008588:	1a2d      	subs	r5, r5, r0
 800858a:	42b5      	cmp	r5, r6
 800858c:	dd54      	ble.n	8008638 <__gethex+0x228>
 800858e:	1bad      	subs	r5, r5, r6
 8008590:	4629      	mov	r1, r5
 8008592:	4620      	mov	r0, r4
 8008594:	f000 ff5b 	bl	800944e <__any_on>
 8008598:	4681      	mov	r9, r0
 800859a:	b178      	cbz	r0, 80085bc <__gethex+0x1ac>
 800859c:	f04f 0901 	mov.w	r9, #1
 80085a0:	1e6b      	subs	r3, r5, #1
 80085a2:	1159      	asrs	r1, r3, #5
 80085a4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80085a8:	f003 021f 	and.w	r2, r3, #31
 80085ac:	fa09 f202 	lsl.w	r2, r9, r2
 80085b0:	420a      	tst	r2, r1
 80085b2:	d003      	beq.n	80085bc <__gethex+0x1ac>
 80085b4:	454b      	cmp	r3, r9
 80085b6:	dc36      	bgt.n	8008626 <__gethex+0x216>
 80085b8:	f04f 0902 	mov.w	r9, #2
 80085bc:	4629      	mov	r1, r5
 80085be:	4620      	mov	r0, r4
 80085c0:	f7ff febe 	bl	8008340 <rshift>
 80085c4:	442f      	add	r7, r5
 80085c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80085ca:	42bb      	cmp	r3, r7
 80085cc:	da42      	bge.n	8008654 <__gethex+0x244>
 80085ce:	4621      	mov	r1, r4
 80085d0:	9801      	ldr	r0, [sp, #4]
 80085d2:	f000 faf7 	bl	8008bc4 <_Bfree>
 80085d6:	2300      	movs	r3, #0
 80085d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80085da:	25a3      	movs	r5, #163	@ 0xa3
 80085dc:	6013      	str	r3, [r2, #0]
 80085de:	e793      	b.n	8008508 <__gethex+0xf8>
 80085e0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80085e4:	2a2e      	cmp	r2, #46	@ 0x2e
 80085e6:	d012      	beq.n	800860e <__gethex+0x1fe>
 80085e8:	2b20      	cmp	r3, #32
 80085ea:	d104      	bne.n	80085f6 <__gethex+0x1e6>
 80085ec:	f845 bb04 	str.w	fp, [r5], #4
 80085f0:	f04f 0b00 	mov.w	fp, #0
 80085f4:	465b      	mov	r3, fp
 80085f6:	7830      	ldrb	r0, [r6, #0]
 80085f8:	9303      	str	r3, [sp, #12]
 80085fa:	f7ff fef4 	bl	80083e6 <__hexdig_fun>
 80085fe:	9b03      	ldr	r3, [sp, #12]
 8008600:	f000 000f 	and.w	r0, r0, #15
 8008604:	4098      	lsls	r0, r3
 8008606:	ea4b 0b00 	orr.w	fp, fp, r0
 800860a:	3304      	adds	r3, #4
 800860c:	e7ae      	b.n	800856c <__gethex+0x15c>
 800860e:	45b1      	cmp	r9, r6
 8008610:	d8ea      	bhi.n	80085e8 <__gethex+0x1d8>
 8008612:	2201      	movs	r2, #1
 8008614:	4630      	mov	r0, r6
 8008616:	492a      	ldr	r1, [pc, #168]	@ (80086c0 <__gethex+0x2b0>)
 8008618:	9303      	str	r3, [sp, #12]
 800861a:	f7fe ff46 	bl	80074aa <strncmp>
 800861e:	9b03      	ldr	r3, [sp, #12]
 8008620:	2800      	cmp	r0, #0
 8008622:	d1e1      	bne.n	80085e8 <__gethex+0x1d8>
 8008624:	e7a2      	b.n	800856c <__gethex+0x15c>
 8008626:	4620      	mov	r0, r4
 8008628:	1ea9      	subs	r1, r5, #2
 800862a:	f000 ff10 	bl	800944e <__any_on>
 800862e:	2800      	cmp	r0, #0
 8008630:	d0c2      	beq.n	80085b8 <__gethex+0x1a8>
 8008632:	f04f 0903 	mov.w	r9, #3
 8008636:	e7c1      	b.n	80085bc <__gethex+0x1ac>
 8008638:	da09      	bge.n	800864e <__gethex+0x23e>
 800863a:	1b75      	subs	r5, r6, r5
 800863c:	4621      	mov	r1, r4
 800863e:	462a      	mov	r2, r5
 8008640:	9801      	ldr	r0, [sp, #4]
 8008642:	f000 fcd5 	bl	8008ff0 <__lshift>
 8008646:	4604      	mov	r4, r0
 8008648:	1b7f      	subs	r7, r7, r5
 800864a:	f100 0a14 	add.w	sl, r0, #20
 800864e:	f04f 0900 	mov.w	r9, #0
 8008652:	e7b8      	b.n	80085c6 <__gethex+0x1b6>
 8008654:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008658:	42bd      	cmp	r5, r7
 800865a:	dd6f      	ble.n	800873c <__gethex+0x32c>
 800865c:	1bed      	subs	r5, r5, r7
 800865e:	42ae      	cmp	r6, r5
 8008660:	dc34      	bgt.n	80086cc <__gethex+0x2bc>
 8008662:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008666:	2b02      	cmp	r3, #2
 8008668:	d022      	beq.n	80086b0 <__gethex+0x2a0>
 800866a:	2b03      	cmp	r3, #3
 800866c:	d024      	beq.n	80086b8 <__gethex+0x2a8>
 800866e:	2b01      	cmp	r3, #1
 8008670:	d115      	bne.n	800869e <__gethex+0x28e>
 8008672:	42ae      	cmp	r6, r5
 8008674:	d113      	bne.n	800869e <__gethex+0x28e>
 8008676:	2e01      	cmp	r6, #1
 8008678:	d10b      	bne.n	8008692 <__gethex+0x282>
 800867a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800867e:	9a02      	ldr	r2, [sp, #8]
 8008680:	2562      	movs	r5, #98	@ 0x62
 8008682:	6013      	str	r3, [r2, #0]
 8008684:	2301      	movs	r3, #1
 8008686:	6123      	str	r3, [r4, #16]
 8008688:	f8ca 3000 	str.w	r3, [sl]
 800868c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800868e:	601c      	str	r4, [r3, #0]
 8008690:	e73a      	b.n	8008508 <__gethex+0xf8>
 8008692:	4620      	mov	r0, r4
 8008694:	1e71      	subs	r1, r6, #1
 8008696:	f000 feda 	bl	800944e <__any_on>
 800869a:	2800      	cmp	r0, #0
 800869c:	d1ed      	bne.n	800867a <__gethex+0x26a>
 800869e:	4621      	mov	r1, r4
 80086a0:	9801      	ldr	r0, [sp, #4]
 80086a2:	f000 fa8f 	bl	8008bc4 <_Bfree>
 80086a6:	2300      	movs	r3, #0
 80086a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80086aa:	2550      	movs	r5, #80	@ 0x50
 80086ac:	6013      	str	r3, [r2, #0]
 80086ae:	e72b      	b.n	8008508 <__gethex+0xf8>
 80086b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d1f3      	bne.n	800869e <__gethex+0x28e>
 80086b6:	e7e0      	b.n	800867a <__gethex+0x26a>
 80086b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1dd      	bne.n	800867a <__gethex+0x26a>
 80086be:	e7ee      	b.n	800869e <__gethex+0x28e>
 80086c0:	0800c2d2 	.word	0x0800c2d2
 80086c4:	0800c4e6 	.word	0x0800c4e6
 80086c8:	0800c4f7 	.word	0x0800c4f7
 80086cc:	1e6f      	subs	r7, r5, #1
 80086ce:	f1b9 0f00 	cmp.w	r9, #0
 80086d2:	d130      	bne.n	8008736 <__gethex+0x326>
 80086d4:	b127      	cbz	r7, 80086e0 <__gethex+0x2d0>
 80086d6:	4639      	mov	r1, r7
 80086d8:	4620      	mov	r0, r4
 80086da:	f000 feb8 	bl	800944e <__any_on>
 80086de:	4681      	mov	r9, r0
 80086e0:	2301      	movs	r3, #1
 80086e2:	4629      	mov	r1, r5
 80086e4:	1b76      	subs	r6, r6, r5
 80086e6:	2502      	movs	r5, #2
 80086e8:	117a      	asrs	r2, r7, #5
 80086ea:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80086ee:	f007 071f 	and.w	r7, r7, #31
 80086f2:	40bb      	lsls	r3, r7
 80086f4:	4213      	tst	r3, r2
 80086f6:	4620      	mov	r0, r4
 80086f8:	bf18      	it	ne
 80086fa:	f049 0902 	orrne.w	r9, r9, #2
 80086fe:	f7ff fe1f 	bl	8008340 <rshift>
 8008702:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008706:	f1b9 0f00 	cmp.w	r9, #0
 800870a:	d047      	beq.n	800879c <__gethex+0x38c>
 800870c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008710:	2b02      	cmp	r3, #2
 8008712:	d015      	beq.n	8008740 <__gethex+0x330>
 8008714:	2b03      	cmp	r3, #3
 8008716:	d017      	beq.n	8008748 <__gethex+0x338>
 8008718:	2b01      	cmp	r3, #1
 800871a:	d109      	bne.n	8008730 <__gethex+0x320>
 800871c:	f019 0f02 	tst.w	r9, #2
 8008720:	d006      	beq.n	8008730 <__gethex+0x320>
 8008722:	f8da 3000 	ldr.w	r3, [sl]
 8008726:	ea49 0903 	orr.w	r9, r9, r3
 800872a:	f019 0f01 	tst.w	r9, #1
 800872e:	d10e      	bne.n	800874e <__gethex+0x33e>
 8008730:	f045 0510 	orr.w	r5, r5, #16
 8008734:	e032      	b.n	800879c <__gethex+0x38c>
 8008736:	f04f 0901 	mov.w	r9, #1
 800873a:	e7d1      	b.n	80086e0 <__gethex+0x2d0>
 800873c:	2501      	movs	r5, #1
 800873e:	e7e2      	b.n	8008706 <__gethex+0x2f6>
 8008740:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008742:	f1c3 0301 	rsb	r3, r3, #1
 8008746:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008748:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800874a:	2b00      	cmp	r3, #0
 800874c:	d0f0      	beq.n	8008730 <__gethex+0x320>
 800874e:	f04f 0c00 	mov.w	ip, #0
 8008752:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008756:	f104 0314 	add.w	r3, r4, #20
 800875a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800875e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008762:	4618      	mov	r0, r3
 8008764:	f853 2b04 	ldr.w	r2, [r3], #4
 8008768:	f1b2 3fff 	cmp.w	r2, #4294967295
 800876c:	d01b      	beq.n	80087a6 <__gethex+0x396>
 800876e:	3201      	adds	r2, #1
 8008770:	6002      	str	r2, [r0, #0]
 8008772:	2d02      	cmp	r5, #2
 8008774:	f104 0314 	add.w	r3, r4, #20
 8008778:	d13c      	bne.n	80087f4 <__gethex+0x3e4>
 800877a:	f8d8 2000 	ldr.w	r2, [r8]
 800877e:	3a01      	subs	r2, #1
 8008780:	42b2      	cmp	r2, r6
 8008782:	d109      	bne.n	8008798 <__gethex+0x388>
 8008784:	2201      	movs	r2, #1
 8008786:	1171      	asrs	r1, r6, #5
 8008788:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800878c:	f006 061f 	and.w	r6, r6, #31
 8008790:	fa02 f606 	lsl.w	r6, r2, r6
 8008794:	421e      	tst	r6, r3
 8008796:	d13a      	bne.n	800880e <__gethex+0x3fe>
 8008798:	f045 0520 	orr.w	r5, r5, #32
 800879c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800879e:	601c      	str	r4, [r3, #0]
 80087a0:	9b02      	ldr	r3, [sp, #8]
 80087a2:	601f      	str	r7, [r3, #0]
 80087a4:	e6b0      	b.n	8008508 <__gethex+0xf8>
 80087a6:	4299      	cmp	r1, r3
 80087a8:	f843 cc04 	str.w	ip, [r3, #-4]
 80087ac:	d8d9      	bhi.n	8008762 <__gethex+0x352>
 80087ae:	68a3      	ldr	r3, [r4, #8]
 80087b0:	459b      	cmp	fp, r3
 80087b2:	db17      	blt.n	80087e4 <__gethex+0x3d4>
 80087b4:	6861      	ldr	r1, [r4, #4]
 80087b6:	9801      	ldr	r0, [sp, #4]
 80087b8:	3101      	adds	r1, #1
 80087ba:	f000 f9c3 	bl	8008b44 <_Balloc>
 80087be:	4681      	mov	r9, r0
 80087c0:	b918      	cbnz	r0, 80087ca <__gethex+0x3ba>
 80087c2:	4602      	mov	r2, r0
 80087c4:	2184      	movs	r1, #132	@ 0x84
 80087c6:	4b19      	ldr	r3, [pc, #100]	@ (800882c <__gethex+0x41c>)
 80087c8:	e6c5      	b.n	8008556 <__gethex+0x146>
 80087ca:	6922      	ldr	r2, [r4, #16]
 80087cc:	f104 010c 	add.w	r1, r4, #12
 80087d0:	3202      	adds	r2, #2
 80087d2:	0092      	lsls	r2, r2, #2
 80087d4:	300c      	adds	r0, #12
 80087d6:	f7fe ff00 	bl	80075da <memcpy>
 80087da:	4621      	mov	r1, r4
 80087dc:	9801      	ldr	r0, [sp, #4]
 80087de:	f000 f9f1 	bl	8008bc4 <_Bfree>
 80087e2:	464c      	mov	r4, r9
 80087e4:	6923      	ldr	r3, [r4, #16]
 80087e6:	1c5a      	adds	r2, r3, #1
 80087e8:	6122      	str	r2, [r4, #16]
 80087ea:	2201      	movs	r2, #1
 80087ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80087f0:	615a      	str	r2, [r3, #20]
 80087f2:	e7be      	b.n	8008772 <__gethex+0x362>
 80087f4:	6922      	ldr	r2, [r4, #16]
 80087f6:	455a      	cmp	r2, fp
 80087f8:	dd0b      	ble.n	8008812 <__gethex+0x402>
 80087fa:	2101      	movs	r1, #1
 80087fc:	4620      	mov	r0, r4
 80087fe:	f7ff fd9f 	bl	8008340 <rshift>
 8008802:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008806:	3701      	adds	r7, #1
 8008808:	42bb      	cmp	r3, r7
 800880a:	f6ff aee0 	blt.w	80085ce <__gethex+0x1be>
 800880e:	2501      	movs	r5, #1
 8008810:	e7c2      	b.n	8008798 <__gethex+0x388>
 8008812:	f016 061f 	ands.w	r6, r6, #31
 8008816:	d0fa      	beq.n	800880e <__gethex+0x3fe>
 8008818:	4453      	add	r3, sl
 800881a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800881e:	f000 fa83 	bl	8008d28 <__hi0bits>
 8008822:	f1c6 0620 	rsb	r6, r6, #32
 8008826:	42b0      	cmp	r0, r6
 8008828:	dbe7      	blt.n	80087fa <__gethex+0x3ea>
 800882a:	e7f0      	b.n	800880e <__gethex+0x3fe>
 800882c:	0800c4e6 	.word	0x0800c4e6

08008830 <L_shift>:
 8008830:	f1c2 0208 	rsb	r2, r2, #8
 8008834:	0092      	lsls	r2, r2, #2
 8008836:	b570      	push	{r4, r5, r6, lr}
 8008838:	f1c2 0620 	rsb	r6, r2, #32
 800883c:	6843      	ldr	r3, [r0, #4]
 800883e:	6804      	ldr	r4, [r0, #0]
 8008840:	fa03 f506 	lsl.w	r5, r3, r6
 8008844:	432c      	orrs	r4, r5
 8008846:	40d3      	lsrs	r3, r2
 8008848:	6004      	str	r4, [r0, #0]
 800884a:	f840 3f04 	str.w	r3, [r0, #4]!
 800884e:	4288      	cmp	r0, r1
 8008850:	d3f4      	bcc.n	800883c <L_shift+0xc>
 8008852:	bd70      	pop	{r4, r5, r6, pc}

08008854 <__match>:
 8008854:	b530      	push	{r4, r5, lr}
 8008856:	6803      	ldr	r3, [r0, #0]
 8008858:	3301      	adds	r3, #1
 800885a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800885e:	b914      	cbnz	r4, 8008866 <__match+0x12>
 8008860:	6003      	str	r3, [r0, #0]
 8008862:	2001      	movs	r0, #1
 8008864:	bd30      	pop	{r4, r5, pc}
 8008866:	f813 2b01 	ldrb.w	r2, [r3], #1
 800886a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800886e:	2d19      	cmp	r5, #25
 8008870:	bf98      	it	ls
 8008872:	3220      	addls	r2, #32
 8008874:	42a2      	cmp	r2, r4
 8008876:	d0f0      	beq.n	800885a <__match+0x6>
 8008878:	2000      	movs	r0, #0
 800887a:	e7f3      	b.n	8008864 <__match+0x10>

0800887c <__hexnan>:
 800887c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008880:	2500      	movs	r5, #0
 8008882:	680b      	ldr	r3, [r1, #0]
 8008884:	4682      	mov	sl, r0
 8008886:	115e      	asrs	r6, r3, #5
 8008888:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800888c:	f013 031f 	ands.w	r3, r3, #31
 8008890:	bf18      	it	ne
 8008892:	3604      	addne	r6, #4
 8008894:	1f37      	subs	r7, r6, #4
 8008896:	4690      	mov	r8, r2
 8008898:	46b9      	mov	r9, r7
 800889a:	463c      	mov	r4, r7
 800889c:	46ab      	mov	fp, r5
 800889e:	b087      	sub	sp, #28
 80088a0:	6801      	ldr	r1, [r0, #0]
 80088a2:	9301      	str	r3, [sp, #4]
 80088a4:	f846 5c04 	str.w	r5, [r6, #-4]
 80088a8:	9502      	str	r5, [sp, #8]
 80088aa:	784a      	ldrb	r2, [r1, #1]
 80088ac:	1c4b      	adds	r3, r1, #1
 80088ae:	9303      	str	r3, [sp, #12]
 80088b0:	b342      	cbz	r2, 8008904 <__hexnan+0x88>
 80088b2:	4610      	mov	r0, r2
 80088b4:	9105      	str	r1, [sp, #20]
 80088b6:	9204      	str	r2, [sp, #16]
 80088b8:	f7ff fd95 	bl	80083e6 <__hexdig_fun>
 80088bc:	2800      	cmp	r0, #0
 80088be:	d151      	bne.n	8008964 <__hexnan+0xe8>
 80088c0:	9a04      	ldr	r2, [sp, #16]
 80088c2:	9905      	ldr	r1, [sp, #20]
 80088c4:	2a20      	cmp	r2, #32
 80088c6:	d818      	bhi.n	80088fa <__hexnan+0x7e>
 80088c8:	9b02      	ldr	r3, [sp, #8]
 80088ca:	459b      	cmp	fp, r3
 80088cc:	dd13      	ble.n	80088f6 <__hexnan+0x7a>
 80088ce:	454c      	cmp	r4, r9
 80088d0:	d206      	bcs.n	80088e0 <__hexnan+0x64>
 80088d2:	2d07      	cmp	r5, #7
 80088d4:	dc04      	bgt.n	80088e0 <__hexnan+0x64>
 80088d6:	462a      	mov	r2, r5
 80088d8:	4649      	mov	r1, r9
 80088da:	4620      	mov	r0, r4
 80088dc:	f7ff ffa8 	bl	8008830 <L_shift>
 80088e0:	4544      	cmp	r4, r8
 80088e2:	d952      	bls.n	800898a <__hexnan+0x10e>
 80088e4:	2300      	movs	r3, #0
 80088e6:	f1a4 0904 	sub.w	r9, r4, #4
 80088ea:	f844 3c04 	str.w	r3, [r4, #-4]
 80088ee:	461d      	mov	r5, r3
 80088f0:	464c      	mov	r4, r9
 80088f2:	f8cd b008 	str.w	fp, [sp, #8]
 80088f6:	9903      	ldr	r1, [sp, #12]
 80088f8:	e7d7      	b.n	80088aa <__hexnan+0x2e>
 80088fa:	2a29      	cmp	r2, #41	@ 0x29
 80088fc:	d157      	bne.n	80089ae <__hexnan+0x132>
 80088fe:	3102      	adds	r1, #2
 8008900:	f8ca 1000 	str.w	r1, [sl]
 8008904:	f1bb 0f00 	cmp.w	fp, #0
 8008908:	d051      	beq.n	80089ae <__hexnan+0x132>
 800890a:	454c      	cmp	r4, r9
 800890c:	d206      	bcs.n	800891c <__hexnan+0xa0>
 800890e:	2d07      	cmp	r5, #7
 8008910:	dc04      	bgt.n	800891c <__hexnan+0xa0>
 8008912:	462a      	mov	r2, r5
 8008914:	4649      	mov	r1, r9
 8008916:	4620      	mov	r0, r4
 8008918:	f7ff ff8a 	bl	8008830 <L_shift>
 800891c:	4544      	cmp	r4, r8
 800891e:	d936      	bls.n	800898e <__hexnan+0x112>
 8008920:	4623      	mov	r3, r4
 8008922:	f1a8 0204 	sub.w	r2, r8, #4
 8008926:	f853 1b04 	ldr.w	r1, [r3], #4
 800892a:	429f      	cmp	r7, r3
 800892c:	f842 1f04 	str.w	r1, [r2, #4]!
 8008930:	d2f9      	bcs.n	8008926 <__hexnan+0xaa>
 8008932:	1b3b      	subs	r3, r7, r4
 8008934:	f023 0303 	bic.w	r3, r3, #3
 8008938:	3304      	adds	r3, #4
 800893a:	3401      	adds	r4, #1
 800893c:	3e03      	subs	r6, #3
 800893e:	42b4      	cmp	r4, r6
 8008940:	bf88      	it	hi
 8008942:	2304      	movhi	r3, #4
 8008944:	2200      	movs	r2, #0
 8008946:	4443      	add	r3, r8
 8008948:	f843 2b04 	str.w	r2, [r3], #4
 800894c:	429f      	cmp	r7, r3
 800894e:	d2fb      	bcs.n	8008948 <__hexnan+0xcc>
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	b91b      	cbnz	r3, 800895c <__hexnan+0xe0>
 8008954:	4547      	cmp	r7, r8
 8008956:	d128      	bne.n	80089aa <__hexnan+0x12e>
 8008958:	2301      	movs	r3, #1
 800895a:	603b      	str	r3, [r7, #0]
 800895c:	2005      	movs	r0, #5
 800895e:	b007      	add	sp, #28
 8008960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008964:	3501      	adds	r5, #1
 8008966:	2d08      	cmp	r5, #8
 8008968:	f10b 0b01 	add.w	fp, fp, #1
 800896c:	dd06      	ble.n	800897c <__hexnan+0x100>
 800896e:	4544      	cmp	r4, r8
 8008970:	d9c1      	bls.n	80088f6 <__hexnan+0x7a>
 8008972:	2300      	movs	r3, #0
 8008974:	2501      	movs	r5, #1
 8008976:	f844 3c04 	str.w	r3, [r4, #-4]
 800897a:	3c04      	subs	r4, #4
 800897c:	6822      	ldr	r2, [r4, #0]
 800897e:	f000 000f 	and.w	r0, r0, #15
 8008982:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008986:	6020      	str	r0, [r4, #0]
 8008988:	e7b5      	b.n	80088f6 <__hexnan+0x7a>
 800898a:	2508      	movs	r5, #8
 800898c:	e7b3      	b.n	80088f6 <__hexnan+0x7a>
 800898e:	9b01      	ldr	r3, [sp, #4]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d0dd      	beq.n	8008950 <__hexnan+0xd4>
 8008994:	f04f 32ff 	mov.w	r2, #4294967295
 8008998:	f1c3 0320 	rsb	r3, r3, #32
 800899c:	40da      	lsrs	r2, r3
 800899e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80089a2:	4013      	ands	r3, r2
 80089a4:	f846 3c04 	str.w	r3, [r6, #-4]
 80089a8:	e7d2      	b.n	8008950 <__hexnan+0xd4>
 80089aa:	3f04      	subs	r7, #4
 80089ac:	e7d0      	b.n	8008950 <__hexnan+0xd4>
 80089ae:	2004      	movs	r0, #4
 80089b0:	e7d5      	b.n	800895e <__hexnan+0xe2>
	...

080089b4 <malloc>:
 80089b4:	4b02      	ldr	r3, [pc, #8]	@ (80089c0 <malloc+0xc>)
 80089b6:	4601      	mov	r1, r0
 80089b8:	6818      	ldr	r0, [r3, #0]
 80089ba:	f000 b825 	b.w	8008a08 <_malloc_r>
 80089be:	bf00      	nop
 80089c0:	2000019c 	.word	0x2000019c

080089c4 <sbrk_aligned>:
 80089c4:	b570      	push	{r4, r5, r6, lr}
 80089c6:	4e0f      	ldr	r6, [pc, #60]	@ (8008a04 <sbrk_aligned+0x40>)
 80089c8:	460c      	mov	r4, r1
 80089ca:	6831      	ldr	r1, [r6, #0]
 80089cc:	4605      	mov	r5, r0
 80089ce:	b911      	cbnz	r1, 80089d6 <sbrk_aligned+0x12>
 80089d0:	f000 ff84 	bl	80098dc <_sbrk_r>
 80089d4:	6030      	str	r0, [r6, #0]
 80089d6:	4621      	mov	r1, r4
 80089d8:	4628      	mov	r0, r5
 80089da:	f000 ff7f 	bl	80098dc <_sbrk_r>
 80089de:	1c43      	adds	r3, r0, #1
 80089e0:	d103      	bne.n	80089ea <sbrk_aligned+0x26>
 80089e2:	f04f 34ff 	mov.w	r4, #4294967295
 80089e6:	4620      	mov	r0, r4
 80089e8:	bd70      	pop	{r4, r5, r6, pc}
 80089ea:	1cc4      	adds	r4, r0, #3
 80089ec:	f024 0403 	bic.w	r4, r4, #3
 80089f0:	42a0      	cmp	r0, r4
 80089f2:	d0f8      	beq.n	80089e6 <sbrk_aligned+0x22>
 80089f4:	1a21      	subs	r1, r4, r0
 80089f6:	4628      	mov	r0, r5
 80089f8:	f000 ff70 	bl	80098dc <_sbrk_r>
 80089fc:	3001      	adds	r0, #1
 80089fe:	d1f2      	bne.n	80089e6 <sbrk_aligned+0x22>
 8008a00:	e7ef      	b.n	80089e2 <sbrk_aligned+0x1e>
 8008a02:	bf00      	nop
 8008a04:	20000bb4 	.word	0x20000bb4

08008a08 <_malloc_r>:
 8008a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a0c:	1ccd      	adds	r5, r1, #3
 8008a0e:	f025 0503 	bic.w	r5, r5, #3
 8008a12:	3508      	adds	r5, #8
 8008a14:	2d0c      	cmp	r5, #12
 8008a16:	bf38      	it	cc
 8008a18:	250c      	movcc	r5, #12
 8008a1a:	2d00      	cmp	r5, #0
 8008a1c:	4606      	mov	r6, r0
 8008a1e:	db01      	blt.n	8008a24 <_malloc_r+0x1c>
 8008a20:	42a9      	cmp	r1, r5
 8008a22:	d904      	bls.n	8008a2e <_malloc_r+0x26>
 8008a24:	230c      	movs	r3, #12
 8008a26:	6033      	str	r3, [r6, #0]
 8008a28:	2000      	movs	r0, #0
 8008a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b04 <_malloc_r+0xfc>
 8008a32:	f000 f87b 	bl	8008b2c <__malloc_lock>
 8008a36:	f8d8 3000 	ldr.w	r3, [r8]
 8008a3a:	461c      	mov	r4, r3
 8008a3c:	bb44      	cbnz	r4, 8008a90 <_malloc_r+0x88>
 8008a3e:	4629      	mov	r1, r5
 8008a40:	4630      	mov	r0, r6
 8008a42:	f7ff ffbf 	bl	80089c4 <sbrk_aligned>
 8008a46:	1c43      	adds	r3, r0, #1
 8008a48:	4604      	mov	r4, r0
 8008a4a:	d158      	bne.n	8008afe <_malloc_r+0xf6>
 8008a4c:	f8d8 4000 	ldr.w	r4, [r8]
 8008a50:	4627      	mov	r7, r4
 8008a52:	2f00      	cmp	r7, #0
 8008a54:	d143      	bne.n	8008ade <_malloc_r+0xd6>
 8008a56:	2c00      	cmp	r4, #0
 8008a58:	d04b      	beq.n	8008af2 <_malloc_r+0xea>
 8008a5a:	6823      	ldr	r3, [r4, #0]
 8008a5c:	4639      	mov	r1, r7
 8008a5e:	4630      	mov	r0, r6
 8008a60:	eb04 0903 	add.w	r9, r4, r3
 8008a64:	f000 ff3a 	bl	80098dc <_sbrk_r>
 8008a68:	4581      	cmp	r9, r0
 8008a6a:	d142      	bne.n	8008af2 <_malloc_r+0xea>
 8008a6c:	6821      	ldr	r1, [r4, #0]
 8008a6e:	4630      	mov	r0, r6
 8008a70:	1a6d      	subs	r5, r5, r1
 8008a72:	4629      	mov	r1, r5
 8008a74:	f7ff ffa6 	bl	80089c4 <sbrk_aligned>
 8008a78:	3001      	adds	r0, #1
 8008a7a:	d03a      	beq.n	8008af2 <_malloc_r+0xea>
 8008a7c:	6823      	ldr	r3, [r4, #0]
 8008a7e:	442b      	add	r3, r5
 8008a80:	6023      	str	r3, [r4, #0]
 8008a82:	f8d8 3000 	ldr.w	r3, [r8]
 8008a86:	685a      	ldr	r2, [r3, #4]
 8008a88:	bb62      	cbnz	r2, 8008ae4 <_malloc_r+0xdc>
 8008a8a:	f8c8 7000 	str.w	r7, [r8]
 8008a8e:	e00f      	b.n	8008ab0 <_malloc_r+0xa8>
 8008a90:	6822      	ldr	r2, [r4, #0]
 8008a92:	1b52      	subs	r2, r2, r5
 8008a94:	d420      	bmi.n	8008ad8 <_malloc_r+0xd0>
 8008a96:	2a0b      	cmp	r2, #11
 8008a98:	d917      	bls.n	8008aca <_malloc_r+0xc2>
 8008a9a:	1961      	adds	r1, r4, r5
 8008a9c:	42a3      	cmp	r3, r4
 8008a9e:	6025      	str	r5, [r4, #0]
 8008aa0:	bf18      	it	ne
 8008aa2:	6059      	strne	r1, [r3, #4]
 8008aa4:	6863      	ldr	r3, [r4, #4]
 8008aa6:	bf08      	it	eq
 8008aa8:	f8c8 1000 	streq.w	r1, [r8]
 8008aac:	5162      	str	r2, [r4, r5]
 8008aae:	604b      	str	r3, [r1, #4]
 8008ab0:	4630      	mov	r0, r6
 8008ab2:	f000 f841 	bl	8008b38 <__malloc_unlock>
 8008ab6:	f104 000b 	add.w	r0, r4, #11
 8008aba:	1d23      	adds	r3, r4, #4
 8008abc:	f020 0007 	bic.w	r0, r0, #7
 8008ac0:	1ac2      	subs	r2, r0, r3
 8008ac2:	bf1c      	itt	ne
 8008ac4:	1a1b      	subne	r3, r3, r0
 8008ac6:	50a3      	strne	r3, [r4, r2]
 8008ac8:	e7af      	b.n	8008a2a <_malloc_r+0x22>
 8008aca:	6862      	ldr	r2, [r4, #4]
 8008acc:	42a3      	cmp	r3, r4
 8008ace:	bf0c      	ite	eq
 8008ad0:	f8c8 2000 	streq.w	r2, [r8]
 8008ad4:	605a      	strne	r2, [r3, #4]
 8008ad6:	e7eb      	b.n	8008ab0 <_malloc_r+0xa8>
 8008ad8:	4623      	mov	r3, r4
 8008ada:	6864      	ldr	r4, [r4, #4]
 8008adc:	e7ae      	b.n	8008a3c <_malloc_r+0x34>
 8008ade:	463c      	mov	r4, r7
 8008ae0:	687f      	ldr	r7, [r7, #4]
 8008ae2:	e7b6      	b.n	8008a52 <_malloc_r+0x4a>
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	42a3      	cmp	r3, r4
 8008aea:	d1fb      	bne.n	8008ae4 <_malloc_r+0xdc>
 8008aec:	2300      	movs	r3, #0
 8008aee:	6053      	str	r3, [r2, #4]
 8008af0:	e7de      	b.n	8008ab0 <_malloc_r+0xa8>
 8008af2:	230c      	movs	r3, #12
 8008af4:	4630      	mov	r0, r6
 8008af6:	6033      	str	r3, [r6, #0]
 8008af8:	f000 f81e 	bl	8008b38 <__malloc_unlock>
 8008afc:	e794      	b.n	8008a28 <_malloc_r+0x20>
 8008afe:	6005      	str	r5, [r0, #0]
 8008b00:	e7d6      	b.n	8008ab0 <_malloc_r+0xa8>
 8008b02:	bf00      	nop
 8008b04:	20000bb8 	.word	0x20000bb8

08008b08 <__ascii_mbtowc>:
 8008b08:	b082      	sub	sp, #8
 8008b0a:	b901      	cbnz	r1, 8008b0e <__ascii_mbtowc+0x6>
 8008b0c:	a901      	add	r1, sp, #4
 8008b0e:	b142      	cbz	r2, 8008b22 <__ascii_mbtowc+0x1a>
 8008b10:	b14b      	cbz	r3, 8008b26 <__ascii_mbtowc+0x1e>
 8008b12:	7813      	ldrb	r3, [r2, #0]
 8008b14:	600b      	str	r3, [r1, #0]
 8008b16:	7812      	ldrb	r2, [r2, #0]
 8008b18:	1e10      	subs	r0, r2, #0
 8008b1a:	bf18      	it	ne
 8008b1c:	2001      	movne	r0, #1
 8008b1e:	b002      	add	sp, #8
 8008b20:	4770      	bx	lr
 8008b22:	4610      	mov	r0, r2
 8008b24:	e7fb      	b.n	8008b1e <__ascii_mbtowc+0x16>
 8008b26:	f06f 0001 	mvn.w	r0, #1
 8008b2a:	e7f8      	b.n	8008b1e <__ascii_mbtowc+0x16>

08008b2c <__malloc_lock>:
 8008b2c:	4801      	ldr	r0, [pc, #4]	@ (8008b34 <__malloc_lock+0x8>)
 8008b2e:	f7fe bd44 	b.w	80075ba <__retarget_lock_acquire_recursive>
 8008b32:	bf00      	nop
 8008b34:	20000bb0 	.word	0x20000bb0

08008b38 <__malloc_unlock>:
 8008b38:	4801      	ldr	r0, [pc, #4]	@ (8008b40 <__malloc_unlock+0x8>)
 8008b3a:	f7fe bd3f 	b.w	80075bc <__retarget_lock_release_recursive>
 8008b3e:	bf00      	nop
 8008b40:	20000bb0 	.word	0x20000bb0

08008b44 <_Balloc>:
 8008b44:	b570      	push	{r4, r5, r6, lr}
 8008b46:	69c6      	ldr	r6, [r0, #28]
 8008b48:	4604      	mov	r4, r0
 8008b4a:	460d      	mov	r5, r1
 8008b4c:	b976      	cbnz	r6, 8008b6c <_Balloc+0x28>
 8008b4e:	2010      	movs	r0, #16
 8008b50:	f7ff ff30 	bl	80089b4 <malloc>
 8008b54:	4602      	mov	r2, r0
 8008b56:	61e0      	str	r0, [r4, #28]
 8008b58:	b920      	cbnz	r0, 8008b64 <_Balloc+0x20>
 8008b5a:	216b      	movs	r1, #107	@ 0x6b
 8008b5c:	4b17      	ldr	r3, [pc, #92]	@ (8008bbc <_Balloc+0x78>)
 8008b5e:	4818      	ldr	r0, [pc, #96]	@ (8008bc0 <_Balloc+0x7c>)
 8008b60:	f000 fecc 	bl	80098fc <__assert_func>
 8008b64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b68:	6006      	str	r6, [r0, #0]
 8008b6a:	60c6      	str	r6, [r0, #12]
 8008b6c:	69e6      	ldr	r6, [r4, #28]
 8008b6e:	68f3      	ldr	r3, [r6, #12]
 8008b70:	b183      	cbz	r3, 8008b94 <_Balloc+0x50>
 8008b72:	69e3      	ldr	r3, [r4, #28]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b7a:	b9b8      	cbnz	r0, 8008bac <_Balloc+0x68>
 8008b7c:	2101      	movs	r1, #1
 8008b7e:	fa01 f605 	lsl.w	r6, r1, r5
 8008b82:	1d72      	adds	r2, r6, #5
 8008b84:	4620      	mov	r0, r4
 8008b86:	0092      	lsls	r2, r2, #2
 8008b88:	f000 fed6 	bl	8009938 <_calloc_r>
 8008b8c:	b160      	cbz	r0, 8008ba8 <_Balloc+0x64>
 8008b8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008b92:	e00e      	b.n	8008bb2 <_Balloc+0x6e>
 8008b94:	2221      	movs	r2, #33	@ 0x21
 8008b96:	2104      	movs	r1, #4
 8008b98:	4620      	mov	r0, r4
 8008b9a:	f000 fecd 	bl	8009938 <_calloc_r>
 8008b9e:	69e3      	ldr	r3, [r4, #28]
 8008ba0:	60f0      	str	r0, [r6, #12]
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d1e4      	bne.n	8008b72 <_Balloc+0x2e>
 8008ba8:	2000      	movs	r0, #0
 8008baa:	bd70      	pop	{r4, r5, r6, pc}
 8008bac:	6802      	ldr	r2, [r0, #0]
 8008bae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008bb8:	e7f7      	b.n	8008baa <_Balloc+0x66>
 8008bba:	bf00      	nop
 8008bbc:	0800c477 	.word	0x0800c477
 8008bc0:	0800c557 	.word	0x0800c557

08008bc4 <_Bfree>:
 8008bc4:	b570      	push	{r4, r5, r6, lr}
 8008bc6:	69c6      	ldr	r6, [r0, #28]
 8008bc8:	4605      	mov	r5, r0
 8008bca:	460c      	mov	r4, r1
 8008bcc:	b976      	cbnz	r6, 8008bec <_Bfree+0x28>
 8008bce:	2010      	movs	r0, #16
 8008bd0:	f7ff fef0 	bl	80089b4 <malloc>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	61e8      	str	r0, [r5, #28]
 8008bd8:	b920      	cbnz	r0, 8008be4 <_Bfree+0x20>
 8008bda:	218f      	movs	r1, #143	@ 0x8f
 8008bdc:	4b08      	ldr	r3, [pc, #32]	@ (8008c00 <_Bfree+0x3c>)
 8008bde:	4809      	ldr	r0, [pc, #36]	@ (8008c04 <_Bfree+0x40>)
 8008be0:	f000 fe8c 	bl	80098fc <__assert_func>
 8008be4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008be8:	6006      	str	r6, [r0, #0]
 8008bea:	60c6      	str	r6, [r0, #12]
 8008bec:	b13c      	cbz	r4, 8008bfe <_Bfree+0x3a>
 8008bee:	69eb      	ldr	r3, [r5, #28]
 8008bf0:	6862      	ldr	r2, [r4, #4]
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008bf8:	6021      	str	r1, [r4, #0]
 8008bfa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008bfe:	bd70      	pop	{r4, r5, r6, pc}
 8008c00:	0800c477 	.word	0x0800c477
 8008c04:	0800c557 	.word	0x0800c557

08008c08 <__multadd>:
 8008c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c0c:	4607      	mov	r7, r0
 8008c0e:	460c      	mov	r4, r1
 8008c10:	461e      	mov	r6, r3
 8008c12:	2000      	movs	r0, #0
 8008c14:	690d      	ldr	r5, [r1, #16]
 8008c16:	f101 0c14 	add.w	ip, r1, #20
 8008c1a:	f8dc 3000 	ldr.w	r3, [ip]
 8008c1e:	3001      	adds	r0, #1
 8008c20:	b299      	uxth	r1, r3
 8008c22:	fb02 6101 	mla	r1, r2, r1, r6
 8008c26:	0c1e      	lsrs	r6, r3, #16
 8008c28:	0c0b      	lsrs	r3, r1, #16
 8008c2a:	fb02 3306 	mla	r3, r2, r6, r3
 8008c2e:	b289      	uxth	r1, r1
 8008c30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008c34:	4285      	cmp	r5, r0
 8008c36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008c3a:	f84c 1b04 	str.w	r1, [ip], #4
 8008c3e:	dcec      	bgt.n	8008c1a <__multadd+0x12>
 8008c40:	b30e      	cbz	r6, 8008c86 <__multadd+0x7e>
 8008c42:	68a3      	ldr	r3, [r4, #8]
 8008c44:	42ab      	cmp	r3, r5
 8008c46:	dc19      	bgt.n	8008c7c <__multadd+0x74>
 8008c48:	6861      	ldr	r1, [r4, #4]
 8008c4a:	4638      	mov	r0, r7
 8008c4c:	3101      	adds	r1, #1
 8008c4e:	f7ff ff79 	bl	8008b44 <_Balloc>
 8008c52:	4680      	mov	r8, r0
 8008c54:	b928      	cbnz	r0, 8008c62 <__multadd+0x5a>
 8008c56:	4602      	mov	r2, r0
 8008c58:	21ba      	movs	r1, #186	@ 0xba
 8008c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8008c8c <__multadd+0x84>)
 8008c5c:	480c      	ldr	r0, [pc, #48]	@ (8008c90 <__multadd+0x88>)
 8008c5e:	f000 fe4d 	bl	80098fc <__assert_func>
 8008c62:	6922      	ldr	r2, [r4, #16]
 8008c64:	f104 010c 	add.w	r1, r4, #12
 8008c68:	3202      	adds	r2, #2
 8008c6a:	0092      	lsls	r2, r2, #2
 8008c6c:	300c      	adds	r0, #12
 8008c6e:	f7fe fcb4 	bl	80075da <memcpy>
 8008c72:	4621      	mov	r1, r4
 8008c74:	4638      	mov	r0, r7
 8008c76:	f7ff ffa5 	bl	8008bc4 <_Bfree>
 8008c7a:	4644      	mov	r4, r8
 8008c7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c80:	3501      	adds	r5, #1
 8008c82:	615e      	str	r6, [r3, #20]
 8008c84:	6125      	str	r5, [r4, #16]
 8008c86:	4620      	mov	r0, r4
 8008c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c8c:	0800c4e6 	.word	0x0800c4e6
 8008c90:	0800c557 	.word	0x0800c557

08008c94 <__s2b>:
 8008c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c98:	4615      	mov	r5, r2
 8008c9a:	2209      	movs	r2, #9
 8008c9c:	461f      	mov	r7, r3
 8008c9e:	3308      	adds	r3, #8
 8008ca0:	460c      	mov	r4, r1
 8008ca2:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ca6:	4606      	mov	r6, r0
 8008ca8:	2201      	movs	r2, #1
 8008caa:	2100      	movs	r1, #0
 8008cac:	429a      	cmp	r2, r3
 8008cae:	db09      	blt.n	8008cc4 <__s2b+0x30>
 8008cb0:	4630      	mov	r0, r6
 8008cb2:	f7ff ff47 	bl	8008b44 <_Balloc>
 8008cb6:	b940      	cbnz	r0, 8008cca <__s2b+0x36>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	21d3      	movs	r1, #211	@ 0xd3
 8008cbc:	4b18      	ldr	r3, [pc, #96]	@ (8008d20 <__s2b+0x8c>)
 8008cbe:	4819      	ldr	r0, [pc, #100]	@ (8008d24 <__s2b+0x90>)
 8008cc0:	f000 fe1c 	bl	80098fc <__assert_func>
 8008cc4:	0052      	lsls	r2, r2, #1
 8008cc6:	3101      	adds	r1, #1
 8008cc8:	e7f0      	b.n	8008cac <__s2b+0x18>
 8008cca:	9b08      	ldr	r3, [sp, #32]
 8008ccc:	2d09      	cmp	r5, #9
 8008cce:	6143      	str	r3, [r0, #20]
 8008cd0:	f04f 0301 	mov.w	r3, #1
 8008cd4:	6103      	str	r3, [r0, #16]
 8008cd6:	dd16      	ble.n	8008d06 <__s2b+0x72>
 8008cd8:	f104 0909 	add.w	r9, r4, #9
 8008cdc:	46c8      	mov	r8, r9
 8008cde:	442c      	add	r4, r5
 8008ce0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008ce4:	4601      	mov	r1, r0
 8008ce6:	220a      	movs	r2, #10
 8008ce8:	4630      	mov	r0, r6
 8008cea:	3b30      	subs	r3, #48	@ 0x30
 8008cec:	f7ff ff8c 	bl	8008c08 <__multadd>
 8008cf0:	45a0      	cmp	r8, r4
 8008cf2:	d1f5      	bne.n	8008ce0 <__s2b+0x4c>
 8008cf4:	f1a5 0408 	sub.w	r4, r5, #8
 8008cf8:	444c      	add	r4, r9
 8008cfa:	1b2d      	subs	r5, r5, r4
 8008cfc:	1963      	adds	r3, r4, r5
 8008cfe:	42bb      	cmp	r3, r7
 8008d00:	db04      	blt.n	8008d0c <__s2b+0x78>
 8008d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d06:	2509      	movs	r5, #9
 8008d08:	340a      	adds	r4, #10
 8008d0a:	e7f6      	b.n	8008cfa <__s2b+0x66>
 8008d0c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008d10:	4601      	mov	r1, r0
 8008d12:	220a      	movs	r2, #10
 8008d14:	4630      	mov	r0, r6
 8008d16:	3b30      	subs	r3, #48	@ 0x30
 8008d18:	f7ff ff76 	bl	8008c08 <__multadd>
 8008d1c:	e7ee      	b.n	8008cfc <__s2b+0x68>
 8008d1e:	bf00      	nop
 8008d20:	0800c4e6 	.word	0x0800c4e6
 8008d24:	0800c557 	.word	0x0800c557

08008d28 <__hi0bits>:
 8008d28:	4603      	mov	r3, r0
 8008d2a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008d2e:	bf3a      	itte	cc
 8008d30:	0403      	lslcc	r3, r0, #16
 8008d32:	2010      	movcc	r0, #16
 8008d34:	2000      	movcs	r0, #0
 8008d36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d3a:	bf3c      	itt	cc
 8008d3c:	021b      	lslcc	r3, r3, #8
 8008d3e:	3008      	addcc	r0, #8
 8008d40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d44:	bf3c      	itt	cc
 8008d46:	011b      	lslcc	r3, r3, #4
 8008d48:	3004      	addcc	r0, #4
 8008d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d4e:	bf3c      	itt	cc
 8008d50:	009b      	lslcc	r3, r3, #2
 8008d52:	3002      	addcc	r0, #2
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	db05      	blt.n	8008d64 <__hi0bits+0x3c>
 8008d58:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008d5c:	f100 0001 	add.w	r0, r0, #1
 8008d60:	bf08      	it	eq
 8008d62:	2020      	moveq	r0, #32
 8008d64:	4770      	bx	lr

08008d66 <__lo0bits>:
 8008d66:	6803      	ldr	r3, [r0, #0]
 8008d68:	4602      	mov	r2, r0
 8008d6a:	f013 0007 	ands.w	r0, r3, #7
 8008d6e:	d00b      	beq.n	8008d88 <__lo0bits+0x22>
 8008d70:	07d9      	lsls	r1, r3, #31
 8008d72:	d421      	bmi.n	8008db8 <__lo0bits+0x52>
 8008d74:	0798      	lsls	r0, r3, #30
 8008d76:	bf49      	itett	mi
 8008d78:	085b      	lsrmi	r3, r3, #1
 8008d7a:	089b      	lsrpl	r3, r3, #2
 8008d7c:	2001      	movmi	r0, #1
 8008d7e:	6013      	strmi	r3, [r2, #0]
 8008d80:	bf5c      	itt	pl
 8008d82:	2002      	movpl	r0, #2
 8008d84:	6013      	strpl	r3, [r2, #0]
 8008d86:	4770      	bx	lr
 8008d88:	b299      	uxth	r1, r3
 8008d8a:	b909      	cbnz	r1, 8008d90 <__lo0bits+0x2a>
 8008d8c:	2010      	movs	r0, #16
 8008d8e:	0c1b      	lsrs	r3, r3, #16
 8008d90:	b2d9      	uxtb	r1, r3
 8008d92:	b909      	cbnz	r1, 8008d98 <__lo0bits+0x32>
 8008d94:	3008      	adds	r0, #8
 8008d96:	0a1b      	lsrs	r3, r3, #8
 8008d98:	0719      	lsls	r1, r3, #28
 8008d9a:	bf04      	itt	eq
 8008d9c:	091b      	lsreq	r3, r3, #4
 8008d9e:	3004      	addeq	r0, #4
 8008da0:	0799      	lsls	r1, r3, #30
 8008da2:	bf04      	itt	eq
 8008da4:	089b      	lsreq	r3, r3, #2
 8008da6:	3002      	addeq	r0, #2
 8008da8:	07d9      	lsls	r1, r3, #31
 8008daa:	d403      	bmi.n	8008db4 <__lo0bits+0x4e>
 8008dac:	085b      	lsrs	r3, r3, #1
 8008dae:	f100 0001 	add.w	r0, r0, #1
 8008db2:	d003      	beq.n	8008dbc <__lo0bits+0x56>
 8008db4:	6013      	str	r3, [r2, #0]
 8008db6:	4770      	bx	lr
 8008db8:	2000      	movs	r0, #0
 8008dba:	4770      	bx	lr
 8008dbc:	2020      	movs	r0, #32
 8008dbe:	4770      	bx	lr

08008dc0 <__i2b>:
 8008dc0:	b510      	push	{r4, lr}
 8008dc2:	460c      	mov	r4, r1
 8008dc4:	2101      	movs	r1, #1
 8008dc6:	f7ff febd 	bl	8008b44 <_Balloc>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	b928      	cbnz	r0, 8008dda <__i2b+0x1a>
 8008dce:	f240 1145 	movw	r1, #325	@ 0x145
 8008dd2:	4b04      	ldr	r3, [pc, #16]	@ (8008de4 <__i2b+0x24>)
 8008dd4:	4804      	ldr	r0, [pc, #16]	@ (8008de8 <__i2b+0x28>)
 8008dd6:	f000 fd91 	bl	80098fc <__assert_func>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	6144      	str	r4, [r0, #20]
 8008dde:	6103      	str	r3, [r0, #16]
 8008de0:	bd10      	pop	{r4, pc}
 8008de2:	bf00      	nop
 8008de4:	0800c4e6 	.word	0x0800c4e6
 8008de8:	0800c557 	.word	0x0800c557

08008dec <__multiply>:
 8008dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df0:	4614      	mov	r4, r2
 8008df2:	690a      	ldr	r2, [r1, #16]
 8008df4:	6923      	ldr	r3, [r4, #16]
 8008df6:	460f      	mov	r7, r1
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	bfa2      	ittt	ge
 8008dfc:	4623      	movge	r3, r4
 8008dfe:	460c      	movge	r4, r1
 8008e00:	461f      	movge	r7, r3
 8008e02:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008e06:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008e0a:	68a3      	ldr	r3, [r4, #8]
 8008e0c:	6861      	ldr	r1, [r4, #4]
 8008e0e:	eb0a 0609 	add.w	r6, sl, r9
 8008e12:	42b3      	cmp	r3, r6
 8008e14:	b085      	sub	sp, #20
 8008e16:	bfb8      	it	lt
 8008e18:	3101      	addlt	r1, #1
 8008e1a:	f7ff fe93 	bl	8008b44 <_Balloc>
 8008e1e:	b930      	cbnz	r0, 8008e2e <__multiply+0x42>
 8008e20:	4602      	mov	r2, r0
 8008e22:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008e26:	4b43      	ldr	r3, [pc, #268]	@ (8008f34 <__multiply+0x148>)
 8008e28:	4843      	ldr	r0, [pc, #268]	@ (8008f38 <__multiply+0x14c>)
 8008e2a:	f000 fd67 	bl	80098fc <__assert_func>
 8008e2e:	f100 0514 	add.w	r5, r0, #20
 8008e32:	462b      	mov	r3, r5
 8008e34:	2200      	movs	r2, #0
 8008e36:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008e3a:	4543      	cmp	r3, r8
 8008e3c:	d321      	bcc.n	8008e82 <__multiply+0x96>
 8008e3e:	f107 0114 	add.w	r1, r7, #20
 8008e42:	f104 0214 	add.w	r2, r4, #20
 8008e46:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008e4a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008e4e:	9302      	str	r3, [sp, #8]
 8008e50:	1b13      	subs	r3, r2, r4
 8008e52:	3b15      	subs	r3, #21
 8008e54:	f023 0303 	bic.w	r3, r3, #3
 8008e58:	3304      	adds	r3, #4
 8008e5a:	f104 0715 	add.w	r7, r4, #21
 8008e5e:	42ba      	cmp	r2, r7
 8008e60:	bf38      	it	cc
 8008e62:	2304      	movcc	r3, #4
 8008e64:	9301      	str	r3, [sp, #4]
 8008e66:	9b02      	ldr	r3, [sp, #8]
 8008e68:	9103      	str	r1, [sp, #12]
 8008e6a:	428b      	cmp	r3, r1
 8008e6c:	d80c      	bhi.n	8008e88 <__multiply+0x9c>
 8008e6e:	2e00      	cmp	r6, #0
 8008e70:	dd03      	ble.n	8008e7a <__multiply+0x8e>
 8008e72:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d05a      	beq.n	8008f30 <__multiply+0x144>
 8008e7a:	6106      	str	r6, [r0, #16]
 8008e7c:	b005      	add	sp, #20
 8008e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e82:	f843 2b04 	str.w	r2, [r3], #4
 8008e86:	e7d8      	b.n	8008e3a <__multiply+0x4e>
 8008e88:	f8b1 a000 	ldrh.w	sl, [r1]
 8008e8c:	f1ba 0f00 	cmp.w	sl, #0
 8008e90:	d023      	beq.n	8008eda <__multiply+0xee>
 8008e92:	46a9      	mov	r9, r5
 8008e94:	f04f 0c00 	mov.w	ip, #0
 8008e98:	f104 0e14 	add.w	lr, r4, #20
 8008e9c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008ea0:	f8d9 3000 	ldr.w	r3, [r9]
 8008ea4:	fa1f fb87 	uxth.w	fp, r7
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	fb0a 330b 	mla	r3, sl, fp, r3
 8008eae:	4463      	add	r3, ip
 8008eb0:	f8d9 c000 	ldr.w	ip, [r9]
 8008eb4:	0c3f      	lsrs	r7, r7, #16
 8008eb6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008eba:	fb0a c707 	mla	r7, sl, r7, ip
 8008ebe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008ec8:	4572      	cmp	r2, lr
 8008eca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008ece:	f849 3b04 	str.w	r3, [r9], #4
 8008ed2:	d8e3      	bhi.n	8008e9c <__multiply+0xb0>
 8008ed4:	9b01      	ldr	r3, [sp, #4]
 8008ed6:	f845 c003 	str.w	ip, [r5, r3]
 8008eda:	9b03      	ldr	r3, [sp, #12]
 8008edc:	3104      	adds	r1, #4
 8008ede:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008ee2:	f1b9 0f00 	cmp.w	r9, #0
 8008ee6:	d021      	beq.n	8008f2c <__multiply+0x140>
 8008ee8:	46ae      	mov	lr, r5
 8008eea:	f04f 0a00 	mov.w	sl, #0
 8008eee:	682b      	ldr	r3, [r5, #0]
 8008ef0:	f104 0c14 	add.w	ip, r4, #20
 8008ef4:	f8bc b000 	ldrh.w	fp, [ip]
 8008ef8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	fb09 770b 	mla	r7, r9, fp, r7
 8008f02:	4457      	add	r7, sl
 8008f04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008f08:	f84e 3b04 	str.w	r3, [lr], #4
 8008f0c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008f10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f14:	f8be 3000 	ldrh.w	r3, [lr]
 8008f18:	4562      	cmp	r2, ip
 8008f1a:	fb09 330a 	mla	r3, r9, sl, r3
 8008f1e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008f22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f26:	d8e5      	bhi.n	8008ef4 <__multiply+0x108>
 8008f28:	9f01      	ldr	r7, [sp, #4]
 8008f2a:	51eb      	str	r3, [r5, r7]
 8008f2c:	3504      	adds	r5, #4
 8008f2e:	e79a      	b.n	8008e66 <__multiply+0x7a>
 8008f30:	3e01      	subs	r6, #1
 8008f32:	e79c      	b.n	8008e6e <__multiply+0x82>
 8008f34:	0800c4e6 	.word	0x0800c4e6
 8008f38:	0800c557 	.word	0x0800c557

08008f3c <__pow5mult>:
 8008f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f40:	4615      	mov	r5, r2
 8008f42:	f012 0203 	ands.w	r2, r2, #3
 8008f46:	4607      	mov	r7, r0
 8008f48:	460e      	mov	r6, r1
 8008f4a:	d007      	beq.n	8008f5c <__pow5mult+0x20>
 8008f4c:	4c25      	ldr	r4, [pc, #148]	@ (8008fe4 <__pow5mult+0xa8>)
 8008f4e:	3a01      	subs	r2, #1
 8008f50:	2300      	movs	r3, #0
 8008f52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f56:	f7ff fe57 	bl	8008c08 <__multadd>
 8008f5a:	4606      	mov	r6, r0
 8008f5c:	10ad      	asrs	r5, r5, #2
 8008f5e:	d03d      	beq.n	8008fdc <__pow5mult+0xa0>
 8008f60:	69fc      	ldr	r4, [r7, #28]
 8008f62:	b97c      	cbnz	r4, 8008f84 <__pow5mult+0x48>
 8008f64:	2010      	movs	r0, #16
 8008f66:	f7ff fd25 	bl	80089b4 <malloc>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	61f8      	str	r0, [r7, #28]
 8008f6e:	b928      	cbnz	r0, 8008f7c <__pow5mult+0x40>
 8008f70:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008f74:	4b1c      	ldr	r3, [pc, #112]	@ (8008fe8 <__pow5mult+0xac>)
 8008f76:	481d      	ldr	r0, [pc, #116]	@ (8008fec <__pow5mult+0xb0>)
 8008f78:	f000 fcc0 	bl	80098fc <__assert_func>
 8008f7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f80:	6004      	str	r4, [r0, #0]
 8008f82:	60c4      	str	r4, [r0, #12]
 8008f84:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008f88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f8c:	b94c      	cbnz	r4, 8008fa2 <__pow5mult+0x66>
 8008f8e:	f240 2171 	movw	r1, #625	@ 0x271
 8008f92:	4638      	mov	r0, r7
 8008f94:	f7ff ff14 	bl	8008dc0 <__i2b>
 8008f98:	2300      	movs	r3, #0
 8008f9a:	4604      	mov	r4, r0
 8008f9c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008fa0:	6003      	str	r3, [r0, #0]
 8008fa2:	f04f 0900 	mov.w	r9, #0
 8008fa6:	07eb      	lsls	r3, r5, #31
 8008fa8:	d50a      	bpl.n	8008fc0 <__pow5mult+0x84>
 8008faa:	4631      	mov	r1, r6
 8008fac:	4622      	mov	r2, r4
 8008fae:	4638      	mov	r0, r7
 8008fb0:	f7ff ff1c 	bl	8008dec <__multiply>
 8008fb4:	4680      	mov	r8, r0
 8008fb6:	4631      	mov	r1, r6
 8008fb8:	4638      	mov	r0, r7
 8008fba:	f7ff fe03 	bl	8008bc4 <_Bfree>
 8008fbe:	4646      	mov	r6, r8
 8008fc0:	106d      	asrs	r5, r5, #1
 8008fc2:	d00b      	beq.n	8008fdc <__pow5mult+0xa0>
 8008fc4:	6820      	ldr	r0, [r4, #0]
 8008fc6:	b938      	cbnz	r0, 8008fd8 <__pow5mult+0x9c>
 8008fc8:	4622      	mov	r2, r4
 8008fca:	4621      	mov	r1, r4
 8008fcc:	4638      	mov	r0, r7
 8008fce:	f7ff ff0d 	bl	8008dec <__multiply>
 8008fd2:	6020      	str	r0, [r4, #0]
 8008fd4:	f8c0 9000 	str.w	r9, [r0]
 8008fd8:	4604      	mov	r4, r0
 8008fda:	e7e4      	b.n	8008fa6 <__pow5mult+0x6a>
 8008fdc:	4630      	mov	r0, r6
 8008fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fe2:	bf00      	nop
 8008fe4:	0800c5b0 	.word	0x0800c5b0
 8008fe8:	0800c477 	.word	0x0800c477
 8008fec:	0800c557 	.word	0x0800c557

08008ff0 <__lshift>:
 8008ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ff4:	460c      	mov	r4, r1
 8008ff6:	4607      	mov	r7, r0
 8008ff8:	4691      	mov	r9, r2
 8008ffa:	6923      	ldr	r3, [r4, #16]
 8008ffc:	6849      	ldr	r1, [r1, #4]
 8008ffe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009002:	68a3      	ldr	r3, [r4, #8]
 8009004:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009008:	f108 0601 	add.w	r6, r8, #1
 800900c:	42b3      	cmp	r3, r6
 800900e:	db0b      	blt.n	8009028 <__lshift+0x38>
 8009010:	4638      	mov	r0, r7
 8009012:	f7ff fd97 	bl	8008b44 <_Balloc>
 8009016:	4605      	mov	r5, r0
 8009018:	b948      	cbnz	r0, 800902e <__lshift+0x3e>
 800901a:	4602      	mov	r2, r0
 800901c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009020:	4b27      	ldr	r3, [pc, #156]	@ (80090c0 <__lshift+0xd0>)
 8009022:	4828      	ldr	r0, [pc, #160]	@ (80090c4 <__lshift+0xd4>)
 8009024:	f000 fc6a 	bl	80098fc <__assert_func>
 8009028:	3101      	adds	r1, #1
 800902a:	005b      	lsls	r3, r3, #1
 800902c:	e7ee      	b.n	800900c <__lshift+0x1c>
 800902e:	2300      	movs	r3, #0
 8009030:	f100 0114 	add.w	r1, r0, #20
 8009034:	f100 0210 	add.w	r2, r0, #16
 8009038:	4618      	mov	r0, r3
 800903a:	4553      	cmp	r3, sl
 800903c:	db33      	blt.n	80090a6 <__lshift+0xb6>
 800903e:	6920      	ldr	r0, [r4, #16]
 8009040:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009044:	f104 0314 	add.w	r3, r4, #20
 8009048:	f019 091f 	ands.w	r9, r9, #31
 800904c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009050:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009054:	d02b      	beq.n	80090ae <__lshift+0xbe>
 8009056:	468a      	mov	sl, r1
 8009058:	2200      	movs	r2, #0
 800905a:	f1c9 0e20 	rsb	lr, r9, #32
 800905e:	6818      	ldr	r0, [r3, #0]
 8009060:	fa00 f009 	lsl.w	r0, r0, r9
 8009064:	4310      	orrs	r0, r2
 8009066:	f84a 0b04 	str.w	r0, [sl], #4
 800906a:	f853 2b04 	ldr.w	r2, [r3], #4
 800906e:	459c      	cmp	ip, r3
 8009070:	fa22 f20e 	lsr.w	r2, r2, lr
 8009074:	d8f3      	bhi.n	800905e <__lshift+0x6e>
 8009076:	ebac 0304 	sub.w	r3, ip, r4
 800907a:	3b15      	subs	r3, #21
 800907c:	f023 0303 	bic.w	r3, r3, #3
 8009080:	3304      	adds	r3, #4
 8009082:	f104 0015 	add.w	r0, r4, #21
 8009086:	4584      	cmp	ip, r0
 8009088:	bf38      	it	cc
 800908a:	2304      	movcc	r3, #4
 800908c:	50ca      	str	r2, [r1, r3]
 800908e:	b10a      	cbz	r2, 8009094 <__lshift+0xa4>
 8009090:	f108 0602 	add.w	r6, r8, #2
 8009094:	3e01      	subs	r6, #1
 8009096:	4638      	mov	r0, r7
 8009098:	4621      	mov	r1, r4
 800909a:	612e      	str	r6, [r5, #16]
 800909c:	f7ff fd92 	bl	8008bc4 <_Bfree>
 80090a0:	4628      	mov	r0, r5
 80090a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80090aa:	3301      	adds	r3, #1
 80090ac:	e7c5      	b.n	800903a <__lshift+0x4a>
 80090ae:	3904      	subs	r1, #4
 80090b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80090b4:	459c      	cmp	ip, r3
 80090b6:	f841 2f04 	str.w	r2, [r1, #4]!
 80090ba:	d8f9      	bhi.n	80090b0 <__lshift+0xc0>
 80090bc:	e7ea      	b.n	8009094 <__lshift+0xa4>
 80090be:	bf00      	nop
 80090c0:	0800c4e6 	.word	0x0800c4e6
 80090c4:	0800c557 	.word	0x0800c557

080090c8 <__mcmp>:
 80090c8:	4603      	mov	r3, r0
 80090ca:	690a      	ldr	r2, [r1, #16]
 80090cc:	6900      	ldr	r0, [r0, #16]
 80090ce:	b530      	push	{r4, r5, lr}
 80090d0:	1a80      	subs	r0, r0, r2
 80090d2:	d10e      	bne.n	80090f2 <__mcmp+0x2a>
 80090d4:	3314      	adds	r3, #20
 80090d6:	3114      	adds	r1, #20
 80090d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80090dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80090e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80090e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80090e8:	4295      	cmp	r5, r2
 80090ea:	d003      	beq.n	80090f4 <__mcmp+0x2c>
 80090ec:	d205      	bcs.n	80090fa <__mcmp+0x32>
 80090ee:	f04f 30ff 	mov.w	r0, #4294967295
 80090f2:	bd30      	pop	{r4, r5, pc}
 80090f4:	42a3      	cmp	r3, r4
 80090f6:	d3f3      	bcc.n	80090e0 <__mcmp+0x18>
 80090f8:	e7fb      	b.n	80090f2 <__mcmp+0x2a>
 80090fa:	2001      	movs	r0, #1
 80090fc:	e7f9      	b.n	80090f2 <__mcmp+0x2a>
	...

08009100 <__mdiff>:
 8009100:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009104:	4689      	mov	r9, r1
 8009106:	4606      	mov	r6, r0
 8009108:	4611      	mov	r1, r2
 800910a:	4648      	mov	r0, r9
 800910c:	4614      	mov	r4, r2
 800910e:	f7ff ffdb 	bl	80090c8 <__mcmp>
 8009112:	1e05      	subs	r5, r0, #0
 8009114:	d112      	bne.n	800913c <__mdiff+0x3c>
 8009116:	4629      	mov	r1, r5
 8009118:	4630      	mov	r0, r6
 800911a:	f7ff fd13 	bl	8008b44 <_Balloc>
 800911e:	4602      	mov	r2, r0
 8009120:	b928      	cbnz	r0, 800912e <__mdiff+0x2e>
 8009122:	f240 2137 	movw	r1, #567	@ 0x237
 8009126:	4b3e      	ldr	r3, [pc, #248]	@ (8009220 <__mdiff+0x120>)
 8009128:	483e      	ldr	r0, [pc, #248]	@ (8009224 <__mdiff+0x124>)
 800912a:	f000 fbe7 	bl	80098fc <__assert_func>
 800912e:	2301      	movs	r3, #1
 8009130:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009134:	4610      	mov	r0, r2
 8009136:	b003      	add	sp, #12
 8009138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800913c:	bfbc      	itt	lt
 800913e:	464b      	movlt	r3, r9
 8009140:	46a1      	movlt	r9, r4
 8009142:	4630      	mov	r0, r6
 8009144:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009148:	bfba      	itte	lt
 800914a:	461c      	movlt	r4, r3
 800914c:	2501      	movlt	r5, #1
 800914e:	2500      	movge	r5, #0
 8009150:	f7ff fcf8 	bl	8008b44 <_Balloc>
 8009154:	4602      	mov	r2, r0
 8009156:	b918      	cbnz	r0, 8009160 <__mdiff+0x60>
 8009158:	f240 2145 	movw	r1, #581	@ 0x245
 800915c:	4b30      	ldr	r3, [pc, #192]	@ (8009220 <__mdiff+0x120>)
 800915e:	e7e3      	b.n	8009128 <__mdiff+0x28>
 8009160:	f100 0b14 	add.w	fp, r0, #20
 8009164:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009168:	f109 0310 	add.w	r3, r9, #16
 800916c:	60c5      	str	r5, [r0, #12]
 800916e:	f04f 0c00 	mov.w	ip, #0
 8009172:	f109 0514 	add.w	r5, r9, #20
 8009176:	46d9      	mov	r9, fp
 8009178:	6926      	ldr	r6, [r4, #16]
 800917a:	f104 0e14 	add.w	lr, r4, #20
 800917e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009182:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009186:	9301      	str	r3, [sp, #4]
 8009188:	9b01      	ldr	r3, [sp, #4]
 800918a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800918e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009192:	b281      	uxth	r1, r0
 8009194:	9301      	str	r3, [sp, #4]
 8009196:	fa1f f38a 	uxth.w	r3, sl
 800919a:	1a5b      	subs	r3, r3, r1
 800919c:	0c00      	lsrs	r0, r0, #16
 800919e:	4463      	add	r3, ip
 80091a0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80091a4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80091ae:	4576      	cmp	r6, lr
 80091b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80091b4:	f849 3b04 	str.w	r3, [r9], #4
 80091b8:	d8e6      	bhi.n	8009188 <__mdiff+0x88>
 80091ba:	1b33      	subs	r3, r6, r4
 80091bc:	3b15      	subs	r3, #21
 80091be:	f023 0303 	bic.w	r3, r3, #3
 80091c2:	3415      	adds	r4, #21
 80091c4:	3304      	adds	r3, #4
 80091c6:	42a6      	cmp	r6, r4
 80091c8:	bf38      	it	cc
 80091ca:	2304      	movcc	r3, #4
 80091cc:	441d      	add	r5, r3
 80091ce:	445b      	add	r3, fp
 80091d0:	461e      	mov	r6, r3
 80091d2:	462c      	mov	r4, r5
 80091d4:	4544      	cmp	r4, r8
 80091d6:	d30e      	bcc.n	80091f6 <__mdiff+0xf6>
 80091d8:	f108 0103 	add.w	r1, r8, #3
 80091dc:	1b49      	subs	r1, r1, r5
 80091de:	f021 0103 	bic.w	r1, r1, #3
 80091e2:	3d03      	subs	r5, #3
 80091e4:	45a8      	cmp	r8, r5
 80091e6:	bf38      	it	cc
 80091e8:	2100      	movcc	r1, #0
 80091ea:	440b      	add	r3, r1
 80091ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80091f0:	b199      	cbz	r1, 800921a <__mdiff+0x11a>
 80091f2:	6117      	str	r7, [r2, #16]
 80091f4:	e79e      	b.n	8009134 <__mdiff+0x34>
 80091f6:	46e6      	mov	lr, ip
 80091f8:	f854 1b04 	ldr.w	r1, [r4], #4
 80091fc:	fa1f fc81 	uxth.w	ip, r1
 8009200:	44f4      	add	ip, lr
 8009202:	0c08      	lsrs	r0, r1, #16
 8009204:	4471      	add	r1, lr
 8009206:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800920a:	b289      	uxth	r1, r1
 800920c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009210:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009214:	f846 1b04 	str.w	r1, [r6], #4
 8009218:	e7dc      	b.n	80091d4 <__mdiff+0xd4>
 800921a:	3f01      	subs	r7, #1
 800921c:	e7e6      	b.n	80091ec <__mdiff+0xec>
 800921e:	bf00      	nop
 8009220:	0800c4e6 	.word	0x0800c4e6
 8009224:	0800c557 	.word	0x0800c557

08009228 <__ulp>:
 8009228:	4b0e      	ldr	r3, [pc, #56]	@ (8009264 <__ulp+0x3c>)
 800922a:	400b      	ands	r3, r1
 800922c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009230:	2b00      	cmp	r3, #0
 8009232:	dc08      	bgt.n	8009246 <__ulp+0x1e>
 8009234:	425b      	negs	r3, r3
 8009236:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800923a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800923e:	da04      	bge.n	800924a <__ulp+0x22>
 8009240:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009244:	4113      	asrs	r3, r2
 8009246:	2200      	movs	r2, #0
 8009248:	e008      	b.n	800925c <__ulp+0x34>
 800924a:	f1a2 0314 	sub.w	r3, r2, #20
 800924e:	2b1e      	cmp	r3, #30
 8009250:	bfd6      	itet	le
 8009252:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009256:	2201      	movgt	r2, #1
 8009258:	40da      	lsrle	r2, r3
 800925a:	2300      	movs	r3, #0
 800925c:	4619      	mov	r1, r3
 800925e:	4610      	mov	r0, r2
 8009260:	4770      	bx	lr
 8009262:	bf00      	nop
 8009264:	7ff00000 	.word	0x7ff00000

08009268 <__b2d>:
 8009268:	6902      	ldr	r2, [r0, #16]
 800926a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926c:	f100 0614 	add.w	r6, r0, #20
 8009270:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8009274:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009278:	4f1e      	ldr	r7, [pc, #120]	@ (80092f4 <__b2d+0x8c>)
 800927a:	4620      	mov	r0, r4
 800927c:	f7ff fd54 	bl	8008d28 <__hi0bits>
 8009280:	4603      	mov	r3, r0
 8009282:	f1c0 0020 	rsb	r0, r0, #32
 8009286:	2b0a      	cmp	r3, #10
 8009288:	f1a2 0504 	sub.w	r5, r2, #4
 800928c:	6008      	str	r0, [r1, #0]
 800928e:	dc12      	bgt.n	80092b6 <__b2d+0x4e>
 8009290:	42ae      	cmp	r6, r5
 8009292:	bf2c      	ite	cs
 8009294:	2200      	movcs	r2, #0
 8009296:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800929a:	f1c3 0c0b 	rsb	ip, r3, #11
 800929e:	3315      	adds	r3, #21
 80092a0:	fa24 fe0c 	lsr.w	lr, r4, ip
 80092a4:	fa04 f303 	lsl.w	r3, r4, r3
 80092a8:	fa22 f20c 	lsr.w	r2, r2, ip
 80092ac:	ea4e 0107 	orr.w	r1, lr, r7
 80092b0:	431a      	orrs	r2, r3
 80092b2:	4610      	mov	r0, r2
 80092b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092b6:	42ae      	cmp	r6, r5
 80092b8:	bf36      	itet	cc
 80092ba:	f1a2 0508 	subcc.w	r5, r2, #8
 80092be:	2200      	movcs	r2, #0
 80092c0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80092c4:	3b0b      	subs	r3, #11
 80092c6:	d012      	beq.n	80092ee <__b2d+0x86>
 80092c8:	f1c3 0720 	rsb	r7, r3, #32
 80092cc:	fa22 f107 	lsr.w	r1, r2, r7
 80092d0:	409c      	lsls	r4, r3
 80092d2:	430c      	orrs	r4, r1
 80092d4:	42b5      	cmp	r5, r6
 80092d6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80092da:	bf94      	ite	ls
 80092dc:	2400      	movls	r4, #0
 80092de:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80092e2:	409a      	lsls	r2, r3
 80092e4:	40fc      	lsrs	r4, r7
 80092e6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80092ea:	4322      	orrs	r2, r4
 80092ec:	e7e1      	b.n	80092b2 <__b2d+0x4a>
 80092ee:	ea44 0107 	orr.w	r1, r4, r7
 80092f2:	e7de      	b.n	80092b2 <__b2d+0x4a>
 80092f4:	3ff00000 	.word	0x3ff00000

080092f8 <__d2b>:
 80092f8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80092fc:	2101      	movs	r1, #1
 80092fe:	4690      	mov	r8, r2
 8009300:	4699      	mov	r9, r3
 8009302:	9e08      	ldr	r6, [sp, #32]
 8009304:	f7ff fc1e 	bl	8008b44 <_Balloc>
 8009308:	4604      	mov	r4, r0
 800930a:	b930      	cbnz	r0, 800931a <__d2b+0x22>
 800930c:	4602      	mov	r2, r0
 800930e:	f240 310f 	movw	r1, #783	@ 0x30f
 8009312:	4b23      	ldr	r3, [pc, #140]	@ (80093a0 <__d2b+0xa8>)
 8009314:	4823      	ldr	r0, [pc, #140]	@ (80093a4 <__d2b+0xac>)
 8009316:	f000 faf1 	bl	80098fc <__assert_func>
 800931a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800931e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009322:	b10d      	cbz	r5, 8009328 <__d2b+0x30>
 8009324:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009328:	9301      	str	r3, [sp, #4]
 800932a:	f1b8 0300 	subs.w	r3, r8, #0
 800932e:	d024      	beq.n	800937a <__d2b+0x82>
 8009330:	4668      	mov	r0, sp
 8009332:	9300      	str	r3, [sp, #0]
 8009334:	f7ff fd17 	bl	8008d66 <__lo0bits>
 8009338:	e9dd 1200 	ldrd	r1, r2, [sp]
 800933c:	b1d8      	cbz	r0, 8009376 <__d2b+0x7e>
 800933e:	f1c0 0320 	rsb	r3, r0, #32
 8009342:	fa02 f303 	lsl.w	r3, r2, r3
 8009346:	430b      	orrs	r3, r1
 8009348:	40c2      	lsrs	r2, r0
 800934a:	6163      	str	r3, [r4, #20]
 800934c:	9201      	str	r2, [sp, #4]
 800934e:	9b01      	ldr	r3, [sp, #4]
 8009350:	2b00      	cmp	r3, #0
 8009352:	bf0c      	ite	eq
 8009354:	2201      	moveq	r2, #1
 8009356:	2202      	movne	r2, #2
 8009358:	61a3      	str	r3, [r4, #24]
 800935a:	6122      	str	r2, [r4, #16]
 800935c:	b1ad      	cbz	r5, 800938a <__d2b+0x92>
 800935e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009362:	4405      	add	r5, r0
 8009364:	6035      	str	r5, [r6, #0]
 8009366:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800936a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800936c:	6018      	str	r0, [r3, #0]
 800936e:	4620      	mov	r0, r4
 8009370:	b002      	add	sp, #8
 8009372:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009376:	6161      	str	r1, [r4, #20]
 8009378:	e7e9      	b.n	800934e <__d2b+0x56>
 800937a:	a801      	add	r0, sp, #4
 800937c:	f7ff fcf3 	bl	8008d66 <__lo0bits>
 8009380:	9b01      	ldr	r3, [sp, #4]
 8009382:	2201      	movs	r2, #1
 8009384:	6163      	str	r3, [r4, #20]
 8009386:	3020      	adds	r0, #32
 8009388:	e7e7      	b.n	800935a <__d2b+0x62>
 800938a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800938e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009392:	6030      	str	r0, [r6, #0]
 8009394:	6918      	ldr	r0, [r3, #16]
 8009396:	f7ff fcc7 	bl	8008d28 <__hi0bits>
 800939a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800939e:	e7e4      	b.n	800936a <__d2b+0x72>
 80093a0:	0800c4e6 	.word	0x0800c4e6
 80093a4:	0800c557 	.word	0x0800c557

080093a8 <__ratio>:
 80093a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ac:	b085      	sub	sp, #20
 80093ae:	e9cd 1000 	strd	r1, r0, [sp]
 80093b2:	a902      	add	r1, sp, #8
 80093b4:	f7ff ff58 	bl	8009268 <__b2d>
 80093b8:	468b      	mov	fp, r1
 80093ba:	4606      	mov	r6, r0
 80093bc:	460f      	mov	r7, r1
 80093be:	9800      	ldr	r0, [sp, #0]
 80093c0:	a903      	add	r1, sp, #12
 80093c2:	f7ff ff51 	bl	8009268 <__b2d>
 80093c6:	460d      	mov	r5, r1
 80093c8:	9b01      	ldr	r3, [sp, #4]
 80093ca:	4689      	mov	r9, r1
 80093cc:	6919      	ldr	r1, [r3, #16]
 80093ce:	9b00      	ldr	r3, [sp, #0]
 80093d0:	4604      	mov	r4, r0
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	4630      	mov	r0, r6
 80093d6:	1ac9      	subs	r1, r1, r3
 80093d8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80093dc:	1a9b      	subs	r3, r3, r2
 80093de:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	bfcd      	iteet	gt
 80093e6:	463a      	movgt	r2, r7
 80093e8:	462a      	movle	r2, r5
 80093ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80093ee:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80093f2:	bfd8      	it	le
 80093f4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80093f8:	464b      	mov	r3, r9
 80093fa:	4622      	mov	r2, r4
 80093fc:	4659      	mov	r1, fp
 80093fe:	f7f7 f995 	bl	800072c <__aeabi_ddiv>
 8009402:	b005      	add	sp, #20
 8009404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009408 <__copybits>:
 8009408:	3901      	subs	r1, #1
 800940a:	b570      	push	{r4, r5, r6, lr}
 800940c:	1149      	asrs	r1, r1, #5
 800940e:	6914      	ldr	r4, [r2, #16]
 8009410:	3101      	adds	r1, #1
 8009412:	f102 0314 	add.w	r3, r2, #20
 8009416:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800941a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800941e:	1f05      	subs	r5, r0, #4
 8009420:	42a3      	cmp	r3, r4
 8009422:	d30c      	bcc.n	800943e <__copybits+0x36>
 8009424:	1aa3      	subs	r3, r4, r2
 8009426:	3b11      	subs	r3, #17
 8009428:	f023 0303 	bic.w	r3, r3, #3
 800942c:	3211      	adds	r2, #17
 800942e:	42a2      	cmp	r2, r4
 8009430:	bf88      	it	hi
 8009432:	2300      	movhi	r3, #0
 8009434:	4418      	add	r0, r3
 8009436:	2300      	movs	r3, #0
 8009438:	4288      	cmp	r0, r1
 800943a:	d305      	bcc.n	8009448 <__copybits+0x40>
 800943c:	bd70      	pop	{r4, r5, r6, pc}
 800943e:	f853 6b04 	ldr.w	r6, [r3], #4
 8009442:	f845 6f04 	str.w	r6, [r5, #4]!
 8009446:	e7eb      	b.n	8009420 <__copybits+0x18>
 8009448:	f840 3b04 	str.w	r3, [r0], #4
 800944c:	e7f4      	b.n	8009438 <__copybits+0x30>

0800944e <__any_on>:
 800944e:	f100 0214 	add.w	r2, r0, #20
 8009452:	6900      	ldr	r0, [r0, #16]
 8009454:	114b      	asrs	r3, r1, #5
 8009456:	4298      	cmp	r0, r3
 8009458:	b510      	push	{r4, lr}
 800945a:	db11      	blt.n	8009480 <__any_on+0x32>
 800945c:	dd0a      	ble.n	8009474 <__any_on+0x26>
 800945e:	f011 011f 	ands.w	r1, r1, #31
 8009462:	d007      	beq.n	8009474 <__any_on+0x26>
 8009464:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009468:	fa24 f001 	lsr.w	r0, r4, r1
 800946c:	fa00 f101 	lsl.w	r1, r0, r1
 8009470:	428c      	cmp	r4, r1
 8009472:	d10b      	bne.n	800948c <__any_on+0x3e>
 8009474:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009478:	4293      	cmp	r3, r2
 800947a:	d803      	bhi.n	8009484 <__any_on+0x36>
 800947c:	2000      	movs	r0, #0
 800947e:	bd10      	pop	{r4, pc}
 8009480:	4603      	mov	r3, r0
 8009482:	e7f7      	b.n	8009474 <__any_on+0x26>
 8009484:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009488:	2900      	cmp	r1, #0
 800948a:	d0f5      	beq.n	8009478 <__any_on+0x2a>
 800948c:	2001      	movs	r0, #1
 800948e:	e7f6      	b.n	800947e <__any_on+0x30>

08009490 <__ascii_wctomb>:
 8009490:	4603      	mov	r3, r0
 8009492:	4608      	mov	r0, r1
 8009494:	b141      	cbz	r1, 80094a8 <__ascii_wctomb+0x18>
 8009496:	2aff      	cmp	r2, #255	@ 0xff
 8009498:	d904      	bls.n	80094a4 <__ascii_wctomb+0x14>
 800949a:	228a      	movs	r2, #138	@ 0x8a
 800949c:	f04f 30ff 	mov.w	r0, #4294967295
 80094a0:	601a      	str	r2, [r3, #0]
 80094a2:	4770      	bx	lr
 80094a4:	2001      	movs	r0, #1
 80094a6:	700a      	strb	r2, [r1, #0]
 80094a8:	4770      	bx	lr

080094aa <__ssputs_r>:
 80094aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094ae:	461f      	mov	r7, r3
 80094b0:	688e      	ldr	r6, [r1, #8]
 80094b2:	4682      	mov	sl, r0
 80094b4:	42be      	cmp	r6, r7
 80094b6:	460c      	mov	r4, r1
 80094b8:	4690      	mov	r8, r2
 80094ba:	680b      	ldr	r3, [r1, #0]
 80094bc:	d82d      	bhi.n	800951a <__ssputs_r+0x70>
 80094be:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094c2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80094c6:	d026      	beq.n	8009516 <__ssputs_r+0x6c>
 80094c8:	6965      	ldr	r5, [r4, #20]
 80094ca:	6909      	ldr	r1, [r1, #16]
 80094cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094d0:	eba3 0901 	sub.w	r9, r3, r1
 80094d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094d8:	1c7b      	adds	r3, r7, #1
 80094da:	444b      	add	r3, r9
 80094dc:	106d      	asrs	r5, r5, #1
 80094de:	429d      	cmp	r5, r3
 80094e0:	bf38      	it	cc
 80094e2:	461d      	movcc	r5, r3
 80094e4:	0553      	lsls	r3, r2, #21
 80094e6:	d527      	bpl.n	8009538 <__ssputs_r+0x8e>
 80094e8:	4629      	mov	r1, r5
 80094ea:	f7ff fa8d 	bl	8008a08 <_malloc_r>
 80094ee:	4606      	mov	r6, r0
 80094f0:	b360      	cbz	r0, 800954c <__ssputs_r+0xa2>
 80094f2:	464a      	mov	r2, r9
 80094f4:	6921      	ldr	r1, [r4, #16]
 80094f6:	f7fe f870 	bl	80075da <memcpy>
 80094fa:	89a3      	ldrh	r3, [r4, #12]
 80094fc:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009500:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009504:	81a3      	strh	r3, [r4, #12]
 8009506:	6126      	str	r6, [r4, #16]
 8009508:	444e      	add	r6, r9
 800950a:	6026      	str	r6, [r4, #0]
 800950c:	463e      	mov	r6, r7
 800950e:	6165      	str	r5, [r4, #20]
 8009510:	eba5 0509 	sub.w	r5, r5, r9
 8009514:	60a5      	str	r5, [r4, #8]
 8009516:	42be      	cmp	r6, r7
 8009518:	d900      	bls.n	800951c <__ssputs_r+0x72>
 800951a:	463e      	mov	r6, r7
 800951c:	4632      	mov	r2, r6
 800951e:	4641      	mov	r1, r8
 8009520:	6820      	ldr	r0, [r4, #0]
 8009522:	f000 f9c1 	bl	80098a8 <memmove>
 8009526:	2000      	movs	r0, #0
 8009528:	68a3      	ldr	r3, [r4, #8]
 800952a:	1b9b      	subs	r3, r3, r6
 800952c:	60a3      	str	r3, [r4, #8]
 800952e:	6823      	ldr	r3, [r4, #0]
 8009530:	4433      	add	r3, r6
 8009532:	6023      	str	r3, [r4, #0]
 8009534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009538:	462a      	mov	r2, r5
 800953a:	f000 fa11 	bl	8009960 <_realloc_r>
 800953e:	4606      	mov	r6, r0
 8009540:	2800      	cmp	r0, #0
 8009542:	d1e0      	bne.n	8009506 <__ssputs_r+0x5c>
 8009544:	4650      	mov	r0, sl
 8009546:	6921      	ldr	r1, [r4, #16]
 8009548:	f7fe feb2 	bl	80082b0 <_free_r>
 800954c:	230c      	movs	r3, #12
 800954e:	f8ca 3000 	str.w	r3, [sl]
 8009552:	89a3      	ldrh	r3, [r4, #12]
 8009554:	f04f 30ff 	mov.w	r0, #4294967295
 8009558:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800955c:	81a3      	strh	r3, [r4, #12]
 800955e:	e7e9      	b.n	8009534 <__ssputs_r+0x8a>

08009560 <_svfiprintf_r>:
 8009560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009564:	4698      	mov	r8, r3
 8009566:	898b      	ldrh	r3, [r1, #12]
 8009568:	4607      	mov	r7, r0
 800956a:	061b      	lsls	r3, r3, #24
 800956c:	460d      	mov	r5, r1
 800956e:	4614      	mov	r4, r2
 8009570:	b09d      	sub	sp, #116	@ 0x74
 8009572:	d510      	bpl.n	8009596 <_svfiprintf_r+0x36>
 8009574:	690b      	ldr	r3, [r1, #16]
 8009576:	b973      	cbnz	r3, 8009596 <_svfiprintf_r+0x36>
 8009578:	2140      	movs	r1, #64	@ 0x40
 800957a:	f7ff fa45 	bl	8008a08 <_malloc_r>
 800957e:	6028      	str	r0, [r5, #0]
 8009580:	6128      	str	r0, [r5, #16]
 8009582:	b930      	cbnz	r0, 8009592 <_svfiprintf_r+0x32>
 8009584:	230c      	movs	r3, #12
 8009586:	603b      	str	r3, [r7, #0]
 8009588:	f04f 30ff 	mov.w	r0, #4294967295
 800958c:	b01d      	add	sp, #116	@ 0x74
 800958e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009592:	2340      	movs	r3, #64	@ 0x40
 8009594:	616b      	str	r3, [r5, #20]
 8009596:	2300      	movs	r3, #0
 8009598:	9309      	str	r3, [sp, #36]	@ 0x24
 800959a:	2320      	movs	r3, #32
 800959c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80095a0:	2330      	movs	r3, #48	@ 0x30
 80095a2:	f04f 0901 	mov.w	r9, #1
 80095a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80095aa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009744 <_svfiprintf_r+0x1e4>
 80095ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80095b2:	4623      	mov	r3, r4
 80095b4:	469a      	mov	sl, r3
 80095b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095ba:	b10a      	cbz	r2, 80095c0 <_svfiprintf_r+0x60>
 80095bc:	2a25      	cmp	r2, #37	@ 0x25
 80095be:	d1f9      	bne.n	80095b4 <_svfiprintf_r+0x54>
 80095c0:	ebba 0b04 	subs.w	fp, sl, r4
 80095c4:	d00b      	beq.n	80095de <_svfiprintf_r+0x7e>
 80095c6:	465b      	mov	r3, fp
 80095c8:	4622      	mov	r2, r4
 80095ca:	4629      	mov	r1, r5
 80095cc:	4638      	mov	r0, r7
 80095ce:	f7ff ff6c 	bl	80094aa <__ssputs_r>
 80095d2:	3001      	adds	r0, #1
 80095d4:	f000 80a7 	beq.w	8009726 <_svfiprintf_r+0x1c6>
 80095d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095da:	445a      	add	r2, fp
 80095dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80095de:	f89a 3000 	ldrb.w	r3, [sl]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f000 809f 	beq.w	8009726 <_svfiprintf_r+0x1c6>
 80095e8:	2300      	movs	r3, #0
 80095ea:	f04f 32ff 	mov.w	r2, #4294967295
 80095ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095f2:	f10a 0a01 	add.w	sl, sl, #1
 80095f6:	9304      	str	r3, [sp, #16]
 80095f8:	9307      	str	r3, [sp, #28]
 80095fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80095fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8009600:	4654      	mov	r4, sl
 8009602:	2205      	movs	r2, #5
 8009604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009608:	484e      	ldr	r0, [pc, #312]	@ (8009744 <_svfiprintf_r+0x1e4>)
 800960a:	f7fd ffd8 	bl	80075be <memchr>
 800960e:	9a04      	ldr	r2, [sp, #16]
 8009610:	b9d8      	cbnz	r0, 800964a <_svfiprintf_r+0xea>
 8009612:	06d0      	lsls	r0, r2, #27
 8009614:	bf44      	itt	mi
 8009616:	2320      	movmi	r3, #32
 8009618:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800961c:	0711      	lsls	r1, r2, #28
 800961e:	bf44      	itt	mi
 8009620:	232b      	movmi	r3, #43	@ 0x2b
 8009622:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009626:	f89a 3000 	ldrb.w	r3, [sl]
 800962a:	2b2a      	cmp	r3, #42	@ 0x2a
 800962c:	d015      	beq.n	800965a <_svfiprintf_r+0xfa>
 800962e:	4654      	mov	r4, sl
 8009630:	2000      	movs	r0, #0
 8009632:	f04f 0c0a 	mov.w	ip, #10
 8009636:	9a07      	ldr	r2, [sp, #28]
 8009638:	4621      	mov	r1, r4
 800963a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800963e:	3b30      	subs	r3, #48	@ 0x30
 8009640:	2b09      	cmp	r3, #9
 8009642:	d94b      	bls.n	80096dc <_svfiprintf_r+0x17c>
 8009644:	b1b0      	cbz	r0, 8009674 <_svfiprintf_r+0x114>
 8009646:	9207      	str	r2, [sp, #28]
 8009648:	e014      	b.n	8009674 <_svfiprintf_r+0x114>
 800964a:	eba0 0308 	sub.w	r3, r0, r8
 800964e:	fa09 f303 	lsl.w	r3, r9, r3
 8009652:	4313      	orrs	r3, r2
 8009654:	46a2      	mov	sl, r4
 8009656:	9304      	str	r3, [sp, #16]
 8009658:	e7d2      	b.n	8009600 <_svfiprintf_r+0xa0>
 800965a:	9b03      	ldr	r3, [sp, #12]
 800965c:	1d19      	adds	r1, r3, #4
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	9103      	str	r1, [sp, #12]
 8009662:	2b00      	cmp	r3, #0
 8009664:	bfbb      	ittet	lt
 8009666:	425b      	neglt	r3, r3
 8009668:	f042 0202 	orrlt.w	r2, r2, #2
 800966c:	9307      	strge	r3, [sp, #28]
 800966e:	9307      	strlt	r3, [sp, #28]
 8009670:	bfb8      	it	lt
 8009672:	9204      	strlt	r2, [sp, #16]
 8009674:	7823      	ldrb	r3, [r4, #0]
 8009676:	2b2e      	cmp	r3, #46	@ 0x2e
 8009678:	d10a      	bne.n	8009690 <_svfiprintf_r+0x130>
 800967a:	7863      	ldrb	r3, [r4, #1]
 800967c:	2b2a      	cmp	r3, #42	@ 0x2a
 800967e:	d132      	bne.n	80096e6 <_svfiprintf_r+0x186>
 8009680:	9b03      	ldr	r3, [sp, #12]
 8009682:	3402      	adds	r4, #2
 8009684:	1d1a      	adds	r2, r3, #4
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	9203      	str	r2, [sp, #12]
 800968a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800968e:	9305      	str	r3, [sp, #20]
 8009690:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009748 <_svfiprintf_r+0x1e8>
 8009694:	2203      	movs	r2, #3
 8009696:	4650      	mov	r0, sl
 8009698:	7821      	ldrb	r1, [r4, #0]
 800969a:	f7fd ff90 	bl	80075be <memchr>
 800969e:	b138      	cbz	r0, 80096b0 <_svfiprintf_r+0x150>
 80096a0:	2240      	movs	r2, #64	@ 0x40
 80096a2:	9b04      	ldr	r3, [sp, #16]
 80096a4:	eba0 000a 	sub.w	r0, r0, sl
 80096a8:	4082      	lsls	r2, r0
 80096aa:	4313      	orrs	r3, r2
 80096ac:	3401      	adds	r4, #1
 80096ae:	9304      	str	r3, [sp, #16]
 80096b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096b4:	2206      	movs	r2, #6
 80096b6:	4825      	ldr	r0, [pc, #148]	@ (800974c <_svfiprintf_r+0x1ec>)
 80096b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80096bc:	f7fd ff7f 	bl	80075be <memchr>
 80096c0:	2800      	cmp	r0, #0
 80096c2:	d036      	beq.n	8009732 <_svfiprintf_r+0x1d2>
 80096c4:	4b22      	ldr	r3, [pc, #136]	@ (8009750 <_svfiprintf_r+0x1f0>)
 80096c6:	bb1b      	cbnz	r3, 8009710 <_svfiprintf_r+0x1b0>
 80096c8:	9b03      	ldr	r3, [sp, #12]
 80096ca:	3307      	adds	r3, #7
 80096cc:	f023 0307 	bic.w	r3, r3, #7
 80096d0:	3308      	adds	r3, #8
 80096d2:	9303      	str	r3, [sp, #12]
 80096d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096d6:	4433      	add	r3, r6
 80096d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80096da:	e76a      	b.n	80095b2 <_svfiprintf_r+0x52>
 80096dc:	460c      	mov	r4, r1
 80096de:	2001      	movs	r0, #1
 80096e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80096e4:	e7a8      	b.n	8009638 <_svfiprintf_r+0xd8>
 80096e6:	2300      	movs	r3, #0
 80096e8:	f04f 0c0a 	mov.w	ip, #10
 80096ec:	4619      	mov	r1, r3
 80096ee:	3401      	adds	r4, #1
 80096f0:	9305      	str	r3, [sp, #20]
 80096f2:	4620      	mov	r0, r4
 80096f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096f8:	3a30      	subs	r2, #48	@ 0x30
 80096fa:	2a09      	cmp	r2, #9
 80096fc:	d903      	bls.n	8009706 <_svfiprintf_r+0x1a6>
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d0c6      	beq.n	8009690 <_svfiprintf_r+0x130>
 8009702:	9105      	str	r1, [sp, #20]
 8009704:	e7c4      	b.n	8009690 <_svfiprintf_r+0x130>
 8009706:	4604      	mov	r4, r0
 8009708:	2301      	movs	r3, #1
 800970a:	fb0c 2101 	mla	r1, ip, r1, r2
 800970e:	e7f0      	b.n	80096f2 <_svfiprintf_r+0x192>
 8009710:	ab03      	add	r3, sp, #12
 8009712:	9300      	str	r3, [sp, #0]
 8009714:	462a      	mov	r2, r5
 8009716:	4638      	mov	r0, r7
 8009718:	4b0e      	ldr	r3, [pc, #56]	@ (8009754 <_svfiprintf_r+0x1f4>)
 800971a:	a904      	add	r1, sp, #16
 800971c:	f7fc ffca 	bl	80066b4 <_printf_float>
 8009720:	1c42      	adds	r2, r0, #1
 8009722:	4606      	mov	r6, r0
 8009724:	d1d6      	bne.n	80096d4 <_svfiprintf_r+0x174>
 8009726:	89ab      	ldrh	r3, [r5, #12]
 8009728:	065b      	lsls	r3, r3, #25
 800972a:	f53f af2d 	bmi.w	8009588 <_svfiprintf_r+0x28>
 800972e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009730:	e72c      	b.n	800958c <_svfiprintf_r+0x2c>
 8009732:	ab03      	add	r3, sp, #12
 8009734:	9300      	str	r3, [sp, #0]
 8009736:	462a      	mov	r2, r5
 8009738:	4638      	mov	r0, r7
 800973a:	4b06      	ldr	r3, [pc, #24]	@ (8009754 <_svfiprintf_r+0x1f4>)
 800973c:	a904      	add	r1, sp, #16
 800973e:	f7fd fa57 	bl	8006bf0 <_printf_i>
 8009742:	e7ed      	b.n	8009720 <_svfiprintf_r+0x1c0>
 8009744:	0800c6b0 	.word	0x0800c6b0
 8009748:	0800c6b6 	.word	0x0800c6b6
 800974c:	0800c6ba 	.word	0x0800c6ba
 8009750:	080066b5 	.word	0x080066b5
 8009754:	080094ab 	.word	0x080094ab

08009758 <__sflush_r>:
 8009758:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800975c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800975e:	0716      	lsls	r6, r2, #28
 8009760:	4605      	mov	r5, r0
 8009762:	460c      	mov	r4, r1
 8009764:	d454      	bmi.n	8009810 <__sflush_r+0xb8>
 8009766:	684b      	ldr	r3, [r1, #4]
 8009768:	2b00      	cmp	r3, #0
 800976a:	dc02      	bgt.n	8009772 <__sflush_r+0x1a>
 800976c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800976e:	2b00      	cmp	r3, #0
 8009770:	dd48      	ble.n	8009804 <__sflush_r+0xac>
 8009772:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009774:	2e00      	cmp	r6, #0
 8009776:	d045      	beq.n	8009804 <__sflush_r+0xac>
 8009778:	2300      	movs	r3, #0
 800977a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800977e:	682f      	ldr	r7, [r5, #0]
 8009780:	6a21      	ldr	r1, [r4, #32]
 8009782:	602b      	str	r3, [r5, #0]
 8009784:	d030      	beq.n	80097e8 <__sflush_r+0x90>
 8009786:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009788:	89a3      	ldrh	r3, [r4, #12]
 800978a:	0759      	lsls	r1, r3, #29
 800978c:	d505      	bpl.n	800979a <__sflush_r+0x42>
 800978e:	6863      	ldr	r3, [r4, #4]
 8009790:	1ad2      	subs	r2, r2, r3
 8009792:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009794:	b10b      	cbz	r3, 800979a <__sflush_r+0x42>
 8009796:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009798:	1ad2      	subs	r2, r2, r3
 800979a:	2300      	movs	r3, #0
 800979c:	4628      	mov	r0, r5
 800979e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80097a0:	6a21      	ldr	r1, [r4, #32]
 80097a2:	47b0      	blx	r6
 80097a4:	1c43      	adds	r3, r0, #1
 80097a6:	89a3      	ldrh	r3, [r4, #12]
 80097a8:	d106      	bne.n	80097b8 <__sflush_r+0x60>
 80097aa:	6829      	ldr	r1, [r5, #0]
 80097ac:	291d      	cmp	r1, #29
 80097ae:	d82b      	bhi.n	8009808 <__sflush_r+0xb0>
 80097b0:	4a28      	ldr	r2, [pc, #160]	@ (8009854 <__sflush_r+0xfc>)
 80097b2:	410a      	asrs	r2, r1
 80097b4:	07d6      	lsls	r6, r2, #31
 80097b6:	d427      	bmi.n	8009808 <__sflush_r+0xb0>
 80097b8:	2200      	movs	r2, #0
 80097ba:	6062      	str	r2, [r4, #4]
 80097bc:	6922      	ldr	r2, [r4, #16]
 80097be:	04d9      	lsls	r1, r3, #19
 80097c0:	6022      	str	r2, [r4, #0]
 80097c2:	d504      	bpl.n	80097ce <__sflush_r+0x76>
 80097c4:	1c42      	adds	r2, r0, #1
 80097c6:	d101      	bne.n	80097cc <__sflush_r+0x74>
 80097c8:	682b      	ldr	r3, [r5, #0]
 80097ca:	b903      	cbnz	r3, 80097ce <__sflush_r+0x76>
 80097cc:	6560      	str	r0, [r4, #84]	@ 0x54
 80097ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097d0:	602f      	str	r7, [r5, #0]
 80097d2:	b1b9      	cbz	r1, 8009804 <__sflush_r+0xac>
 80097d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097d8:	4299      	cmp	r1, r3
 80097da:	d002      	beq.n	80097e2 <__sflush_r+0x8a>
 80097dc:	4628      	mov	r0, r5
 80097de:	f7fe fd67 	bl	80082b0 <_free_r>
 80097e2:	2300      	movs	r3, #0
 80097e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80097e6:	e00d      	b.n	8009804 <__sflush_r+0xac>
 80097e8:	2301      	movs	r3, #1
 80097ea:	4628      	mov	r0, r5
 80097ec:	47b0      	blx	r6
 80097ee:	4602      	mov	r2, r0
 80097f0:	1c50      	adds	r0, r2, #1
 80097f2:	d1c9      	bne.n	8009788 <__sflush_r+0x30>
 80097f4:	682b      	ldr	r3, [r5, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d0c6      	beq.n	8009788 <__sflush_r+0x30>
 80097fa:	2b1d      	cmp	r3, #29
 80097fc:	d001      	beq.n	8009802 <__sflush_r+0xaa>
 80097fe:	2b16      	cmp	r3, #22
 8009800:	d11d      	bne.n	800983e <__sflush_r+0xe6>
 8009802:	602f      	str	r7, [r5, #0]
 8009804:	2000      	movs	r0, #0
 8009806:	e021      	b.n	800984c <__sflush_r+0xf4>
 8009808:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800980c:	b21b      	sxth	r3, r3
 800980e:	e01a      	b.n	8009846 <__sflush_r+0xee>
 8009810:	690f      	ldr	r7, [r1, #16]
 8009812:	2f00      	cmp	r7, #0
 8009814:	d0f6      	beq.n	8009804 <__sflush_r+0xac>
 8009816:	0793      	lsls	r3, r2, #30
 8009818:	bf18      	it	ne
 800981a:	2300      	movne	r3, #0
 800981c:	680e      	ldr	r6, [r1, #0]
 800981e:	bf08      	it	eq
 8009820:	694b      	ldreq	r3, [r1, #20]
 8009822:	1bf6      	subs	r6, r6, r7
 8009824:	600f      	str	r7, [r1, #0]
 8009826:	608b      	str	r3, [r1, #8]
 8009828:	2e00      	cmp	r6, #0
 800982a:	ddeb      	ble.n	8009804 <__sflush_r+0xac>
 800982c:	4633      	mov	r3, r6
 800982e:	463a      	mov	r2, r7
 8009830:	4628      	mov	r0, r5
 8009832:	6a21      	ldr	r1, [r4, #32]
 8009834:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009838:	47e0      	blx	ip
 800983a:	2800      	cmp	r0, #0
 800983c:	dc07      	bgt.n	800984e <__sflush_r+0xf6>
 800983e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009842:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009846:	f04f 30ff 	mov.w	r0, #4294967295
 800984a:	81a3      	strh	r3, [r4, #12]
 800984c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800984e:	4407      	add	r7, r0
 8009850:	1a36      	subs	r6, r6, r0
 8009852:	e7e9      	b.n	8009828 <__sflush_r+0xd0>
 8009854:	dfbffffe 	.word	0xdfbffffe

08009858 <_fflush_r>:
 8009858:	b538      	push	{r3, r4, r5, lr}
 800985a:	690b      	ldr	r3, [r1, #16]
 800985c:	4605      	mov	r5, r0
 800985e:	460c      	mov	r4, r1
 8009860:	b913      	cbnz	r3, 8009868 <_fflush_r+0x10>
 8009862:	2500      	movs	r5, #0
 8009864:	4628      	mov	r0, r5
 8009866:	bd38      	pop	{r3, r4, r5, pc}
 8009868:	b118      	cbz	r0, 8009872 <_fflush_r+0x1a>
 800986a:	6a03      	ldr	r3, [r0, #32]
 800986c:	b90b      	cbnz	r3, 8009872 <_fflush_r+0x1a>
 800986e:	f7fd fd7b 	bl	8007368 <__sinit>
 8009872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d0f3      	beq.n	8009862 <_fflush_r+0xa>
 800987a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800987c:	07d0      	lsls	r0, r2, #31
 800987e:	d404      	bmi.n	800988a <_fflush_r+0x32>
 8009880:	0599      	lsls	r1, r3, #22
 8009882:	d402      	bmi.n	800988a <_fflush_r+0x32>
 8009884:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009886:	f7fd fe98 	bl	80075ba <__retarget_lock_acquire_recursive>
 800988a:	4628      	mov	r0, r5
 800988c:	4621      	mov	r1, r4
 800988e:	f7ff ff63 	bl	8009758 <__sflush_r>
 8009892:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009894:	4605      	mov	r5, r0
 8009896:	07da      	lsls	r2, r3, #31
 8009898:	d4e4      	bmi.n	8009864 <_fflush_r+0xc>
 800989a:	89a3      	ldrh	r3, [r4, #12]
 800989c:	059b      	lsls	r3, r3, #22
 800989e:	d4e1      	bmi.n	8009864 <_fflush_r+0xc>
 80098a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098a2:	f7fd fe8b 	bl	80075bc <__retarget_lock_release_recursive>
 80098a6:	e7dd      	b.n	8009864 <_fflush_r+0xc>

080098a8 <memmove>:
 80098a8:	4288      	cmp	r0, r1
 80098aa:	b510      	push	{r4, lr}
 80098ac:	eb01 0402 	add.w	r4, r1, r2
 80098b0:	d902      	bls.n	80098b8 <memmove+0x10>
 80098b2:	4284      	cmp	r4, r0
 80098b4:	4623      	mov	r3, r4
 80098b6:	d807      	bhi.n	80098c8 <memmove+0x20>
 80098b8:	1e43      	subs	r3, r0, #1
 80098ba:	42a1      	cmp	r1, r4
 80098bc:	d008      	beq.n	80098d0 <memmove+0x28>
 80098be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098c6:	e7f8      	b.n	80098ba <memmove+0x12>
 80098c8:	4601      	mov	r1, r0
 80098ca:	4402      	add	r2, r0
 80098cc:	428a      	cmp	r2, r1
 80098ce:	d100      	bne.n	80098d2 <memmove+0x2a>
 80098d0:	bd10      	pop	{r4, pc}
 80098d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80098da:	e7f7      	b.n	80098cc <memmove+0x24>

080098dc <_sbrk_r>:
 80098dc:	b538      	push	{r3, r4, r5, lr}
 80098de:	2300      	movs	r3, #0
 80098e0:	4d05      	ldr	r5, [pc, #20]	@ (80098f8 <_sbrk_r+0x1c>)
 80098e2:	4604      	mov	r4, r0
 80098e4:	4608      	mov	r0, r1
 80098e6:	602b      	str	r3, [r5, #0]
 80098e8:	f7f9 f974 	bl	8002bd4 <_sbrk>
 80098ec:	1c43      	adds	r3, r0, #1
 80098ee:	d102      	bne.n	80098f6 <_sbrk_r+0x1a>
 80098f0:	682b      	ldr	r3, [r5, #0]
 80098f2:	b103      	cbz	r3, 80098f6 <_sbrk_r+0x1a>
 80098f4:	6023      	str	r3, [r4, #0]
 80098f6:	bd38      	pop	{r3, r4, r5, pc}
 80098f8:	20000bac 	.word	0x20000bac

080098fc <__assert_func>:
 80098fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098fe:	4614      	mov	r4, r2
 8009900:	461a      	mov	r2, r3
 8009902:	4b09      	ldr	r3, [pc, #36]	@ (8009928 <__assert_func+0x2c>)
 8009904:	4605      	mov	r5, r0
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	68d8      	ldr	r0, [r3, #12]
 800990a:	b954      	cbnz	r4, 8009922 <__assert_func+0x26>
 800990c:	4b07      	ldr	r3, [pc, #28]	@ (800992c <__assert_func+0x30>)
 800990e:	461c      	mov	r4, r3
 8009910:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009914:	9100      	str	r1, [sp, #0]
 8009916:	462b      	mov	r3, r5
 8009918:	4905      	ldr	r1, [pc, #20]	@ (8009930 <__assert_func+0x34>)
 800991a:	f000 f84f 	bl	80099bc <fiprintf>
 800991e:	f000 f85f 	bl	80099e0 <abort>
 8009922:	4b04      	ldr	r3, [pc, #16]	@ (8009934 <__assert_func+0x38>)
 8009924:	e7f4      	b.n	8009910 <__assert_func+0x14>
 8009926:	bf00      	nop
 8009928:	2000019c 	.word	0x2000019c
 800992c:	0800c6fc 	.word	0x0800c6fc
 8009930:	0800c6ce 	.word	0x0800c6ce
 8009934:	0800c6c1 	.word	0x0800c6c1

08009938 <_calloc_r>:
 8009938:	b570      	push	{r4, r5, r6, lr}
 800993a:	fba1 5402 	umull	r5, r4, r1, r2
 800993e:	b93c      	cbnz	r4, 8009950 <_calloc_r+0x18>
 8009940:	4629      	mov	r1, r5
 8009942:	f7ff f861 	bl	8008a08 <_malloc_r>
 8009946:	4606      	mov	r6, r0
 8009948:	b928      	cbnz	r0, 8009956 <_calloc_r+0x1e>
 800994a:	2600      	movs	r6, #0
 800994c:	4630      	mov	r0, r6
 800994e:	bd70      	pop	{r4, r5, r6, pc}
 8009950:	220c      	movs	r2, #12
 8009952:	6002      	str	r2, [r0, #0]
 8009954:	e7f9      	b.n	800994a <_calloc_r+0x12>
 8009956:	462a      	mov	r2, r5
 8009958:	4621      	mov	r1, r4
 800995a:	f7fd fd9e 	bl	800749a <memset>
 800995e:	e7f5      	b.n	800994c <_calloc_r+0x14>

08009960 <_realloc_r>:
 8009960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009964:	4680      	mov	r8, r0
 8009966:	4615      	mov	r5, r2
 8009968:	460c      	mov	r4, r1
 800996a:	b921      	cbnz	r1, 8009976 <_realloc_r+0x16>
 800996c:	4611      	mov	r1, r2
 800996e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009972:	f7ff b849 	b.w	8008a08 <_malloc_r>
 8009976:	b92a      	cbnz	r2, 8009984 <_realloc_r+0x24>
 8009978:	f7fe fc9a 	bl	80082b0 <_free_r>
 800997c:	2400      	movs	r4, #0
 800997e:	4620      	mov	r0, r4
 8009980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009984:	f000 f833 	bl	80099ee <_malloc_usable_size_r>
 8009988:	4285      	cmp	r5, r0
 800998a:	4606      	mov	r6, r0
 800998c:	d802      	bhi.n	8009994 <_realloc_r+0x34>
 800998e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009992:	d8f4      	bhi.n	800997e <_realloc_r+0x1e>
 8009994:	4629      	mov	r1, r5
 8009996:	4640      	mov	r0, r8
 8009998:	f7ff f836 	bl	8008a08 <_malloc_r>
 800999c:	4607      	mov	r7, r0
 800999e:	2800      	cmp	r0, #0
 80099a0:	d0ec      	beq.n	800997c <_realloc_r+0x1c>
 80099a2:	42b5      	cmp	r5, r6
 80099a4:	462a      	mov	r2, r5
 80099a6:	4621      	mov	r1, r4
 80099a8:	bf28      	it	cs
 80099aa:	4632      	movcs	r2, r6
 80099ac:	f7fd fe15 	bl	80075da <memcpy>
 80099b0:	4621      	mov	r1, r4
 80099b2:	4640      	mov	r0, r8
 80099b4:	f7fe fc7c 	bl	80082b0 <_free_r>
 80099b8:	463c      	mov	r4, r7
 80099ba:	e7e0      	b.n	800997e <_realloc_r+0x1e>

080099bc <fiprintf>:
 80099bc:	b40e      	push	{r1, r2, r3}
 80099be:	b503      	push	{r0, r1, lr}
 80099c0:	4601      	mov	r1, r0
 80099c2:	ab03      	add	r3, sp, #12
 80099c4:	4805      	ldr	r0, [pc, #20]	@ (80099dc <fiprintf+0x20>)
 80099c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80099ca:	6800      	ldr	r0, [r0, #0]
 80099cc:	9301      	str	r3, [sp, #4]
 80099ce:	f000 f83d 	bl	8009a4c <_vfiprintf_r>
 80099d2:	b002      	add	sp, #8
 80099d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80099d8:	b003      	add	sp, #12
 80099da:	4770      	bx	lr
 80099dc:	2000019c 	.word	0x2000019c

080099e0 <abort>:
 80099e0:	2006      	movs	r0, #6
 80099e2:	b508      	push	{r3, lr}
 80099e4:	f000 fa06 	bl	8009df4 <raise>
 80099e8:	2001      	movs	r0, #1
 80099ea:	f7f9 f87e 	bl	8002aea <_exit>

080099ee <_malloc_usable_size_r>:
 80099ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099f2:	1f18      	subs	r0, r3, #4
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	bfbc      	itt	lt
 80099f8:	580b      	ldrlt	r3, [r1, r0]
 80099fa:	18c0      	addlt	r0, r0, r3
 80099fc:	4770      	bx	lr

080099fe <__sfputc_r>:
 80099fe:	6893      	ldr	r3, [r2, #8]
 8009a00:	b410      	push	{r4}
 8009a02:	3b01      	subs	r3, #1
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	6093      	str	r3, [r2, #8]
 8009a08:	da07      	bge.n	8009a1a <__sfputc_r+0x1c>
 8009a0a:	6994      	ldr	r4, [r2, #24]
 8009a0c:	42a3      	cmp	r3, r4
 8009a0e:	db01      	blt.n	8009a14 <__sfputc_r+0x16>
 8009a10:	290a      	cmp	r1, #10
 8009a12:	d102      	bne.n	8009a1a <__sfputc_r+0x1c>
 8009a14:	bc10      	pop	{r4}
 8009a16:	f000 b931 	b.w	8009c7c <__swbuf_r>
 8009a1a:	6813      	ldr	r3, [r2, #0]
 8009a1c:	1c58      	adds	r0, r3, #1
 8009a1e:	6010      	str	r0, [r2, #0]
 8009a20:	7019      	strb	r1, [r3, #0]
 8009a22:	4608      	mov	r0, r1
 8009a24:	bc10      	pop	{r4}
 8009a26:	4770      	bx	lr

08009a28 <__sfputs_r>:
 8009a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a2a:	4606      	mov	r6, r0
 8009a2c:	460f      	mov	r7, r1
 8009a2e:	4614      	mov	r4, r2
 8009a30:	18d5      	adds	r5, r2, r3
 8009a32:	42ac      	cmp	r4, r5
 8009a34:	d101      	bne.n	8009a3a <__sfputs_r+0x12>
 8009a36:	2000      	movs	r0, #0
 8009a38:	e007      	b.n	8009a4a <__sfputs_r+0x22>
 8009a3a:	463a      	mov	r2, r7
 8009a3c:	4630      	mov	r0, r6
 8009a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a42:	f7ff ffdc 	bl	80099fe <__sfputc_r>
 8009a46:	1c43      	adds	r3, r0, #1
 8009a48:	d1f3      	bne.n	8009a32 <__sfputs_r+0xa>
 8009a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009a4c <_vfiprintf_r>:
 8009a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a50:	460d      	mov	r5, r1
 8009a52:	4614      	mov	r4, r2
 8009a54:	4698      	mov	r8, r3
 8009a56:	4606      	mov	r6, r0
 8009a58:	b09d      	sub	sp, #116	@ 0x74
 8009a5a:	b118      	cbz	r0, 8009a64 <_vfiprintf_r+0x18>
 8009a5c:	6a03      	ldr	r3, [r0, #32]
 8009a5e:	b90b      	cbnz	r3, 8009a64 <_vfiprintf_r+0x18>
 8009a60:	f7fd fc82 	bl	8007368 <__sinit>
 8009a64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a66:	07d9      	lsls	r1, r3, #31
 8009a68:	d405      	bmi.n	8009a76 <_vfiprintf_r+0x2a>
 8009a6a:	89ab      	ldrh	r3, [r5, #12]
 8009a6c:	059a      	lsls	r2, r3, #22
 8009a6e:	d402      	bmi.n	8009a76 <_vfiprintf_r+0x2a>
 8009a70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a72:	f7fd fda2 	bl	80075ba <__retarget_lock_acquire_recursive>
 8009a76:	89ab      	ldrh	r3, [r5, #12]
 8009a78:	071b      	lsls	r3, r3, #28
 8009a7a:	d501      	bpl.n	8009a80 <_vfiprintf_r+0x34>
 8009a7c:	692b      	ldr	r3, [r5, #16]
 8009a7e:	b99b      	cbnz	r3, 8009aa8 <_vfiprintf_r+0x5c>
 8009a80:	4629      	mov	r1, r5
 8009a82:	4630      	mov	r0, r6
 8009a84:	f000 f938 	bl	8009cf8 <__swsetup_r>
 8009a88:	b170      	cbz	r0, 8009aa8 <_vfiprintf_r+0x5c>
 8009a8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a8c:	07dc      	lsls	r4, r3, #31
 8009a8e:	d504      	bpl.n	8009a9a <_vfiprintf_r+0x4e>
 8009a90:	f04f 30ff 	mov.w	r0, #4294967295
 8009a94:	b01d      	add	sp, #116	@ 0x74
 8009a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a9a:	89ab      	ldrh	r3, [r5, #12]
 8009a9c:	0598      	lsls	r0, r3, #22
 8009a9e:	d4f7      	bmi.n	8009a90 <_vfiprintf_r+0x44>
 8009aa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009aa2:	f7fd fd8b 	bl	80075bc <__retarget_lock_release_recursive>
 8009aa6:	e7f3      	b.n	8009a90 <_vfiprintf_r+0x44>
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8009aac:	2320      	movs	r3, #32
 8009aae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ab2:	2330      	movs	r3, #48	@ 0x30
 8009ab4:	f04f 0901 	mov.w	r9, #1
 8009ab8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009abc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009c68 <_vfiprintf_r+0x21c>
 8009ac0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ac4:	4623      	mov	r3, r4
 8009ac6:	469a      	mov	sl, r3
 8009ac8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009acc:	b10a      	cbz	r2, 8009ad2 <_vfiprintf_r+0x86>
 8009ace:	2a25      	cmp	r2, #37	@ 0x25
 8009ad0:	d1f9      	bne.n	8009ac6 <_vfiprintf_r+0x7a>
 8009ad2:	ebba 0b04 	subs.w	fp, sl, r4
 8009ad6:	d00b      	beq.n	8009af0 <_vfiprintf_r+0xa4>
 8009ad8:	465b      	mov	r3, fp
 8009ada:	4622      	mov	r2, r4
 8009adc:	4629      	mov	r1, r5
 8009ade:	4630      	mov	r0, r6
 8009ae0:	f7ff ffa2 	bl	8009a28 <__sfputs_r>
 8009ae4:	3001      	adds	r0, #1
 8009ae6:	f000 80a7 	beq.w	8009c38 <_vfiprintf_r+0x1ec>
 8009aea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009aec:	445a      	add	r2, fp
 8009aee:	9209      	str	r2, [sp, #36]	@ 0x24
 8009af0:	f89a 3000 	ldrb.w	r3, [sl]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	f000 809f 	beq.w	8009c38 <_vfiprintf_r+0x1ec>
 8009afa:	2300      	movs	r3, #0
 8009afc:	f04f 32ff 	mov.w	r2, #4294967295
 8009b00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b04:	f10a 0a01 	add.w	sl, sl, #1
 8009b08:	9304      	str	r3, [sp, #16]
 8009b0a:	9307      	str	r3, [sp, #28]
 8009b0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b10:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b12:	4654      	mov	r4, sl
 8009b14:	2205      	movs	r2, #5
 8009b16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b1a:	4853      	ldr	r0, [pc, #332]	@ (8009c68 <_vfiprintf_r+0x21c>)
 8009b1c:	f7fd fd4f 	bl	80075be <memchr>
 8009b20:	9a04      	ldr	r2, [sp, #16]
 8009b22:	b9d8      	cbnz	r0, 8009b5c <_vfiprintf_r+0x110>
 8009b24:	06d1      	lsls	r1, r2, #27
 8009b26:	bf44      	itt	mi
 8009b28:	2320      	movmi	r3, #32
 8009b2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b2e:	0713      	lsls	r3, r2, #28
 8009b30:	bf44      	itt	mi
 8009b32:	232b      	movmi	r3, #43	@ 0x2b
 8009b34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b38:	f89a 3000 	ldrb.w	r3, [sl]
 8009b3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b3e:	d015      	beq.n	8009b6c <_vfiprintf_r+0x120>
 8009b40:	4654      	mov	r4, sl
 8009b42:	2000      	movs	r0, #0
 8009b44:	f04f 0c0a 	mov.w	ip, #10
 8009b48:	9a07      	ldr	r2, [sp, #28]
 8009b4a:	4621      	mov	r1, r4
 8009b4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b50:	3b30      	subs	r3, #48	@ 0x30
 8009b52:	2b09      	cmp	r3, #9
 8009b54:	d94b      	bls.n	8009bee <_vfiprintf_r+0x1a2>
 8009b56:	b1b0      	cbz	r0, 8009b86 <_vfiprintf_r+0x13a>
 8009b58:	9207      	str	r2, [sp, #28]
 8009b5a:	e014      	b.n	8009b86 <_vfiprintf_r+0x13a>
 8009b5c:	eba0 0308 	sub.w	r3, r0, r8
 8009b60:	fa09 f303 	lsl.w	r3, r9, r3
 8009b64:	4313      	orrs	r3, r2
 8009b66:	46a2      	mov	sl, r4
 8009b68:	9304      	str	r3, [sp, #16]
 8009b6a:	e7d2      	b.n	8009b12 <_vfiprintf_r+0xc6>
 8009b6c:	9b03      	ldr	r3, [sp, #12]
 8009b6e:	1d19      	adds	r1, r3, #4
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	9103      	str	r1, [sp, #12]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	bfbb      	ittet	lt
 8009b78:	425b      	neglt	r3, r3
 8009b7a:	f042 0202 	orrlt.w	r2, r2, #2
 8009b7e:	9307      	strge	r3, [sp, #28]
 8009b80:	9307      	strlt	r3, [sp, #28]
 8009b82:	bfb8      	it	lt
 8009b84:	9204      	strlt	r2, [sp, #16]
 8009b86:	7823      	ldrb	r3, [r4, #0]
 8009b88:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b8a:	d10a      	bne.n	8009ba2 <_vfiprintf_r+0x156>
 8009b8c:	7863      	ldrb	r3, [r4, #1]
 8009b8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b90:	d132      	bne.n	8009bf8 <_vfiprintf_r+0x1ac>
 8009b92:	9b03      	ldr	r3, [sp, #12]
 8009b94:	3402      	adds	r4, #2
 8009b96:	1d1a      	adds	r2, r3, #4
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	9203      	str	r2, [sp, #12]
 8009b9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009ba0:	9305      	str	r3, [sp, #20]
 8009ba2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009c6c <_vfiprintf_r+0x220>
 8009ba6:	2203      	movs	r2, #3
 8009ba8:	4650      	mov	r0, sl
 8009baa:	7821      	ldrb	r1, [r4, #0]
 8009bac:	f7fd fd07 	bl	80075be <memchr>
 8009bb0:	b138      	cbz	r0, 8009bc2 <_vfiprintf_r+0x176>
 8009bb2:	2240      	movs	r2, #64	@ 0x40
 8009bb4:	9b04      	ldr	r3, [sp, #16]
 8009bb6:	eba0 000a 	sub.w	r0, r0, sl
 8009bba:	4082      	lsls	r2, r0
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	3401      	adds	r4, #1
 8009bc0:	9304      	str	r3, [sp, #16]
 8009bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bc6:	2206      	movs	r2, #6
 8009bc8:	4829      	ldr	r0, [pc, #164]	@ (8009c70 <_vfiprintf_r+0x224>)
 8009bca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009bce:	f7fd fcf6 	bl	80075be <memchr>
 8009bd2:	2800      	cmp	r0, #0
 8009bd4:	d03f      	beq.n	8009c56 <_vfiprintf_r+0x20a>
 8009bd6:	4b27      	ldr	r3, [pc, #156]	@ (8009c74 <_vfiprintf_r+0x228>)
 8009bd8:	bb1b      	cbnz	r3, 8009c22 <_vfiprintf_r+0x1d6>
 8009bda:	9b03      	ldr	r3, [sp, #12]
 8009bdc:	3307      	adds	r3, #7
 8009bde:	f023 0307 	bic.w	r3, r3, #7
 8009be2:	3308      	adds	r3, #8
 8009be4:	9303      	str	r3, [sp, #12]
 8009be6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009be8:	443b      	add	r3, r7
 8009bea:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bec:	e76a      	b.n	8009ac4 <_vfiprintf_r+0x78>
 8009bee:	460c      	mov	r4, r1
 8009bf0:	2001      	movs	r0, #1
 8009bf2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bf6:	e7a8      	b.n	8009b4a <_vfiprintf_r+0xfe>
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	f04f 0c0a 	mov.w	ip, #10
 8009bfe:	4619      	mov	r1, r3
 8009c00:	3401      	adds	r4, #1
 8009c02:	9305      	str	r3, [sp, #20]
 8009c04:	4620      	mov	r0, r4
 8009c06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c0a:	3a30      	subs	r2, #48	@ 0x30
 8009c0c:	2a09      	cmp	r2, #9
 8009c0e:	d903      	bls.n	8009c18 <_vfiprintf_r+0x1cc>
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d0c6      	beq.n	8009ba2 <_vfiprintf_r+0x156>
 8009c14:	9105      	str	r1, [sp, #20]
 8009c16:	e7c4      	b.n	8009ba2 <_vfiprintf_r+0x156>
 8009c18:	4604      	mov	r4, r0
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c20:	e7f0      	b.n	8009c04 <_vfiprintf_r+0x1b8>
 8009c22:	ab03      	add	r3, sp, #12
 8009c24:	9300      	str	r3, [sp, #0]
 8009c26:	462a      	mov	r2, r5
 8009c28:	4630      	mov	r0, r6
 8009c2a:	4b13      	ldr	r3, [pc, #76]	@ (8009c78 <_vfiprintf_r+0x22c>)
 8009c2c:	a904      	add	r1, sp, #16
 8009c2e:	f7fc fd41 	bl	80066b4 <_printf_float>
 8009c32:	4607      	mov	r7, r0
 8009c34:	1c78      	adds	r0, r7, #1
 8009c36:	d1d6      	bne.n	8009be6 <_vfiprintf_r+0x19a>
 8009c38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c3a:	07d9      	lsls	r1, r3, #31
 8009c3c:	d405      	bmi.n	8009c4a <_vfiprintf_r+0x1fe>
 8009c3e:	89ab      	ldrh	r3, [r5, #12]
 8009c40:	059a      	lsls	r2, r3, #22
 8009c42:	d402      	bmi.n	8009c4a <_vfiprintf_r+0x1fe>
 8009c44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c46:	f7fd fcb9 	bl	80075bc <__retarget_lock_release_recursive>
 8009c4a:	89ab      	ldrh	r3, [r5, #12]
 8009c4c:	065b      	lsls	r3, r3, #25
 8009c4e:	f53f af1f 	bmi.w	8009a90 <_vfiprintf_r+0x44>
 8009c52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c54:	e71e      	b.n	8009a94 <_vfiprintf_r+0x48>
 8009c56:	ab03      	add	r3, sp, #12
 8009c58:	9300      	str	r3, [sp, #0]
 8009c5a:	462a      	mov	r2, r5
 8009c5c:	4630      	mov	r0, r6
 8009c5e:	4b06      	ldr	r3, [pc, #24]	@ (8009c78 <_vfiprintf_r+0x22c>)
 8009c60:	a904      	add	r1, sp, #16
 8009c62:	f7fc ffc5 	bl	8006bf0 <_printf_i>
 8009c66:	e7e4      	b.n	8009c32 <_vfiprintf_r+0x1e6>
 8009c68:	0800c6b0 	.word	0x0800c6b0
 8009c6c:	0800c6b6 	.word	0x0800c6b6
 8009c70:	0800c6ba 	.word	0x0800c6ba
 8009c74:	080066b5 	.word	0x080066b5
 8009c78:	08009a29 	.word	0x08009a29

08009c7c <__swbuf_r>:
 8009c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c7e:	460e      	mov	r6, r1
 8009c80:	4614      	mov	r4, r2
 8009c82:	4605      	mov	r5, r0
 8009c84:	b118      	cbz	r0, 8009c8e <__swbuf_r+0x12>
 8009c86:	6a03      	ldr	r3, [r0, #32]
 8009c88:	b90b      	cbnz	r3, 8009c8e <__swbuf_r+0x12>
 8009c8a:	f7fd fb6d 	bl	8007368 <__sinit>
 8009c8e:	69a3      	ldr	r3, [r4, #24]
 8009c90:	60a3      	str	r3, [r4, #8]
 8009c92:	89a3      	ldrh	r3, [r4, #12]
 8009c94:	071a      	lsls	r2, r3, #28
 8009c96:	d501      	bpl.n	8009c9c <__swbuf_r+0x20>
 8009c98:	6923      	ldr	r3, [r4, #16]
 8009c9a:	b943      	cbnz	r3, 8009cae <__swbuf_r+0x32>
 8009c9c:	4621      	mov	r1, r4
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	f000 f82a 	bl	8009cf8 <__swsetup_r>
 8009ca4:	b118      	cbz	r0, 8009cae <__swbuf_r+0x32>
 8009ca6:	f04f 37ff 	mov.w	r7, #4294967295
 8009caa:	4638      	mov	r0, r7
 8009cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cae:	6823      	ldr	r3, [r4, #0]
 8009cb0:	6922      	ldr	r2, [r4, #16]
 8009cb2:	b2f6      	uxtb	r6, r6
 8009cb4:	1a98      	subs	r0, r3, r2
 8009cb6:	6963      	ldr	r3, [r4, #20]
 8009cb8:	4637      	mov	r7, r6
 8009cba:	4283      	cmp	r3, r0
 8009cbc:	dc05      	bgt.n	8009cca <__swbuf_r+0x4e>
 8009cbe:	4621      	mov	r1, r4
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	f7ff fdc9 	bl	8009858 <_fflush_r>
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	d1ed      	bne.n	8009ca6 <__swbuf_r+0x2a>
 8009cca:	68a3      	ldr	r3, [r4, #8]
 8009ccc:	3b01      	subs	r3, #1
 8009cce:	60a3      	str	r3, [r4, #8]
 8009cd0:	6823      	ldr	r3, [r4, #0]
 8009cd2:	1c5a      	adds	r2, r3, #1
 8009cd4:	6022      	str	r2, [r4, #0]
 8009cd6:	701e      	strb	r6, [r3, #0]
 8009cd8:	6962      	ldr	r2, [r4, #20]
 8009cda:	1c43      	adds	r3, r0, #1
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d004      	beq.n	8009cea <__swbuf_r+0x6e>
 8009ce0:	89a3      	ldrh	r3, [r4, #12]
 8009ce2:	07db      	lsls	r3, r3, #31
 8009ce4:	d5e1      	bpl.n	8009caa <__swbuf_r+0x2e>
 8009ce6:	2e0a      	cmp	r6, #10
 8009ce8:	d1df      	bne.n	8009caa <__swbuf_r+0x2e>
 8009cea:	4621      	mov	r1, r4
 8009cec:	4628      	mov	r0, r5
 8009cee:	f7ff fdb3 	bl	8009858 <_fflush_r>
 8009cf2:	2800      	cmp	r0, #0
 8009cf4:	d0d9      	beq.n	8009caa <__swbuf_r+0x2e>
 8009cf6:	e7d6      	b.n	8009ca6 <__swbuf_r+0x2a>

08009cf8 <__swsetup_r>:
 8009cf8:	b538      	push	{r3, r4, r5, lr}
 8009cfa:	4b29      	ldr	r3, [pc, #164]	@ (8009da0 <__swsetup_r+0xa8>)
 8009cfc:	4605      	mov	r5, r0
 8009cfe:	6818      	ldr	r0, [r3, #0]
 8009d00:	460c      	mov	r4, r1
 8009d02:	b118      	cbz	r0, 8009d0c <__swsetup_r+0x14>
 8009d04:	6a03      	ldr	r3, [r0, #32]
 8009d06:	b90b      	cbnz	r3, 8009d0c <__swsetup_r+0x14>
 8009d08:	f7fd fb2e 	bl	8007368 <__sinit>
 8009d0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d10:	0719      	lsls	r1, r3, #28
 8009d12:	d422      	bmi.n	8009d5a <__swsetup_r+0x62>
 8009d14:	06da      	lsls	r2, r3, #27
 8009d16:	d407      	bmi.n	8009d28 <__swsetup_r+0x30>
 8009d18:	2209      	movs	r2, #9
 8009d1a:	602a      	str	r2, [r5, #0]
 8009d1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d20:	f04f 30ff 	mov.w	r0, #4294967295
 8009d24:	81a3      	strh	r3, [r4, #12]
 8009d26:	e033      	b.n	8009d90 <__swsetup_r+0x98>
 8009d28:	0758      	lsls	r0, r3, #29
 8009d2a:	d512      	bpl.n	8009d52 <__swsetup_r+0x5a>
 8009d2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d2e:	b141      	cbz	r1, 8009d42 <__swsetup_r+0x4a>
 8009d30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d34:	4299      	cmp	r1, r3
 8009d36:	d002      	beq.n	8009d3e <__swsetup_r+0x46>
 8009d38:	4628      	mov	r0, r5
 8009d3a:	f7fe fab9 	bl	80082b0 <_free_r>
 8009d3e:	2300      	movs	r3, #0
 8009d40:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d42:	89a3      	ldrh	r3, [r4, #12]
 8009d44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009d48:	81a3      	strh	r3, [r4, #12]
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	6063      	str	r3, [r4, #4]
 8009d4e:	6923      	ldr	r3, [r4, #16]
 8009d50:	6023      	str	r3, [r4, #0]
 8009d52:	89a3      	ldrh	r3, [r4, #12]
 8009d54:	f043 0308 	orr.w	r3, r3, #8
 8009d58:	81a3      	strh	r3, [r4, #12]
 8009d5a:	6923      	ldr	r3, [r4, #16]
 8009d5c:	b94b      	cbnz	r3, 8009d72 <__swsetup_r+0x7a>
 8009d5e:	89a3      	ldrh	r3, [r4, #12]
 8009d60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009d64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d68:	d003      	beq.n	8009d72 <__swsetup_r+0x7a>
 8009d6a:	4621      	mov	r1, r4
 8009d6c:	4628      	mov	r0, r5
 8009d6e:	f000 f882 	bl	8009e76 <__smakebuf_r>
 8009d72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d76:	f013 0201 	ands.w	r2, r3, #1
 8009d7a:	d00a      	beq.n	8009d92 <__swsetup_r+0x9a>
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	60a2      	str	r2, [r4, #8]
 8009d80:	6962      	ldr	r2, [r4, #20]
 8009d82:	4252      	negs	r2, r2
 8009d84:	61a2      	str	r2, [r4, #24]
 8009d86:	6922      	ldr	r2, [r4, #16]
 8009d88:	b942      	cbnz	r2, 8009d9c <__swsetup_r+0xa4>
 8009d8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009d8e:	d1c5      	bne.n	8009d1c <__swsetup_r+0x24>
 8009d90:	bd38      	pop	{r3, r4, r5, pc}
 8009d92:	0799      	lsls	r1, r3, #30
 8009d94:	bf58      	it	pl
 8009d96:	6962      	ldrpl	r2, [r4, #20]
 8009d98:	60a2      	str	r2, [r4, #8]
 8009d9a:	e7f4      	b.n	8009d86 <__swsetup_r+0x8e>
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	e7f7      	b.n	8009d90 <__swsetup_r+0x98>
 8009da0:	2000019c 	.word	0x2000019c

08009da4 <_raise_r>:
 8009da4:	291f      	cmp	r1, #31
 8009da6:	b538      	push	{r3, r4, r5, lr}
 8009da8:	4605      	mov	r5, r0
 8009daa:	460c      	mov	r4, r1
 8009dac:	d904      	bls.n	8009db8 <_raise_r+0x14>
 8009dae:	2316      	movs	r3, #22
 8009db0:	6003      	str	r3, [r0, #0]
 8009db2:	f04f 30ff 	mov.w	r0, #4294967295
 8009db6:	bd38      	pop	{r3, r4, r5, pc}
 8009db8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009dba:	b112      	cbz	r2, 8009dc2 <_raise_r+0x1e>
 8009dbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009dc0:	b94b      	cbnz	r3, 8009dd6 <_raise_r+0x32>
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	f000 f830 	bl	8009e28 <_getpid_r>
 8009dc8:	4622      	mov	r2, r4
 8009dca:	4601      	mov	r1, r0
 8009dcc:	4628      	mov	r0, r5
 8009dce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dd2:	f000 b817 	b.w	8009e04 <_kill_r>
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d00a      	beq.n	8009df0 <_raise_r+0x4c>
 8009dda:	1c59      	adds	r1, r3, #1
 8009ddc:	d103      	bne.n	8009de6 <_raise_r+0x42>
 8009dde:	2316      	movs	r3, #22
 8009de0:	6003      	str	r3, [r0, #0]
 8009de2:	2001      	movs	r0, #1
 8009de4:	e7e7      	b.n	8009db6 <_raise_r+0x12>
 8009de6:	2100      	movs	r1, #0
 8009de8:	4620      	mov	r0, r4
 8009dea:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009dee:	4798      	blx	r3
 8009df0:	2000      	movs	r0, #0
 8009df2:	e7e0      	b.n	8009db6 <_raise_r+0x12>

08009df4 <raise>:
 8009df4:	4b02      	ldr	r3, [pc, #8]	@ (8009e00 <raise+0xc>)
 8009df6:	4601      	mov	r1, r0
 8009df8:	6818      	ldr	r0, [r3, #0]
 8009dfa:	f7ff bfd3 	b.w	8009da4 <_raise_r>
 8009dfe:	bf00      	nop
 8009e00:	2000019c 	.word	0x2000019c

08009e04 <_kill_r>:
 8009e04:	b538      	push	{r3, r4, r5, lr}
 8009e06:	2300      	movs	r3, #0
 8009e08:	4d06      	ldr	r5, [pc, #24]	@ (8009e24 <_kill_r+0x20>)
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	4608      	mov	r0, r1
 8009e0e:	4611      	mov	r1, r2
 8009e10:	602b      	str	r3, [r5, #0]
 8009e12:	f7f8 fe5a 	bl	8002aca <_kill>
 8009e16:	1c43      	adds	r3, r0, #1
 8009e18:	d102      	bne.n	8009e20 <_kill_r+0x1c>
 8009e1a:	682b      	ldr	r3, [r5, #0]
 8009e1c:	b103      	cbz	r3, 8009e20 <_kill_r+0x1c>
 8009e1e:	6023      	str	r3, [r4, #0]
 8009e20:	bd38      	pop	{r3, r4, r5, pc}
 8009e22:	bf00      	nop
 8009e24:	20000bac 	.word	0x20000bac

08009e28 <_getpid_r>:
 8009e28:	f7f8 be48 	b.w	8002abc <_getpid>

08009e2c <__swhatbuf_r>:
 8009e2c:	b570      	push	{r4, r5, r6, lr}
 8009e2e:	460c      	mov	r4, r1
 8009e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e34:	4615      	mov	r5, r2
 8009e36:	2900      	cmp	r1, #0
 8009e38:	461e      	mov	r6, r3
 8009e3a:	b096      	sub	sp, #88	@ 0x58
 8009e3c:	da0c      	bge.n	8009e58 <__swhatbuf_r+0x2c>
 8009e3e:	89a3      	ldrh	r3, [r4, #12]
 8009e40:	2100      	movs	r1, #0
 8009e42:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009e46:	bf14      	ite	ne
 8009e48:	2340      	movne	r3, #64	@ 0x40
 8009e4a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009e4e:	2000      	movs	r0, #0
 8009e50:	6031      	str	r1, [r6, #0]
 8009e52:	602b      	str	r3, [r5, #0]
 8009e54:	b016      	add	sp, #88	@ 0x58
 8009e56:	bd70      	pop	{r4, r5, r6, pc}
 8009e58:	466a      	mov	r2, sp
 8009e5a:	f000 f849 	bl	8009ef0 <_fstat_r>
 8009e5e:	2800      	cmp	r0, #0
 8009e60:	dbed      	blt.n	8009e3e <__swhatbuf_r+0x12>
 8009e62:	9901      	ldr	r1, [sp, #4]
 8009e64:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009e68:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009e6c:	4259      	negs	r1, r3
 8009e6e:	4159      	adcs	r1, r3
 8009e70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e74:	e7eb      	b.n	8009e4e <__swhatbuf_r+0x22>

08009e76 <__smakebuf_r>:
 8009e76:	898b      	ldrh	r3, [r1, #12]
 8009e78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e7a:	079d      	lsls	r5, r3, #30
 8009e7c:	4606      	mov	r6, r0
 8009e7e:	460c      	mov	r4, r1
 8009e80:	d507      	bpl.n	8009e92 <__smakebuf_r+0x1c>
 8009e82:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009e86:	6023      	str	r3, [r4, #0]
 8009e88:	6123      	str	r3, [r4, #16]
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	6163      	str	r3, [r4, #20]
 8009e8e:	b003      	add	sp, #12
 8009e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e92:	466a      	mov	r2, sp
 8009e94:	ab01      	add	r3, sp, #4
 8009e96:	f7ff ffc9 	bl	8009e2c <__swhatbuf_r>
 8009e9a:	9f00      	ldr	r7, [sp, #0]
 8009e9c:	4605      	mov	r5, r0
 8009e9e:	4639      	mov	r1, r7
 8009ea0:	4630      	mov	r0, r6
 8009ea2:	f7fe fdb1 	bl	8008a08 <_malloc_r>
 8009ea6:	b948      	cbnz	r0, 8009ebc <__smakebuf_r+0x46>
 8009ea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eac:	059a      	lsls	r2, r3, #22
 8009eae:	d4ee      	bmi.n	8009e8e <__smakebuf_r+0x18>
 8009eb0:	f023 0303 	bic.w	r3, r3, #3
 8009eb4:	f043 0302 	orr.w	r3, r3, #2
 8009eb8:	81a3      	strh	r3, [r4, #12]
 8009eba:	e7e2      	b.n	8009e82 <__smakebuf_r+0xc>
 8009ebc:	89a3      	ldrh	r3, [r4, #12]
 8009ebe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009ec2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ec6:	81a3      	strh	r3, [r4, #12]
 8009ec8:	9b01      	ldr	r3, [sp, #4]
 8009eca:	6020      	str	r0, [r4, #0]
 8009ecc:	b15b      	cbz	r3, 8009ee6 <__smakebuf_r+0x70>
 8009ece:	4630      	mov	r0, r6
 8009ed0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ed4:	f000 f81e 	bl	8009f14 <_isatty_r>
 8009ed8:	b128      	cbz	r0, 8009ee6 <__smakebuf_r+0x70>
 8009eda:	89a3      	ldrh	r3, [r4, #12]
 8009edc:	f023 0303 	bic.w	r3, r3, #3
 8009ee0:	f043 0301 	orr.w	r3, r3, #1
 8009ee4:	81a3      	strh	r3, [r4, #12]
 8009ee6:	89a3      	ldrh	r3, [r4, #12]
 8009ee8:	431d      	orrs	r5, r3
 8009eea:	81a5      	strh	r5, [r4, #12]
 8009eec:	e7cf      	b.n	8009e8e <__smakebuf_r+0x18>
	...

08009ef0 <_fstat_r>:
 8009ef0:	b538      	push	{r3, r4, r5, lr}
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	4d06      	ldr	r5, [pc, #24]	@ (8009f10 <_fstat_r+0x20>)
 8009ef6:	4604      	mov	r4, r0
 8009ef8:	4608      	mov	r0, r1
 8009efa:	4611      	mov	r1, r2
 8009efc:	602b      	str	r3, [r5, #0]
 8009efe:	f7f8 fe43 	bl	8002b88 <_fstat>
 8009f02:	1c43      	adds	r3, r0, #1
 8009f04:	d102      	bne.n	8009f0c <_fstat_r+0x1c>
 8009f06:	682b      	ldr	r3, [r5, #0]
 8009f08:	b103      	cbz	r3, 8009f0c <_fstat_r+0x1c>
 8009f0a:	6023      	str	r3, [r4, #0]
 8009f0c:	bd38      	pop	{r3, r4, r5, pc}
 8009f0e:	bf00      	nop
 8009f10:	20000bac 	.word	0x20000bac

08009f14 <_isatty_r>:
 8009f14:	b538      	push	{r3, r4, r5, lr}
 8009f16:	2300      	movs	r3, #0
 8009f18:	4d05      	ldr	r5, [pc, #20]	@ (8009f30 <_isatty_r+0x1c>)
 8009f1a:	4604      	mov	r4, r0
 8009f1c:	4608      	mov	r0, r1
 8009f1e:	602b      	str	r3, [r5, #0]
 8009f20:	f7f8 fe41 	bl	8002ba6 <_isatty>
 8009f24:	1c43      	adds	r3, r0, #1
 8009f26:	d102      	bne.n	8009f2e <_isatty_r+0x1a>
 8009f28:	682b      	ldr	r3, [r5, #0]
 8009f2a:	b103      	cbz	r3, 8009f2e <_isatty_r+0x1a>
 8009f2c:	6023      	str	r3, [r4, #0]
 8009f2e:	bd38      	pop	{r3, r4, r5, pc}
 8009f30:	20000bac 	.word	0x20000bac

08009f34 <pow>:
 8009f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f38:	4614      	mov	r4, r2
 8009f3a:	461d      	mov	r5, r3
 8009f3c:	4680      	mov	r8, r0
 8009f3e:	4689      	mov	r9, r1
 8009f40:	f000 f866 	bl	800a010 <__ieee754_pow>
 8009f44:	4622      	mov	r2, r4
 8009f46:	4606      	mov	r6, r0
 8009f48:	460f      	mov	r7, r1
 8009f4a:	462b      	mov	r3, r5
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	4629      	mov	r1, r5
 8009f50:	f7f6 fd5c 	bl	8000a0c <__aeabi_dcmpun>
 8009f54:	bbc8      	cbnz	r0, 8009fca <pow+0x96>
 8009f56:	2200      	movs	r2, #0
 8009f58:	2300      	movs	r3, #0
 8009f5a:	4640      	mov	r0, r8
 8009f5c:	4649      	mov	r1, r9
 8009f5e:	f7f6 fd23 	bl	80009a8 <__aeabi_dcmpeq>
 8009f62:	b1b8      	cbz	r0, 8009f94 <pow+0x60>
 8009f64:	2200      	movs	r2, #0
 8009f66:	2300      	movs	r3, #0
 8009f68:	4620      	mov	r0, r4
 8009f6a:	4629      	mov	r1, r5
 8009f6c:	f7f6 fd1c 	bl	80009a8 <__aeabi_dcmpeq>
 8009f70:	2800      	cmp	r0, #0
 8009f72:	d141      	bne.n	8009ff8 <pow+0xc4>
 8009f74:	4620      	mov	r0, r4
 8009f76:	4629      	mov	r1, r5
 8009f78:	f000 f844 	bl	800a004 <finite>
 8009f7c:	b328      	cbz	r0, 8009fca <pow+0x96>
 8009f7e:	2200      	movs	r2, #0
 8009f80:	2300      	movs	r3, #0
 8009f82:	4620      	mov	r0, r4
 8009f84:	4629      	mov	r1, r5
 8009f86:	f7f6 fd19 	bl	80009bc <__aeabi_dcmplt>
 8009f8a:	b1f0      	cbz	r0, 8009fca <pow+0x96>
 8009f8c:	f7fd faea 	bl	8007564 <__errno>
 8009f90:	2322      	movs	r3, #34	@ 0x22
 8009f92:	e019      	b.n	8009fc8 <pow+0x94>
 8009f94:	4630      	mov	r0, r6
 8009f96:	4639      	mov	r1, r7
 8009f98:	f000 f834 	bl	800a004 <finite>
 8009f9c:	b9c8      	cbnz	r0, 8009fd2 <pow+0x9e>
 8009f9e:	4640      	mov	r0, r8
 8009fa0:	4649      	mov	r1, r9
 8009fa2:	f000 f82f 	bl	800a004 <finite>
 8009fa6:	b1a0      	cbz	r0, 8009fd2 <pow+0x9e>
 8009fa8:	4620      	mov	r0, r4
 8009faa:	4629      	mov	r1, r5
 8009fac:	f000 f82a 	bl	800a004 <finite>
 8009fb0:	b178      	cbz	r0, 8009fd2 <pow+0x9e>
 8009fb2:	4632      	mov	r2, r6
 8009fb4:	463b      	mov	r3, r7
 8009fb6:	4630      	mov	r0, r6
 8009fb8:	4639      	mov	r1, r7
 8009fba:	f7f6 fd27 	bl	8000a0c <__aeabi_dcmpun>
 8009fbe:	2800      	cmp	r0, #0
 8009fc0:	d0e4      	beq.n	8009f8c <pow+0x58>
 8009fc2:	f7fd facf 	bl	8007564 <__errno>
 8009fc6:	2321      	movs	r3, #33	@ 0x21
 8009fc8:	6003      	str	r3, [r0, #0]
 8009fca:	4630      	mov	r0, r6
 8009fcc:	4639      	mov	r1, r7
 8009fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	4630      	mov	r0, r6
 8009fd8:	4639      	mov	r1, r7
 8009fda:	f7f6 fce5 	bl	80009a8 <__aeabi_dcmpeq>
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	d0f3      	beq.n	8009fca <pow+0x96>
 8009fe2:	4640      	mov	r0, r8
 8009fe4:	4649      	mov	r1, r9
 8009fe6:	f000 f80d 	bl	800a004 <finite>
 8009fea:	2800      	cmp	r0, #0
 8009fec:	d0ed      	beq.n	8009fca <pow+0x96>
 8009fee:	4620      	mov	r0, r4
 8009ff0:	4629      	mov	r1, r5
 8009ff2:	f000 f807 	bl	800a004 <finite>
 8009ff6:	e7c8      	b.n	8009f8a <pow+0x56>
 8009ff8:	2600      	movs	r6, #0
 8009ffa:	4f01      	ldr	r7, [pc, #4]	@ (800a000 <pow+0xcc>)
 8009ffc:	e7e5      	b.n	8009fca <pow+0x96>
 8009ffe:	bf00      	nop
 800a000:	3ff00000 	.word	0x3ff00000

0800a004 <finite>:
 800a004:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800a008:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800a00c:	0fc0      	lsrs	r0, r0, #31
 800a00e:	4770      	bx	lr

0800a010 <__ieee754_pow>:
 800a010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a014:	b091      	sub	sp, #68	@ 0x44
 800a016:	e9cd 2300 	strd	r2, r3, [sp]
 800a01a:	468b      	mov	fp, r1
 800a01c:	e9dd 1800 	ldrd	r1, r8, [sp]
 800a020:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800a024:	4682      	mov	sl, r0
 800a026:	ea57 0001 	orrs.w	r0, r7, r1
 800a02a:	d112      	bne.n	800a052 <__ieee754_pow+0x42>
 800a02c:	4653      	mov	r3, sl
 800a02e:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800a032:	18db      	adds	r3, r3, r3
 800a034:	4152      	adcs	r2, r2
 800a036:	4298      	cmp	r0, r3
 800a038:	4b91      	ldr	r3, [pc, #580]	@ (800a280 <__ieee754_pow+0x270>)
 800a03a:	4193      	sbcs	r3, r2
 800a03c:	f080 84ce 	bcs.w	800a9dc <__ieee754_pow+0x9cc>
 800a040:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a044:	4650      	mov	r0, sl
 800a046:	4659      	mov	r1, fp
 800a048:	f7f6 f890 	bl	800016c <__adddf3>
 800a04c:	b011      	add	sp, #68	@ 0x44
 800a04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a052:	4b8c      	ldr	r3, [pc, #560]	@ (800a284 <__ieee754_pow+0x274>)
 800a054:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 800a058:	429e      	cmp	r6, r3
 800a05a:	465d      	mov	r5, fp
 800a05c:	46d1      	mov	r9, sl
 800a05e:	d807      	bhi.n	800a070 <__ieee754_pow+0x60>
 800a060:	d102      	bne.n	800a068 <__ieee754_pow+0x58>
 800a062:	f1ba 0f00 	cmp.w	sl, #0
 800a066:	d1eb      	bne.n	800a040 <__ieee754_pow+0x30>
 800a068:	429f      	cmp	r7, r3
 800a06a:	d801      	bhi.n	800a070 <__ieee754_pow+0x60>
 800a06c:	d10f      	bne.n	800a08e <__ieee754_pow+0x7e>
 800a06e:	b171      	cbz	r1, 800a08e <__ieee754_pow+0x7e>
 800a070:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800a074:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800a078:	ea55 0509 	orrs.w	r5, r5, r9
 800a07c:	d1e0      	bne.n	800a040 <__ieee754_pow+0x30>
 800a07e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a082:	18db      	adds	r3, r3, r3
 800a084:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800a088:	4152      	adcs	r2, r2
 800a08a:	429d      	cmp	r5, r3
 800a08c:	e7d4      	b.n	800a038 <__ieee754_pow+0x28>
 800a08e:	2d00      	cmp	r5, #0
 800a090:	4633      	mov	r3, r6
 800a092:	da39      	bge.n	800a108 <__ieee754_pow+0xf8>
 800a094:	4a7c      	ldr	r2, [pc, #496]	@ (800a288 <__ieee754_pow+0x278>)
 800a096:	4297      	cmp	r7, r2
 800a098:	d84e      	bhi.n	800a138 <__ieee754_pow+0x128>
 800a09a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800a09e:	4297      	cmp	r7, r2
 800a0a0:	f240 84ab 	bls.w	800a9fa <__ieee754_pow+0x9ea>
 800a0a4:	153a      	asrs	r2, r7, #20
 800a0a6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a0aa:	2a14      	cmp	r2, #20
 800a0ac:	dd0f      	ble.n	800a0ce <__ieee754_pow+0xbe>
 800a0ae:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800a0b2:	fa21 f402 	lsr.w	r4, r1, r2
 800a0b6:	fa04 f202 	lsl.w	r2, r4, r2
 800a0ba:	428a      	cmp	r2, r1
 800a0bc:	f040 849d 	bne.w	800a9fa <__ieee754_pow+0x9ea>
 800a0c0:	f004 0401 	and.w	r4, r4, #1
 800a0c4:	f1c4 0402 	rsb	r4, r4, #2
 800a0c8:	2900      	cmp	r1, #0
 800a0ca:	d15a      	bne.n	800a182 <__ieee754_pow+0x172>
 800a0cc:	e00e      	b.n	800a0ec <__ieee754_pow+0xdc>
 800a0ce:	2900      	cmp	r1, #0
 800a0d0:	d156      	bne.n	800a180 <__ieee754_pow+0x170>
 800a0d2:	f1c2 0214 	rsb	r2, r2, #20
 800a0d6:	fa47 f402 	asr.w	r4, r7, r2
 800a0da:	fa04 f202 	lsl.w	r2, r4, r2
 800a0de:	42ba      	cmp	r2, r7
 800a0e0:	f040 8488 	bne.w	800a9f4 <__ieee754_pow+0x9e4>
 800a0e4:	f004 0401 	and.w	r4, r4, #1
 800a0e8:	f1c4 0402 	rsb	r4, r4, #2
 800a0ec:	4a67      	ldr	r2, [pc, #412]	@ (800a28c <__ieee754_pow+0x27c>)
 800a0ee:	4297      	cmp	r7, r2
 800a0f0:	d130      	bne.n	800a154 <__ieee754_pow+0x144>
 800a0f2:	f1b8 0f00 	cmp.w	r8, #0
 800a0f6:	f280 8479 	bge.w	800a9ec <__ieee754_pow+0x9dc>
 800a0fa:	4652      	mov	r2, sl
 800a0fc:	465b      	mov	r3, fp
 800a0fe:	2000      	movs	r0, #0
 800a100:	4962      	ldr	r1, [pc, #392]	@ (800a28c <__ieee754_pow+0x27c>)
 800a102:	f7f6 fb13 	bl	800072c <__aeabi_ddiv>
 800a106:	e7a1      	b.n	800a04c <__ieee754_pow+0x3c>
 800a108:	2400      	movs	r4, #0
 800a10a:	2900      	cmp	r1, #0
 800a10c:	d139      	bne.n	800a182 <__ieee754_pow+0x172>
 800a10e:	4a5d      	ldr	r2, [pc, #372]	@ (800a284 <__ieee754_pow+0x274>)
 800a110:	4297      	cmp	r7, r2
 800a112:	d1eb      	bne.n	800a0ec <__ieee754_pow+0xdc>
 800a114:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 800a118:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800a11c:	ea53 0309 	orrs.w	r3, r3, r9
 800a120:	f000 845c 	beq.w	800a9dc <__ieee754_pow+0x9cc>
 800a124:	4b5a      	ldr	r3, [pc, #360]	@ (800a290 <__ieee754_pow+0x280>)
 800a126:	429e      	cmp	r6, r3
 800a128:	d908      	bls.n	800a13c <__ieee754_pow+0x12c>
 800a12a:	f1b8 0f00 	cmp.w	r8, #0
 800a12e:	f2c0 8459 	blt.w	800a9e4 <__ieee754_pow+0x9d4>
 800a132:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a136:	e789      	b.n	800a04c <__ieee754_pow+0x3c>
 800a138:	2402      	movs	r4, #2
 800a13a:	e7e6      	b.n	800a10a <__ieee754_pow+0xfa>
 800a13c:	f1b8 0f00 	cmp.w	r8, #0
 800a140:	f04f 0000 	mov.w	r0, #0
 800a144:	f04f 0100 	mov.w	r1, #0
 800a148:	da80      	bge.n	800a04c <__ieee754_pow+0x3c>
 800a14a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a14e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a152:	e77b      	b.n	800a04c <__ieee754_pow+0x3c>
 800a154:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800a158:	d106      	bne.n	800a168 <__ieee754_pow+0x158>
 800a15a:	4652      	mov	r2, sl
 800a15c:	465b      	mov	r3, fp
 800a15e:	4650      	mov	r0, sl
 800a160:	4659      	mov	r1, fp
 800a162:	f7f6 f9b9 	bl	80004d8 <__aeabi_dmul>
 800a166:	e771      	b.n	800a04c <__ieee754_pow+0x3c>
 800a168:	4a4a      	ldr	r2, [pc, #296]	@ (800a294 <__ieee754_pow+0x284>)
 800a16a:	4590      	cmp	r8, r2
 800a16c:	d109      	bne.n	800a182 <__ieee754_pow+0x172>
 800a16e:	2d00      	cmp	r5, #0
 800a170:	db07      	blt.n	800a182 <__ieee754_pow+0x172>
 800a172:	4650      	mov	r0, sl
 800a174:	4659      	mov	r1, fp
 800a176:	b011      	add	sp, #68	@ 0x44
 800a178:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a17c:	f000 bd12 	b.w	800aba4 <__ieee754_sqrt>
 800a180:	2400      	movs	r4, #0
 800a182:	4650      	mov	r0, sl
 800a184:	4659      	mov	r1, fp
 800a186:	9302      	str	r3, [sp, #8]
 800a188:	f000 fc6a 	bl	800aa60 <fabs>
 800a18c:	9b02      	ldr	r3, [sp, #8]
 800a18e:	f1b9 0f00 	cmp.w	r9, #0
 800a192:	d127      	bne.n	800a1e4 <__ieee754_pow+0x1d4>
 800a194:	4a3d      	ldr	r2, [pc, #244]	@ (800a28c <__ieee754_pow+0x27c>)
 800a196:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800a19a:	4594      	cmp	ip, r2
 800a19c:	d000      	beq.n	800a1a0 <__ieee754_pow+0x190>
 800a19e:	bb0e      	cbnz	r6, 800a1e4 <__ieee754_pow+0x1d4>
 800a1a0:	f1b8 0f00 	cmp.w	r8, #0
 800a1a4:	da05      	bge.n	800a1b2 <__ieee754_pow+0x1a2>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	2000      	movs	r0, #0
 800a1ac:	4937      	ldr	r1, [pc, #220]	@ (800a28c <__ieee754_pow+0x27c>)
 800a1ae:	f7f6 fabd 	bl	800072c <__aeabi_ddiv>
 800a1b2:	2d00      	cmp	r5, #0
 800a1b4:	f6bf af4a 	bge.w	800a04c <__ieee754_pow+0x3c>
 800a1b8:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800a1bc:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800a1c0:	4326      	orrs	r6, r4
 800a1c2:	d108      	bne.n	800a1d6 <__ieee754_pow+0x1c6>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	4610      	mov	r0, r2
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	f7f5 ffcc 	bl	8000168 <__aeabi_dsub>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	e795      	b.n	800a102 <__ieee754_pow+0xf2>
 800a1d6:	2c01      	cmp	r4, #1
 800a1d8:	f47f af38 	bne.w	800a04c <__ieee754_pow+0x3c>
 800a1dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	e733      	b.n	800a04c <__ieee754_pow+0x3c>
 800a1e4:	0fea      	lsrs	r2, r5, #31
 800a1e6:	3a01      	subs	r2, #1
 800a1e8:	ea52 0c04 	orrs.w	ip, r2, r4
 800a1ec:	d102      	bne.n	800a1f4 <__ieee754_pow+0x1e4>
 800a1ee:	4652      	mov	r2, sl
 800a1f0:	465b      	mov	r3, fp
 800a1f2:	e7e9      	b.n	800a1c8 <__ieee754_pow+0x1b8>
 800a1f4:	f04f 0900 	mov.w	r9, #0
 800a1f8:	3c01      	subs	r4, #1
 800a1fa:	4314      	orrs	r4, r2
 800a1fc:	bf14      	ite	ne
 800a1fe:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800a28c <__ieee754_pow+0x27c>
 800a202:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800a298 <__ieee754_pow+0x288>
 800a206:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800a20a:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800a20e:	f240 8107 	bls.w	800a420 <__ieee754_pow+0x410>
 800a212:	4b22      	ldr	r3, [pc, #136]	@ (800a29c <__ieee754_pow+0x28c>)
 800a214:	429f      	cmp	r7, r3
 800a216:	4b1e      	ldr	r3, [pc, #120]	@ (800a290 <__ieee754_pow+0x280>)
 800a218:	d913      	bls.n	800a242 <__ieee754_pow+0x232>
 800a21a:	429e      	cmp	r6, r3
 800a21c:	d808      	bhi.n	800a230 <__ieee754_pow+0x220>
 800a21e:	f1b8 0f00 	cmp.w	r8, #0
 800a222:	da08      	bge.n	800a236 <__ieee754_pow+0x226>
 800a224:	2000      	movs	r0, #0
 800a226:	b011      	add	sp, #68	@ 0x44
 800a228:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a22c:	f000 bcb4 	b.w	800ab98 <__math_oflow>
 800a230:	f1b8 0f00 	cmp.w	r8, #0
 800a234:	dcf6      	bgt.n	800a224 <__ieee754_pow+0x214>
 800a236:	2000      	movs	r0, #0
 800a238:	b011      	add	sp, #68	@ 0x44
 800a23a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a23e:	f000 bca6 	b.w	800ab8e <__math_uflow>
 800a242:	429e      	cmp	r6, r3
 800a244:	d20c      	bcs.n	800a260 <__ieee754_pow+0x250>
 800a246:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a24a:	2200      	movs	r2, #0
 800a24c:	2300      	movs	r3, #0
 800a24e:	f7f6 fbb5 	bl	80009bc <__aeabi_dcmplt>
 800a252:	3800      	subs	r0, #0
 800a254:	bf18      	it	ne
 800a256:	2001      	movne	r0, #1
 800a258:	f1b8 0f00 	cmp.w	r8, #0
 800a25c:	daec      	bge.n	800a238 <__ieee754_pow+0x228>
 800a25e:	e7e2      	b.n	800a226 <__ieee754_pow+0x216>
 800a260:	4b0a      	ldr	r3, [pc, #40]	@ (800a28c <__ieee754_pow+0x27c>)
 800a262:	2200      	movs	r2, #0
 800a264:	429e      	cmp	r6, r3
 800a266:	d91b      	bls.n	800a2a0 <__ieee754_pow+0x290>
 800a268:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a26c:	2300      	movs	r3, #0
 800a26e:	f7f6 fba5 	bl	80009bc <__aeabi_dcmplt>
 800a272:	3800      	subs	r0, #0
 800a274:	bf18      	it	ne
 800a276:	2001      	movne	r0, #1
 800a278:	f1b8 0f00 	cmp.w	r8, #0
 800a27c:	dcd3      	bgt.n	800a226 <__ieee754_pow+0x216>
 800a27e:	e7db      	b.n	800a238 <__ieee754_pow+0x228>
 800a280:	fff00000 	.word	0xfff00000
 800a284:	7ff00000 	.word	0x7ff00000
 800a288:	433fffff 	.word	0x433fffff
 800a28c:	3ff00000 	.word	0x3ff00000
 800a290:	3fefffff 	.word	0x3fefffff
 800a294:	3fe00000 	.word	0x3fe00000
 800a298:	bff00000 	.word	0xbff00000
 800a29c:	43f00000 	.word	0x43f00000
 800a2a0:	4b5b      	ldr	r3, [pc, #364]	@ (800a410 <__ieee754_pow+0x400>)
 800a2a2:	f7f5 ff61 	bl	8000168 <__aeabi_dsub>
 800a2a6:	a352      	add	r3, pc, #328	@ (adr r3, 800a3f0 <__ieee754_pow+0x3e0>)
 800a2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ac:	4604      	mov	r4, r0
 800a2ae:	460d      	mov	r5, r1
 800a2b0:	f7f6 f912 	bl	80004d8 <__aeabi_dmul>
 800a2b4:	a350      	add	r3, pc, #320	@ (adr r3, 800a3f8 <__ieee754_pow+0x3e8>)
 800a2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ba:	4606      	mov	r6, r0
 800a2bc:	460f      	mov	r7, r1
 800a2be:	4620      	mov	r0, r4
 800a2c0:	4629      	mov	r1, r5
 800a2c2:	f7f6 f909 	bl	80004d8 <__aeabi_dmul>
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	4682      	mov	sl, r0
 800a2ca:	468b      	mov	fp, r1
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	4629      	mov	r1, r5
 800a2d0:	4b50      	ldr	r3, [pc, #320]	@ (800a414 <__ieee754_pow+0x404>)
 800a2d2:	f7f6 f901 	bl	80004d8 <__aeabi_dmul>
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	460b      	mov	r3, r1
 800a2da:	a149      	add	r1, pc, #292	@ (adr r1, 800a400 <__ieee754_pow+0x3f0>)
 800a2dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2e0:	f7f5 ff42 	bl	8000168 <__aeabi_dsub>
 800a2e4:	4622      	mov	r2, r4
 800a2e6:	462b      	mov	r3, r5
 800a2e8:	f7f6 f8f6 	bl	80004d8 <__aeabi_dmul>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	2000      	movs	r0, #0
 800a2f2:	4949      	ldr	r1, [pc, #292]	@ (800a418 <__ieee754_pow+0x408>)
 800a2f4:	f7f5 ff38 	bl	8000168 <__aeabi_dsub>
 800a2f8:	4622      	mov	r2, r4
 800a2fa:	4680      	mov	r8, r0
 800a2fc:	4689      	mov	r9, r1
 800a2fe:	462b      	mov	r3, r5
 800a300:	4620      	mov	r0, r4
 800a302:	4629      	mov	r1, r5
 800a304:	f7f6 f8e8 	bl	80004d8 <__aeabi_dmul>
 800a308:	4602      	mov	r2, r0
 800a30a:	460b      	mov	r3, r1
 800a30c:	4640      	mov	r0, r8
 800a30e:	4649      	mov	r1, r9
 800a310:	f7f6 f8e2 	bl	80004d8 <__aeabi_dmul>
 800a314:	a33c      	add	r3, pc, #240	@ (adr r3, 800a408 <__ieee754_pow+0x3f8>)
 800a316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31a:	f7f6 f8dd 	bl	80004d8 <__aeabi_dmul>
 800a31e:	4602      	mov	r2, r0
 800a320:	460b      	mov	r3, r1
 800a322:	4650      	mov	r0, sl
 800a324:	4659      	mov	r1, fp
 800a326:	f7f5 ff1f 	bl	8000168 <__aeabi_dsub>
 800a32a:	2400      	movs	r4, #0
 800a32c:	4602      	mov	r2, r0
 800a32e:	460b      	mov	r3, r1
 800a330:	4680      	mov	r8, r0
 800a332:	4689      	mov	r9, r1
 800a334:	4630      	mov	r0, r6
 800a336:	4639      	mov	r1, r7
 800a338:	f7f5 ff18 	bl	800016c <__adddf3>
 800a33c:	4632      	mov	r2, r6
 800a33e:	463b      	mov	r3, r7
 800a340:	4620      	mov	r0, r4
 800a342:	460d      	mov	r5, r1
 800a344:	f7f5 ff10 	bl	8000168 <__aeabi_dsub>
 800a348:	4602      	mov	r2, r0
 800a34a:	460b      	mov	r3, r1
 800a34c:	4640      	mov	r0, r8
 800a34e:	4649      	mov	r1, r9
 800a350:	f7f5 ff0a 	bl	8000168 <__aeabi_dsub>
 800a354:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a358:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a35c:	2300      	movs	r3, #0
 800a35e:	9304      	str	r3, [sp, #16]
 800a360:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a364:	4606      	mov	r6, r0
 800a366:	460f      	mov	r7, r1
 800a368:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a36c:	4652      	mov	r2, sl
 800a36e:	465b      	mov	r3, fp
 800a370:	f7f5 fefa 	bl	8000168 <__aeabi_dsub>
 800a374:	4622      	mov	r2, r4
 800a376:	462b      	mov	r3, r5
 800a378:	f7f6 f8ae 	bl	80004d8 <__aeabi_dmul>
 800a37c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a380:	4680      	mov	r8, r0
 800a382:	4689      	mov	r9, r1
 800a384:	4630      	mov	r0, r6
 800a386:	4639      	mov	r1, r7
 800a388:	f7f6 f8a6 	bl	80004d8 <__aeabi_dmul>
 800a38c:	4602      	mov	r2, r0
 800a38e:	460b      	mov	r3, r1
 800a390:	4640      	mov	r0, r8
 800a392:	4649      	mov	r1, r9
 800a394:	f7f5 feea 	bl	800016c <__adddf3>
 800a398:	4652      	mov	r2, sl
 800a39a:	465b      	mov	r3, fp
 800a39c:	4606      	mov	r6, r0
 800a39e:	460f      	mov	r7, r1
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	4629      	mov	r1, r5
 800a3a4:	f7f6 f898 	bl	80004d8 <__aeabi_dmul>
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	4680      	mov	r8, r0
 800a3ae:	4689      	mov	r9, r1
 800a3b0:	4630      	mov	r0, r6
 800a3b2:	4639      	mov	r1, r7
 800a3b4:	f7f5 feda 	bl	800016c <__adddf3>
 800a3b8:	4b18      	ldr	r3, [pc, #96]	@ (800a41c <__ieee754_pow+0x40c>)
 800a3ba:	4604      	mov	r4, r0
 800a3bc:	4299      	cmp	r1, r3
 800a3be:	460d      	mov	r5, r1
 800a3c0:	468a      	mov	sl, r1
 800a3c2:	468b      	mov	fp, r1
 800a3c4:	f340 82e0 	ble.w	800a988 <__ieee754_pow+0x978>
 800a3c8:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800a3cc:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800a3d0:	4303      	orrs	r3, r0
 800a3d2:	f000 81df 	beq.w	800a794 <__ieee754_pow+0x784>
 800a3d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	2300      	movs	r3, #0
 800a3de:	f7f6 faed 	bl	80009bc <__aeabi_dcmplt>
 800a3e2:	3800      	subs	r0, #0
 800a3e4:	bf18      	it	ne
 800a3e6:	2001      	movne	r0, #1
 800a3e8:	e71d      	b.n	800a226 <__ieee754_pow+0x216>
 800a3ea:	bf00      	nop
 800a3ec:	f3af 8000 	nop.w
 800a3f0:	60000000 	.word	0x60000000
 800a3f4:	3ff71547 	.word	0x3ff71547
 800a3f8:	f85ddf44 	.word	0xf85ddf44
 800a3fc:	3e54ae0b 	.word	0x3e54ae0b
 800a400:	55555555 	.word	0x55555555
 800a404:	3fd55555 	.word	0x3fd55555
 800a408:	652b82fe 	.word	0x652b82fe
 800a40c:	3ff71547 	.word	0x3ff71547
 800a410:	3ff00000 	.word	0x3ff00000
 800a414:	3fd00000 	.word	0x3fd00000
 800a418:	3fe00000 	.word	0x3fe00000
 800a41c:	408fffff 	.word	0x408fffff
 800a420:	4ad3      	ldr	r2, [pc, #844]	@ (800a770 <__ieee754_pow+0x760>)
 800a422:	402a      	ands	r2, r5
 800a424:	2a00      	cmp	r2, #0
 800a426:	f040 817a 	bne.w	800a71e <__ieee754_pow+0x70e>
 800a42a:	4bd2      	ldr	r3, [pc, #840]	@ (800a774 <__ieee754_pow+0x764>)
 800a42c:	2200      	movs	r2, #0
 800a42e:	f7f6 f853 	bl	80004d8 <__aeabi_dmul>
 800a432:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800a436:	460b      	mov	r3, r1
 800a438:	151a      	asrs	r2, r3, #20
 800a43a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a43e:	4422      	add	r2, r4
 800a440:	920a      	str	r2, [sp, #40]	@ 0x28
 800a442:	4acd      	ldr	r2, [pc, #820]	@ (800a778 <__ieee754_pow+0x768>)
 800a444:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a448:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800a44c:	4293      	cmp	r3, r2
 800a44e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a452:	dd08      	ble.n	800a466 <__ieee754_pow+0x456>
 800a454:	4ac9      	ldr	r2, [pc, #804]	@ (800a77c <__ieee754_pow+0x76c>)
 800a456:	4293      	cmp	r3, r2
 800a458:	f340 8163 	ble.w	800a722 <__ieee754_pow+0x712>
 800a45c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a45e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800a462:	3301      	adds	r3, #1
 800a464:	930a      	str	r3, [sp, #40]	@ 0x28
 800a466:	2600      	movs	r6, #0
 800a468:	00f3      	lsls	r3, r6, #3
 800a46a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a46c:	4bc4      	ldr	r3, [pc, #784]	@ (800a780 <__ieee754_pow+0x770>)
 800a46e:	4629      	mov	r1, r5
 800a470:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a474:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a478:	461a      	mov	r2, r3
 800a47a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a47e:	4623      	mov	r3, r4
 800a480:	4682      	mov	sl, r0
 800a482:	f7f5 fe71 	bl	8000168 <__aeabi_dsub>
 800a486:	4652      	mov	r2, sl
 800a488:	462b      	mov	r3, r5
 800a48a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800a48e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a492:	f7f5 fe6b 	bl	800016c <__adddf3>
 800a496:	4602      	mov	r2, r0
 800a498:	460b      	mov	r3, r1
 800a49a:	2000      	movs	r0, #0
 800a49c:	49b9      	ldr	r1, [pc, #740]	@ (800a784 <__ieee754_pow+0x774>)
 800a49e:	f7f6 f945 	bl	800072c <__aeabi_ddiv>
 800a4a2:	4602      	mov	r2, r0
 800a4a4:	460b      	mov	r3, r1
 800a4a6:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a4aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a4ae:	f7f6 f813 	bl	80004d8 <__aeabi_dmul>
 800a4b2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a4b6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a4ba:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a4be:	2300      	movs	r3, #0
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	46ab      	mov	fp, r5
 800a4c4:	106d      	asrs	r5, r5, #1
 800a4c6:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800a4ca:	9304      	str	r3, [sp, #16]
 800a4cc:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800a4d0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a4d4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800a4d8:	4640      	mov	r0, r8
 800a4da:	4649      	mov	r1, r9
 800a4dc:	4614      	mov	r4, r2
 800a4de:	461d      	mov	r5, r3
 800a4e0:	f7f5 fffa 	bl	80004d8 <__aeabi_dmul>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a4ec:	f7f5 fe3c 	bl	8000168 <__aeabi_dsub>
 800a4f0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a4f4:	4606      	mov	r6, r0
 800a4f6:	460f      	mov	r7, r1
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	4629      	mov	r1, r5
 800a4fc:	f7f5 fe34 	bl	8000168 <__aeabi_dsub>
 800a500:	4602      	mov	r2, r0
 800a502:	460b      	mov	r3, r1
 800a504:	4650      	mov	r0, sl
 800a506:	4659      	mov	r1, fp
 800a508:	f7f5 fe2e 	bl	8000168 <__aeabi_dsub>
 800a50c:	4642      	mov	r2, r8
 800a50e:	464b      	mov	r3, r9
 800a510:	f7f5 ffe2 	bl	80004d8 <__aeabi_dmul>
 800a514:	4602      	mov	r2, r0
 800a516:	460b      	mov	r3, r1
 800a518:	4630      	mov	r0, r6
 800a51a:	4639      	mov	r1, r7
 800a51c:	f7f5 fe24 	bl	8000168 <__aeabi_dsub>
 800a520:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a524:	f7f5 ffd8 	bl	80004d8 <__aeabi_dmul>
 800a528:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a52c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a530:	4610      	mov	r0, r2
 800a532:	4619      	mov	r1, r3
 800a534:	f7f5 ffd0 	bl	80004d8 <__aeabi_dmul>
 800a538:	a37b      	add	r3, pc, #492	@ (adr r3, 800a728 <__ieee754_pow+0x718>)
 800a53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53e:	4604      	mov	r4, r0
 800a540:	460d      	mov	r5, r1
 800a542:	f7f5 ffc9 	bl	80004d8 <__aeabi_dmul>
 800a546:	a37a      	add	r3, pc, #488	@ (adr r3, 800a730 <__ieee754_pow+0x720>)
 800a548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54c:	f7f5 fe0e 	bl	800016c <__adddf3>
 800a550:	4622      	mov	r2, r4
 800a552:	462b      	mov	r3, r5
 800a554:	f7f5 ffc0 	bl	80004d8 <__aeabi_dmul>
 800a558:	a377      	add	r3, pc, #476	@ (adr r3, 800a738 <__ieee754_pow+0x728>)
 800a55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55e:	f7f5 fe05 	bl	800016c <__adddf3>
 800a562:	4622      	mov	r2, r4
 800a564:	462b      	mov	r3, r5
 800a566:	f7f5 ffb7 	bl	80004d8 <__aeabi_dmul>
 800a56a:	a375      	add	r3, pc, #468	@ (adr r3, 800a740 <__ieee754_pow+0x730>)
 800a56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a570:	f7f5 fdfc 	bl	800016c <__adddf3>
 800a574:	4622      	mov	r2, r4
 800a576:	462b      	mov	r3, r5
 800a578:	f7f5 ffae 	bl	80004d8 <__aeabi_dmul>
 800a57c:	a372      	add	r3, pc, #456	@ (adr r3, 800a748 <__ieee754_pow+0x738>)
 800a57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a582:	f7f5 fdf3 	bl	800016c <__adddf3>
 800a586:	4622      	mov	r2, r4
 800a588:	462b      	mov	r3, r5
 800a58a:	f7f5 ffa5 	bl	80004d8 <__aeabi_dmul>
 800a58e:	a370      	add	r3, pc, #448	@ (adr r3, 800a750 <__ieee754_pow+0x740>)
 800a590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a594:	f7f5 fdea 	bl	800016c <__adddf3>
 800a598:	4622      	mov	r2, r4
 800a59a:	4606      	mov	r6, r0
 800a59c:	460f      	mov	r7, r1
 800a59e:	462b      	mov	r3, r5
 800a5a0:	4620      	mov	r0, r4
 800a5a2:	4629      	mov	r1, r5
 800a5a4:	f7f5 ff98 	bl	80004d8 <__aeabi_dmul>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	4630      	mov	r0, r6
 800a5ae:	4639      	mov	r1, r7
 800a5b0:	f7f5 ff92 	bl	80004d8 <__aeabi_dmul>
 800a5b4:	4604      	mov	r4, r0
 800a5b6:	460d      	mov	r5, r1
 800a5b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5bc:	4642      	mov	r2, r8
 800a5be:	464b      	mov	r3, r9
 800a5c0:	f7f5 fdd4 	bl	800016c <__adddf3>
 800a5c4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a5c8:	f7f5 ff86 	bl	80004d8 <__aeabi_dmul>
 800a5cc:	4622      	mov	r2, r4
 800a5ce:	462b      	mov	r3, r5
 800a5d0:	f7f5 fdcc 	bl	800016c <__adddf3>
 800a5d4:	4642      	mov	r2, r8
 800a5d6:	4682      	mov	sl, r0
 800a5d8:	468b      	mov	fp, r1
 800a5da:	464b      	mov	r3, r9
 800a5dc:	4640      	mov	r0, r8
 800a5de:	4649      	mov	r1, r9
 800a5e0:	f7f5 ff7a 	bl	80004d8 <__aeabi_dmul>
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	4b68      	ldr	r3, [pc, #416]	@ (800a788 <__ieee754_pow+0x778>)
 800a5e8:	4606      	mov	r6, r0
 800a5ea:	460f      	mov	r7, r1
 800a5ec:	f7f5 fdbe 	bl	800016c <__adddf3>
 800a5f0:	4652      	mov	r2, sl
 800a5f2:	465b      	mov	r3, fp
 800a5f4:	f7f5 fdba 	bl	800016c <__adddf3>
 800a5f8:	2400      	movs	r4, #0
 800a5fa:	460d      	mov	r5, r1
 800a5fc:	4622      	mov	r2, r4
 800a5fe:	460b      	mov	r3, r1
 800a600:	4640      	mov	r0, r8
 800a602:	4649      	mov	r1, r9
 800a604:	f7f5 ff68 	bl	80004d8 <__aeabi_dmul>
 800a608:	2200      	movs	r2, #0
 800a60a:	4680      	mov	r8, r0
 800a60c:	4689      	mov	r9, r1
 800a60e:	4620      	mov	r0, r4
 800a610:	4629      	mov	r1, r5
 800a612:	4b5d      	ldr	r3, [pc, #372]	@ (800a788 <__ieee754_pow+0x778>)
 800a614:	f7f5 fda8 	bl	8000168 <__aeabi_dsub>
 800a618:	4632      	mov	r2, r6
 800a61a:	463b      	mov	r3, r7
 800a61c:	f7f5 fda4 	bl	8000168 <__aeabi_dsub>
 800a620:	4602      	mov	r2, r0
 800a622:	460b      	mov	r3, r1
 800a624:	4650      	mov	r0, sl
 800a626:	4659      	mov	r1, fp
 800a628:	f7f5 fd9e 	bl	8000168 <__aeabi_dsub>
 800a62c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a630:	f7f5 ff52 	bl	80004d8 <__aeabi_dmul>
 800a634:	4622      	mov	r2, r4
 800a636:	4606      	mov	r6, r0
 800a638:	460f      	mov	r7, r1
 800a63a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a63e:	462b      	mov	r3, r5
 800a640:	f7f5 ff4a 	bl	80004d8 <__aeabi_dmul>
 800a644:	4602      	mov	r2, r0
 800a646:	460b      	mov	r3, r1
 800a648:	4630      	mov	r0, r6
 800a64a:	4639      	mov	r1, r7
 800a64c:	f7f5 fd8e 	bl	800016c <__adddf3>
 800a650:	2400      	movs	r4, #0
 800a652:	4606      	mov	r6, r0
 800a654:	460f      	mov	r7, r1
 800a656:	4602      	mov	r2, r0
 800a658:	460b      	mov	r3, r1
 800a65a:	4640      	mov	r0, r8
 800a65c:	4649      	mov	r1, r9
 800a65e:	f7f5 fd85 	bl	800016c <__adddf3>
 800a662:	a33d      	add	r3, pc, #244	@ (adr r3, 800a758 <__ieee754_pow+0x748>)
 800a664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a668:	4620      	mov	r0, r4
 800a66a:	460d      	mov	r5, r1
 800a66c:	f7f5 ff34 	bl	80004d8 <__aeabi_dmul>
 800a670:	4642      	mov	r2, r8
 800a672:	464b      	mov	r3, r9
 800a674:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a678:	4620      	mov	r0, r4
 800a67a:	4629      	mov	r1, r5
 800a67c:	f7f5 fd74 	bl	8000168 <__aeabi_dsub>
 800a680:	4602      	mov	r2, r0
 800a682:	460b      	mov	r3, r1
 800a684:	4630      	mov	r0, r6
 800a686:	4639      	mov	r1, r7
 800a688:	f7f5 fd6e 	bl	8000168 <__aeabi_dsub>
 800a68c:	a334      	add	r3, pc, #208	@ (adr r3, 800a760 <__ieee754_pow+0x750>)
 800a68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a692:	f7f5 ff21 	bl	80004d8 <__aeabi_dmul>
 800a696:	a334      	add	r3, pc, #208	@ (adr r3, 800a768 <__ieee754_pow+0x758>)
 800a698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69c:	4606      	mov	r6, r0
 800a69e:	460f      	mov	r7, r1
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	4629      	mov	r1, r5
 800a6a4:	f7f5 ff18 	bl	80004d8 <__aeabi_dmul>
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	4639      	mov	r1, r7
 800a6b0:	f7f5 fd5c 	bl	800016c <__adddf3>
 800a6b4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a6b6:	4b35      	ldr	r3, [pc, #212]	@ (800a78c <__ieee754_pow+0x77c>)
 800a6b8:	2400      	movs	r4, #0
 800a6ba:	4413      	add	r3, r2
 800a6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c0:	f7f5 fd54 	bl	800016c <__adddf3>
 800a6c4:	4682      	mov	sl, r0
 800a6c6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a6c8:	468b      	mov	fp, r1
 800a6ca:	f7f5 fe9b 	bl	8000404 <__aeabi_i2d>
 800a6ce:	4606      	mov	r6, r0
 800a6d0:	460f      	mov	r7, r1
 800a6d2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a6d4:	4b2e      	ldr	r3, [pc, #184]	@ (800a790 <__ieee754_pow+0x780>)
 800a6d6:	4413      	add	r3, r2
 800a6d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a6dc:	4652      	mov	r2, sl
 800a6de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6e2:	465b      	mov	r3, fp
 800a6e4:	f7f5 fd42 	bl	800016c <__adddf3>
 800a6e8:	4642      	mov	r2, r8
 800a6ea:	464b      	mov	r3, r9
 800a6ec:	f7f5 fd3e 	bl	800016c <__adddf3>
 800a6f0:	4632      	mov	r2, r6
 800a6f2:	463b      	mov	r3, r7
 800a6f4:	f7f5 fd3a 	bl	800016c <__adddf3>
 800a6f8:	4632      	mov	r2, r6
 800a6fa:	463b      	mov	r3, r7
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	460d      	mov	r5, r1
 800a700:	f7f5 fd32 	bl	8000168 <__aeabi_dsub>
 800a704:	4642      	mov	r2, r8
 800a706:	464b      	mov	r3, r9
 800a708:	f7f5 fd2e 	bl	8000168 <__aeabi_dsub>
 800a70c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a710:	f7f5 fd2a 	bl	8000168 <__aeabi_dsub>
 800a714:	4602      	mov	r2, r0
 800a716:	460b      	mov	r3, r1
 800a718:	4650      	mov	r0, sl
 800a71a:	4659      	mov	r1, fp
 800a71c:	e618      	b.n	800a350 <__ieee754_pow+0x340>
 800a71e:	2400      	movs	r4, #0
 800a720:	e68a      	b.n	800a438 <__ieee754_pow+0x428>
 800a722:	2601      	movs	r6, #1
 800a724:	e6a0      	b.n	800a468 <__ieee754_pow+0x458>
 800a726:	bf00      	nop
 800a728:	4a454eef 	.word	0x4a454eef
 800a72c:	3fca7e28 	.word	0x3fca7e28
 800a730:	93c9db65 	.word	0x93c9db65
 800a734:	3fcd864a 	.word	0x3fcd864a
 800a738:	a91d4101 	.word	0xa91d4101
 800a73c:	3fd17460 	.word	0x3fd17460
 800a740:	518f264d 	.word	0x518f264d
 800a744:	3fd55555 	.word	0x3fd55555
 800a748:	db6fabff 	.word	0xdb6fabff
 800a74c:	3fdb6db6 	.word	0x3fdb6db6
 800a750:	33333303 	.word	0x33333303
 800a754:	3fe33333 	.word	0x3fe33333
 800a758:	e0000000 	.word	0xe0000000
 800a75c:	3feec709 	.word	0x3feec709
 800a760:	dc3a03fd 	.word	0xdc3a03fd
 800a764:	3feec709 	.word	0x3feec709
 800a768:	145b01f5 	.word	0x145b01f5
 800a76c:	be3e2fe0 	.word	0xbe3e2fe0
 800a770:	7ff00000 	.word	0x7ff00000
 800a774:	43400000 	.word	0x43400000
 800a778:	0003988e 	.word	0x0003988e
 800a77c:	000bb679 	.word	0x000bb679
 800a780:	0800c720 	.word	0x0800c720
 800a784:	3ff00000 	.word	0x3ff00000
 800a788:	40080000 	.word	0x40080000
 800a78c:	0800c700 	.word	0x0800c700
 800a790:	0800c710 	.word	0x0800c710
 800a794:	a39a      	add	r3, pc, #616	@ (adr r3, 800aa00 <__ieee754_pow+0x9f0>)
 800a796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79a:	4630      	mov	r0, r6
 800a79c:	4639      	mov	r1, r7
 800a79e:	f7f5 fce5 	bl	800016c <__adddf3>
 800a7a2:	4642      	mov	r2, r8
 800a7a4:	e9cd 0100 	strd	r0, r1, [sp]
 800a7a8:	464b      	mov	r3, r9
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	4629      	mov	r1, r5
 800a7ae:	f7f5 fcdb 	bl	8000168 <__aeabi_dsub>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7ba:	f7f6 f91d 	bl	80009f8 <__aeabi_dcmpgt>
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	f47f ae09 	bne.w	800a3d6 <__ieee754_pow+0x3c6>
 800a7c4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a7c8:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800a7cc:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800a7d0:	fa43 fa0a 	asr.w	sl, r3, sl
 800a7d4:	44da      	add	sl, fp
 800a7d6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a7da:	489b      	ldr	r0, [pc, #620]	@ (800aa48 <__ieee754_pow+0xa38>)
 800a7dc:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a7e0:	4108      	asrs	r0, r1
 800a7e2:	ea00 030a 	and.w	r3, r0, sl
 800a7e6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a7ea:	f1c1 0114 	rsb	r1, r1, #20
 800a7ee:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a7f2:	4640      	mov	r0, r8
 800a7f4:	fa4a fa01 	asr.w	sl, sl, r1
 800a7f8:	f1bb 0f00 	cmp.w	fp, #0
 800a7fc:	4649      	mov	r1, r9
 800a7fe:	f04f 0200 	mov.w	r2, #0
 800a802:	bfb8      	it	lt
 800a804:	f1ca 0a00 	rsblt	sl, sl, #0
 800a808:	f7f5 fcae 	bl	8000168 <__aeabi_dsub>
 800a80c:	4680      	mov	r8, r0
 800a80e:	4689      	mov	r9, r1
 800a810:	2400      	movs	r4, #0
 800a812:	4632      	mov	r2, r6
 800a814:	463b      	mov	r3, r7
 800a816:	4640      	mov	r0, r8
 800a818:	4649      	mov	r1, r9
 800a81a:	f7f5 fca7 	bl	800016c <__adddf3>
 800a81e:	a37a      	add	r3, pc, #488	@ (adr r3, 800aa08 <__ieee754_pow+0x9f8>)
 800a820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a824:	4620      	mov	r0, r4
 800a826:	460d      	mov	r5, r1
 800a828:	f7f5 fe56 	bl	80004d8 <__aeabi_dmul>
 800a82c:	4642      	mov	r2, r8
 800a82e:	464b      	mov	r3, r9
 800a830:	e9cd 0100 	strd	r0, r1, [sp]
 800a834:	4620      	mov	r0, r4
 800a836:	4629      	mov	r1, r5
 800a838:	f7f5 fc96 	bl	8000168 <__aeabi_dsub>
 800a83c:	4602      	mov	r2, r0
 800a83e:	460b      	mov	r3, r1
 800a840:	4630      	mov	r0, r6
 800a842:	4639      	mov	r1, r7
 800a844:	f7f5 fc90 	bl	8000168 <__aeabi_dsub>
 800a848:	a371      	add	r3, pc, #452	@ (adr r3, 800aa10 <__ieee754_pow+0xa00>)
 800a84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84e:	f7f5 fe43 	bl	80004d8 <__aeabi_dmul>
 800a852:	a371      	add	r3, pc, #452	@ (adr r3, 800aa18 <__ieee754_pow+0xa08>)
 800a854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a858:	4680      	mov	r8, r0
 800a85a:	4689      	mov	r9, r1
 800a85c:	4620      	mov	r0, r4
 800a85e:	4629      	mov	r1, r5
 800a860:	f7f5 fe3a 	bl	80004d8 <__aeabi_dmul>
 800a864:	4602      	mov	r2, r0
 800a866:	460b      	mov	r3, r1
 800a868:	4640      	mov	r0, r8
 800a86a:	4649      	mov	r1, r9
 800a86c:	f7f5 fc7e 	bl	800016c <__adddf3>
 800a870:	4604      	mov	r4, r0
 800a872:	460d      	mov	r5, r1
 800a874:	4602      	mov	r2, r0
 800a876:	460b      	mov	r3, r1
 800a878:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a87c:	f7f5 fc76 	bl	800016c <__adddf3>
 800a880:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a884:	4680      	mov	r8, r0
 800a886:	4689      	mov	r9, r1
 800a888:	f7f5 fc6e 	bl	8000168 <__aeabi_dsub>
 800a88c:	4602      	mov	r2, r0
 800a88e:	460b      	mov	r3, r1
 800a890:	4620      	mov	r0, r4
 800a892:	4629      	mov	r1, r5
 800a894:	f7f5 fc68 	bl	8000168 <__aeabi_dsub>
 800a898:	4642      	mov	r2, r8
 800a89a:	4606      	mov	r6, r0
 800a89c:	460f      	mov	r7, r1
 800a89e:	464b      	mov	r3, r9
 800a8a0:	4640      	mov	r0, r8
 800a8a2:	4649      	mov	r1, r9
 800a8a4:	f7f5 fe18 	bl	80004d8 <__aeabi_dmul>
 800a8a8:	a35d      	add	r3, pc, #372	@ (adr r3, 800aa20 <__ieee754_pow+0xa10>)
 800a8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ae:	4604      	mov	r4, r0
 800a8b0:	460d      	mov	r5, r1
 800a8b2:	f7f5 fe11 	bl	80004d8 <__aeabi_dmul>
 800a8b6:	a35c      	add	r3, pc, #368	@ (adr r3, 800aa28 <__ieee754_pow+0xa18>)
 800a8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8bc:	f7f5 fc54 	bl	8000168 <__aeabi_dsub>
 800a8c0:	4622      	mov	r2, r4
 800a8c2:	462b      	mov	r3, r5
 800a8c4:	f7f5 fe08 	bl	80004d8 <__aeabi_dmul>
 800a8c8:	a359      	add	r3, pc, #356	@ (adr r3, 800aa30 <__ieee754_pow+0xa20>)
 800a8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ce:	f7f5 fc4d 	bl	800016c <__adddf3>
 800a8d2:	4622      	mov	r2, r4
 800a8d4:	462b      	mov	r3, r5
 800a8d6:	f7f5 fdff 	bl	80004d8 <__aeabi_dmul>
 800a8da:	a357      	add	r3, pc, #348	@ (adr r3, 800aa38 <__ieee754_pow+0xa28>)
 800a8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e0:	f7f5 fc42 	bl	8000168 <__aeabi_dsub>
 800a8e4:	4622      	mov	r2, r4
 800a8e6:	462b      	mov	r3, r5
 800a8e8:	f7f5 fdf6 	bl	80004d8 <__aeabi_dmul>
 800a8ec:	a354      	add	r3, pc, #336	@ (adr r3, 800aa40 <__ieee754_pow+0xa30>)
 800a8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f2:	f7f5 fc3b 	bl	800016c <__adddf3>
 800a8f6:	4622      	mov	r2, r4
 800a8f8:	462b      	mov	r3, r5
 800a8fa:	f7f5 fded 	bl	80004d8 <__aeabi_dmul>
 800a8fe:	4602      	mov	r2, r0
 800a900:	460b      	mov	r3, r1
 800a902:	4640      	mov	r0, r8
 800a904:	4649      	mov	r1, r9
 800a906:	f7f5 fc2f 	bl	8000168 <__aeabi_dsub>
 800a90a:	4604      	mov	r4, r0
 800a90c:	460d      	mov	r5, r1
 800a90e:	4602      	mov	r2, r0
 800a910:	460b      	mov	r3, r1
 800a912:	4640      	mov	r0, r8
 800a914:	4649      	mov	r1, r9
 800a916:	f7f5 fddf 	bl	80004d8 <__aeabi_dmul>
 800a91a:	2200      	movs	r2, #0
 800a91c:	e9cd 0100 	strd	r0, r1, [sp]
 800a920:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a924:	4620      	mov	r0, r4
 800a926:	4629      	mov	r1, r5
 800a928:	f7f5 fc1e 	bl	8000168 <__aeabi_dsub>
 800a92c:	4602      	mov	r2, r0
 800a92e:	460b      	mov	r3, r1
 800a930:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a934:	f7f5 fefa 	bl	800072c <__aeabi_ddiv>
 800a938:	4632      	mov	r2, r6
 800a93a:	4604      	mov	r4, r0
 800a93c:	460d      	mov	r5, r1
 800a93e:	463b      	mov	r3, r7
 800a940:	4640      	mov	r0, r8
 800a942:	4649      	mov	r1, r9
 800a944:	f7f5 fdc8 	bl	80004d8 <__aeabi_dmul>
 800a948:	4632      	mov	r2, r6
 800a94a:	463b      	mov	r3, r7
 800a94c:	f7f5 fc0e 	bl	800016c <__adddf3>
 800a950:	4602      	mov	r2, r0
 800a952:	460b      	mov	r3, r1
 800a954:	4620      	mov	r0, r4
 800a956:	4629      	mov	r1, r5
 800a958:	f7f5 fc06 	bl	8000168 <__aeabi_dsub>
 800a95c:	4642      	mov	r2, r8
 800a95e:	464b      	mov	r3, r9
 800a960:	f7f5 fc02 	bl	8000168 <__aeabi_dsub>
 800a964:	4602      	mov	r2, r0
 800a966:	460b      	mov	r3, r1
 800a968:	2000      	movs	r0, #0
 800a96a:	4938      	ldr	r1, [pc, #224]	@ (800aa4c <__ieee754_pow+0xa3c>)
 800a96c:	f7f5 fbfc 	bl	8000168 <__aeabi_dsub>
 800a970:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a974:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800a978:	da2e      	bge.n	800a9d8 <__ieee754_pow+0x9c8>
 800a97a:	4652      	mov	r2, sl
 800a97c:	f000 f874 	bl	800aa68 <scalbn>
 800a980:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a984:	f7ff bbed 	b.w	800a162 <__ieee754_pow+0x152>
 800a988:	4c31      	ldr	r4, [pc, #196]	@ (800aa50 <__ieee754_pow+0xa40>)
 800a98a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a98e:	42a3      	cmp	r3, r4
 800a990:	d91a      	bls.n	800a9c8 <__ieee754_pow+0x9b8>
 800a992:	4b30      	ldr	r3, [pc, #192]	@ (800aa54 <__ieee754_pow+0xa44>)
 800a994:	440b      	add	r3, r1
 800a996:	4303      	orrs	r3, r0
 800a998:	d009      	beq.n	800a9ae <__ieee754_pow+0x99e>
 800a99a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	f7f6 f80b 	bl	80009bc <__aeabi_dcmplt>
 800a9a6:	3800      	subs	r0, #0
 800a9a8:	bf18      	it	ne
 800a9aa:	2001      	movne	r0, #1
 800a9ac:	e444      	b.n	800a238 <__ieee754_pow+0x228>
 800a9ae:	4642      	mov	r2, r8
 800a9b0:	464b      	mov	r3, r9
 800a9b2:	f7f5 fbd9 	bl	8000168 <__aeabi_dsub>
 800a9b6:	4632      	mov	r2, r6
 800a9b8:	463b      	mov	r3, r7
 800a9ba:	f7f6 f813 	bl	80009e4 <__aeabi_dcmpge>
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	d1eb      	bne.n	800a99a <__ieee754_pow+0x98a>
 800a9c2:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800aa58 <__ieee754_pow+0xa48>
 800a9c6:	e6fd      	b.n	800a7c4 <__ieee754_pow+0x7b4>
 800a9c8:	469a      	mov	sl, r3
 800a9ca:	4b24      	ldr	r3, [pc, #144]	@ (800aa5c <__ieee754_pow+0xa4c>)
 800a9cc:	459a      	cmp	sl, r3
 800a9ce:	f63f aef9 	bhi.w	800a7c4 <__ieee754_pow+0x7b4>
 800a9d2:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a9d6:	e71b      	b.n	800a810 <__ieee754_pow+0x800>
 800a9d8:	4621      	mov	r1, r4
 800a9da:	e7d1      	b.n	800a980 <__ieee754_pow+0x970>
 800a9dc:	2000      	movs	r0, #0
 800a9de:	491b      	ldr	r1, [pc, #108]	@ (800aa4c <__ieee754_pow+0xa3c>)
 800a9e0:	f7ff bb34 	b.w	800a04c <__ieee754_pow+0x3c>
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	2100      	movs	r1, #0
 800a9e8:	f7ff bb30 	b.w	800a04c <__ieee754_pow+0x3c>
 800a9ec:	4650      	mov	r0, sl
 800a9ee:	4659      	mov	r1, fp
 800a9f0:	f7ff bb2c 	b.w	800a04c <__ieee754_pow+0x3c>
 800a9f4:	460c      	mov	r4, r1
 800a9f6:	f7ff bb79 	b.w	800a0ec <__ieee754_pow+0xdc>
 800a9fa:	2400      	movs	r4, #0
 800a9fc:	f7ff bb64 	b.w	800a0c8 <__ieee754_pow+0xb8>
 800aa00:	652b82fe 	.word	0x652b82fe
 800aa04:	3c971547 	.word	0x3c971547
 800aa08:	00000000 	.word	0x00000000
 800aa0c:	3fe62e43 	.word	0x3fe62e43
 800aa10:	fefa39ef 	.word	0xfefa39ef
 800aa14:	3fe62e42 	.word	0x3fe62e42
 800aa18:	0ca86c39 	.word	0x0ca86c39
 800aa1c:	be205c61 	.word	0xbe205c61
 800aa20:	72bea4d0 	.word	0x72bea4d0
 800aa24:	3e663769 	.word	0x3e663769
 800aa28:	c5d26bf1 	.word	0xc5d26bf1
 800aa2c:	3ebbbd41 	.word	0x3ebbbd41
 800aa30:	af25de2c 	.word	0xaf25de2c
 800aa34:	3f11566a 	.word	0x3f11566a
 800aa38:	16bebd93 	.word	0x16bebd93
 800aa3c:	3f66c16c 	.word	0x3f66c16c
 800aa40:	5555553e 	.word	0x5555553e
 800aa44:	3fc55555 	.word	0x3fc55555
 800aa48:	fff00000 	.word	0xfff00000
 800aa4c:	3ff00000 	.word	0x3ff00000
 800aa50:	4090cbff 	.word	0x4090cbff
 800aa54:	3f6f3400 	.word	0x3f6f3400
 800aa58:	4090cc00 	.word	0x4090cc00
 800aa5c:	3fe00000 	.word	0x3fe00000

0800aa60 <fabs>:
 800aa60:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800aa64:	4619      	mov	r1, r3
 800aa66:	4770      	bx	lr

0800aa68 <scalbn>:
 800aa68:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800aa6c:	4616      	mov	r6, r2
 800aa6e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800aa72:	4683      	mov	fp, r0
 800aa74:	468c      	mov	ip, r1
 800aa76:	460b      	mov	r3, r1
 800aa78:	b982      	cbnz	r2, 800aa9c <scalbn+0x34>
 800aa7a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800aa7e:	4303      	orrs	r3, r0
 800aa80:	d039      	beq.n	800aaf6 <scalbn+0x8e>
 800aa82:	4b2f      	ldr	r3, [pc, #188]	@ (800ab40 <scalbn+0xd8>)
 800aa84:	2200      	movs	r2, #0
 800aa86:	f7f5 fd27 	bl	80004d8 <__aeabi_dmul>
 800aa8a:	4b2e      	ldr	r3, [pc, #184]	@ (800ab44 <scalbn+0xdc>)
 800aa8c:	4683      	mov	fp, r0
 800aa8e:	429e      	cmp	r6, r3
 800aa90:	468c      	mov	ip, r1
 800aa92:	da0d      	bge.n	800aab0 <scalbn+0x48>
 800aa94:	a326      	add	r3, pc, #152	@ (adr r3, 800ab30 <scalbn+0xc8>)
 800aa96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9a:	e01b      	b.n	800aad4 <scalbn+0x6c>
 800aa9c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800aaa0:	42ba      	cmp	r2, r7
 800aaa2:	d109      	bne.n	800aab8 <scalbn+0x50>
 800aaa4:	4602      	mov	r2, r0
 800aaa6:	f7f5 fb61 	bl	800016c <__adddf3>
 800aaaa:	4683      	mov	fp, r0
 800aaac:	468c      	mov	ip, r1
 800aaae:	e022      	b.n	800aaf6 <scalbn+0x8e>
 800aab0:	460b      	mov	r3, r1
 800aab2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800aab6:	3a36      	subs	r2, #54	@ 0x36
 800aab8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800aabc:	428e      	cmp	r6, r1
 800aabe:	dd0c      	ble.n	800aada <scalbn+0x72>
 800aac0:	a31d      	add	r3, pc, #116	@ (adr r3, 800ab38 <scalbn+0xd0>)
 800aac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac6:	461c      	mov	r4, r3
 800aac8:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800aacc:	f361 74df 	bfi	r4, r1, #31, #1
 800aad0:	4621      	mov	r1, r4
 800aad2:	481d      	ldr	r0, [pc, #116]	@ (800ab48 <scalbn+0xe0>)
 800aad4:	f7f5 fd00 	bl	80004d8 <__aeabi_dmul>
 800aad8:	e7e7      	b.n	800aaaa <scalbn+0x42>
 800aada:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800aade:	4432      	add	r2, r6
 800aae0:	428a      	cmp	r2, r1
 800aae2:	dced      	bgt.n	800aac0 <scalbn+0x58>
 800aae4:	2a00      	cmp	r2, #0
 800aae6:	dd0a      	ble.n	800aafe <scalbn+0x96>
 800aae8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800aaec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800aaf0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aaf4:	46ac      	mov	ip, r5
 800aaf6:	4658      	mov	r0, fp
 800aaf8:	4661      	mov	r1, ip
 800aafa:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800aafe:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800ab02:	da09      	bge.n	800ab18 <scalbn+0xb0>
 800ab04:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800ab08:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800ab0c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800ab10:	480e      	ldr	r0, [pc, #56]	@ (800ab4c <scalbn+0xe4>)
 800ab12:	f041 011f 	orr.w	r1, r1, #31
 800ab16:	e7bd      	b.n	800aa94 <scalbn+0x2c>
 800ab18:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ab1c:	3236      	adds	r2, #54	@ 0x36
 800ab1e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ab22:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ab26:	4658      	mov	r0, fp
 800ab28:	4629      	mov	r1, r5
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	4b08      	ldr	r3, [pc, #32]	@ (800ab50 <scalbn+0xe8>)
 800ab2e:	e7d1      	b.n	800aad4 <scalbn+0x6c>
 800ab30:	c2f8f359 	.word	0xc2f8f359
 800ab34:	01a56e1f 	.word	0x01a56e1f
 800ab38:	8800759c 	.word	0x8800759c
 800ab3c:	7e37e43c 	.word	0x7e37e43c
 800ab40:	43500000 	.word	0x43500000
 800ab44:	ffff3cb0 	.word	0xffff3cb0
 800ab48:	8800759c 	.word	0x8800759c
 800ab4c:	c2f8f359 	.word	0xc2f8f359
 800ab50:	3c900000 	.word	0x3c900000

0800ab54 <with_errno>:
 800ab54:	b570      	push	{r4, r5, r6, lr}
 800ab56:	4604      	mov	r4, r0
 800ab58:	460d      	mov	r5, r1
 800ab5a:	4616      	mov	r6, r2
 800ab5c:	f7fc fd02 	bl	8007564 <__errno>
 800ab60:	4629      	mov	r1, r5
 800ab62:	6006      	str	r6, [r0, #0]
 800ab64:	4620      	mov	r0, r4
 800ab66:	bd70      	pop	{r4, r5, r6, pc}

0800ab68 <xflow>:
 800ab68:	b513      	push	{r0, r1, r4, lr}
 800ab6a:	4604      	mov	r4, r0
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	4610      	mov	r0, r2
 800ab70:	b10c      	cbz	r4, 800ab76 <xflow+0xe>
 800ab72:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ab76:	e9cd 2300 	strd	r2, r3, [sp]
 800ab7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab7e:	f7f5 fcab 	bl	80004d8 <__aeabi_dmul>
 800ab82:	2222      	movs	r2, #34	@ 0x22
 800ab84:	b002      	add	sp, #8
 800ab86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab8a:	f7ff bfe3 	b.w	800ab54 <with_errno>

0800ab8e <__math_uflow>:
 800ab8e:	2200      	movs	r2, #0
 800ab90:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ab94:	f7ff bfe8 	b.w	800ab68 <xflow>

0800ab98 <__math_oflow>:
 800ab98:	2200      	movs	r2, #0
 800ab9a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800ab9e:	f7ff bfe3 	b.w	800ab68 <xflow>
	...

0800aba4 <__ieee754_sqrt>:
 800aba4:	4a67      	ldr	r2, [pc, #412]	@ (800ad44 <__ieee754_sqrt+0x1a0>)
 800aba6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abaa:	438a      	bics	r2, r1
 800abac:	4606      	mov	r6, r0
 800abae:	460f      	mov	r7, r1
 800abb0:	460b      	mov	r3, r1
 800abb2:	4604      	mov	r4, r0
 800abb4:	d10e      	bne.n	800abd4 <__ieee754_sqrt+0x30>
 800abb6:	4602      	mov	r2, r0
 800abb8:	f7f5 fc8e 	bl	80004d8 <__aeabi_dmul>
 800abbc:	4602      	mov	r2, r0
 800abbe:	460b      	mov	r3, r1
 800abc0:	4630      	mov	r0, r6
 800abc2:	4639      	mov	r1, r7
 800abc4:	f7f5 fad2 	bl	800016c <__adddf3>
 800abc8:	4606      	mov	r6, r0
 800abca:	460f      	mov	r7, r1
 800abcc:	4630      	mov	r0, r6
 800abce:	4639      	mov	r1, r7
 800abd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abd4:	2900      	cmp	r1, #0
 800abd6:	dc0c      	bgt.n	800abf2 <__ieee754_sqrt+0x4e>
 800abd8:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800abdc:	4302      	orrs	r2, r0
 800abde:	d0f5      	beq.n	800abcc <__ieee754_sqrt+0x28>
 800abe0:	b189      	cbz	r1, 800ac06 <__ieee754_sqrt+0x62>
 800abe2:	4602      	mov	r2, r0
 800abe4:	f7f5 fac0 	bl	8000168 <__aeabi_dsub>
 800abe8:	4602      	mov	r2, r0
 800abea:	460b      	mov	r3, r1
 800abec:	f7f5 fd9e 	bl	800072c <__aeabi_ddiv>
 800abf0:	e7ea      	b.n	800abc8 <__ieee754_sqrt+0x24>
 800abf2:	150a      	asrs	r2, r1, #20
 800abf4:	d115      	bne.n	800ac22 <__ieee754_sqrt+0x7e>
 800abf6:	2100      	movs	r1, #0
 800abf8:	e009      	b.n	800ac0e <__ieee754_sqrt+0x6a>
 800abfa:	0ae3      	lsrs	r3, r4, #11
 800abfc:	3a15      	subs	r2, #21
 800abfe:	0564      	lsls	r4, r4, #21
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d0fa      	beq.n	800abfa <__ieee754_sqrt+0x56>
 800ac04:	e7f7      	b.n	800abf6 <__ieee754_sqrt+0x52>
 800ac06:	460a      	mov	r2, r1
 800ac08:	e7fa      	b.n	800ac00 <__ieee754_sqrt+0x5c>
 800ac0a:	005b      	lsls	r3, r3, #1
 800ac0c:	3101      	adds	r1, #1
 800ac0e:	02d8      	lsls	r0, r3, #11
 800ac10:	d5fb      	bpl.n	800ac0a <__ieee754_sqrt+0x66>
 800ac12:	1e48      	subs	r0, r1, #1
 800ac14:	1a12      	subs	r2, r2, r0
 800ac16:	f1c1 0020 	rsb	r0, r1, #32
 800ac1a:	fa24 f000 	lsr.w	r0, r4, r0
 800ac1e:	4303      	orrs	r3, r0
 800ac20:	408c      	lsls	r4, r1
 800ac22:	2600      	movs	r6, #0
 800ac24:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800ac28:	2116      	movs	r1, #22
 800ac2a:	07d2      	lsls	r2, r2, #31
 800ac2c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800ac30:	4632      	mov	r2, r6
 800ac32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ac3a:	bf5c      	itt	pl
 800ac3c:	005b      	lslpl	r3, r3, #1
 800ac3e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800ac42:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ac46:	bf58      	it	pl
 800ac48:	0064      	lslpl	r4, r4, #1
 800ac4a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800ac4e:	107f      	asrs	r7, r7, #1
 800ac50:	0064      	lsls	r4, r4, #1
 800ac52:	1815      	adds	r5, r2, r0
 800ac54:	429d      	cmp	r5, r3
 800ac56:	bfde      	ittt	le
 800ac58:	182a      	addle	r2, r5, r0
 800ac5a:	1b5b      	suble	r3, r3, r5
 800ac5c:	1836      	addle	r6, r6, r0
 800ac5e:	0fe5      	lsrs	r5, r4, #31
 800ac60:	3901      	subs	r1, #1
 800ac62:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800ac66:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800ac6a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800ac6e:	d1f0      	bne.n	800ac52 <__ieee754_sqrt+0xae>
 800ac70:	460d      	mov	r5, r1
 800ac72:	f04f 0a20 	mov.w	sl, #32
 800ac76:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	eb01 0c00 	add.w	ip, r1, r0
 800ac80:	db02      	blt.n	800ac88 <__ieee754_sqrt+0xe4>
 800ac82:	d113      	bne.n	800acac <__ieee754_sqrt+0x108>
 800ac84:	45a4      	cmp	ip, r4
 800ac86:	d811      	bhi.n	800acac <__ieee754_sqrt+0x108>
 800ac88:	f1bc 0f00 	cmp.w	ip, #0
 800ac8c:	eb0c 0100 	add.w	r1, ip, r0
 800ac90:	da42      	bge.n	800ad18 <__ieee754_sqrt+0x174>
 800ac92:	2900      	cmp	r1, #0
 800ac94:	db40      	blt.n	800ad18 <__ieee754_sqrt+0x174>
 800ac96:	f102 0e01 	add.w	lr, r2, #1
 800ac9a:	1a9b      	subs	r3, r3, r2
 800ac9c:	4672      	mov	r2, lr
 800ac9e:	45a4      	cmp	ip, r4
 800aca0:	bf88      	it	hi
 800aca2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800aca6:	eba4 040c 	sub.w	r4, r4, ip
 800acaa:	4405      	add	r5, r0
 800acac:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800acb0:	f1ba 0a01 	subs.w	sl, sl, #1
 800acb4:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800acb8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800acbc:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800acc0:	d1db      	bne.n	800ac7a <__ieee754_sqrt+0xd6>
 800acc2:	431c      	orrs	r4, r3
 800acc4:	d01a      	beq.n	800acfc <__ieee754_sqrt+0x158>
 800acc6:	4c20      	ldr	r4, [pc, #128]	@ (800ad48 <__ieee754_sqrt+0x1a4>)
 800acc8:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800ad4c <__ieee754_sqrt+0x1a8>
 800accc:	e9d4 0100 	ldrd	r0, r1, [r4]
 800acd0:	e9db 2300 	ldrd	r2, r3, [fp]
 800acd4:	f7f5 fa48 	bl	8000168 <__aeabi_dsub>
 800acd8:	e9d4 8900 	ldrd	r8, r9, [r4]
 800acdc:	4602      	mov	r2, r0
 800acde:	460b      	mov	r3, r1
 800ace0:	4640      	mov	r0, r8
 800ace2:	4649      	mov	r1, r9
 800ace4:	f7f5 fe74 	bl	80009d0 <__aeabi_dcmple>
 800ace8:	b140      	cbz	r0, 800acfc <__ieee754_sqrt+0x158>
 800acea:	e9d4 0100 	ldrd	r0, r1, [r4]
 800acee:	e9db 2300 	ldrd	r2, r3, [fp]
 800acf2:	f1b5 3fff 	cmp.w	r5, #4294967295
 800acf6:	d111      	bne.n	800ad1c <__ieee754_sqrt+0x178>
 800acf8:	4655      	mov	r5, sl
 800acfa:	3601      	adds	r6, #1
 800acfc:	1072      	asrs	r2, r6, #1
 800acfe:	086b      	lsrs	r3, r5, #1
 800ad00:	07f1      	lsls	r1, r6, #31
 800ad02:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800ad06:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800ad0a:	bf48      	it	mi
 800ad0c:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800ad10:	4618      	mov	r0, r3
 800ad12:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800ad16:	e757      	b.n	800abc8 <__ieee754_sqrt+0x24>
 800ad18:	4696      	mov	lr, r2
 800ad1a:	e7be      	b.n	800ac9a <__ieee754_sqrt+0xf6>
 800ad1c:	f7f5 fa26 	bl	800016c <__adddf3>
 800ad20:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ad24:	4602      	mov	r2, r0
 800ad26:	460b      	mov	r3, r1
 800ad28:	4640      	mov	r0, r8
 800ad2a:	4649      	mov	r1, r9
 800ad2c:	f7f5 fe46 	bl	80009bc <__aeabi_dcmplt>
 800ad30:	b120      	cbz	r0, 800ad3c <__ieee754_sqrt+0x198>
 800ad32:	1ca8      	adds	r0, r5, #2
 800ad34:	bf08      	it	eq
 800ad36:	3601      	addeq	r6, #1
 800ad38:	3502      	adds	r5, #2
 800ad3a:	e7df      	b.n	800acfc <__ieee754_sqrt+0x158>
 800ad3c:	1c6b      	adds	r3, r5, #1
 800ad3e:	f023 0501 	bic.w	r5, r3, #1
 800ad42:	e7db      	b.n	800acfc <__ieee754_sqrt+0x158>
 800ad44:	7ff00000 	.word	0x7ff00000
 800ad48:	200001f8 	.word	0x200001f8
 800ad4c:	200001f0 	.word	0x200001f0

0800ad50 <_init>:
 800ad50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad52:	bf00      	nop
 800ad54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad56:	bc08      	pop	{r3}
 800ad58:	469e      	mov	lr, r3
 800ad5a:	4770      	bx	lr

0800ad5c <_fini>:
 800ad5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad5e:	bf00      	nop
 800ad60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad62:	bc08      	pop	{r3}
 800ad64:	469e      	mov	lr, r3
 800ad66:	4770      	bx	lr
